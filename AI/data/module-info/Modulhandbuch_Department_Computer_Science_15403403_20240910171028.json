[
  {
    "module_id": "CIT226000",
    "title": "Immersive Storytelling: Games",
    "level": "Bachelor",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Unregelmäßig",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 105,
    "hours_presence": 75,
    "examination_achievements": "Die Prüfungsleistung wird in Form von Projektarbeit erbracht. Die Studierenden wenden die erworbenen Kenntnisse in einem Team an, um gemeinsam eine selbstdefinierte Projektaufgabe zu lösen. Damit weisen die Teilnehmer nach, dass sie die Geschichtswelt spezifischen Game Design Elemente verstanden haben und gezielt einsetzten können. Durch das Umsetzen eines Systems zur Ausarbeitung der interaktiven Geschichtswelt werden die Erworbenen Kenntnisse anschaulich dargestellt. Der Lernerfolg wird fortlaufend ermittelt:\n- in regelmäßigen Gruppenmeetings, in welchen jedes Teammitglied auf einen Teil der\nProjektarbeit eingeht und von einer anderen Gruppe Feedback erhält (Pair-reviews) Zum Semesterende:\n- in einer 20 bis 30-minütigen Abschlusspräsentation (pro Projektgruppe), in welcher jedes\nTeammitglied auf einen Teil der Projektarbeit eingeht (40%)\n- in einem ca. 2-minütigen Video (Trailer), welches die Kerninhalte des Projekts darstellt (20%),\nund\n- in einem 10-seitigen Designdokument (40%), in welchem algorithmische, methodische und\ngrafische Aspekte erklärt und die funktionalen, sowie inhaltlichen Schwerpunkte vorgestellt werden.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0031 Einführung in Informatik für Games Engineering, IN0038 Echtzeit-Computergrafik, IN0033\nInteraktionsmethoden und -gerät\nCIT226000: Immersive Storytelling: Games | Immersive Storytelling: Games",
    "content": "Digitale Technologien wie die virtuelle Realität und der Einsatz moderner Rendering-Techniken sind Schlüsseltechnologien für die Gestaltung künftiger virtueller Erfahrungen im Bereich der Industrie, der Bildung und der Unterhaltungsbranche. Um diese Technologie mit interessanten Inhalten befüllen zu können, besteht ein Bedarf an glaubwürdigen Welten, welche die verschiedenen Arten an immersiver Erfahrungen bereichern können. In diesem Kurs werden Grundlagen für die Entwicklung flexibler und skalierbarer Systeme vorgestellt und entwickelt, welche für komplexe Geschichtswelten erforderlich sind. Dabei lernen die Studierenden die Anforderungen und Blickwinkeln von Schriftstellern und Regisseure kennen und erwerben Kompetenzen im Bereich der kreativen Ausarbeitung von virtuellen Welten. Behandelt werden grundlegende Elemente im Game Design, ergänzt durch Techniken zum direkten und indirekten vermitteln von Geschichtselementen in interaktiven Medien, können die Studierende den Einsatz von Stilmitteln in der virtuellen Welt verstehen lernen und selbst erproben. Durch die Kombination mit Studierenden der Hochschule für Fernsehen und Film München, werden aktiv an eigenen Beispielen gearbeitet und die behandelten Themen praktisch umgesetzt und vertieft. Während einer als Blockveranstaltung abgehaltenen 2 ½-Wöchigen Kombination aus Vorträgen, Interaktiven Übungen und das behandeln von Fallstudien, können bereits in Einzel und Gruppenarbeit unterschiedliche Schwerpunkte für die eigene Projektidee ausgearbeitet werden. Projektbegleitend werden gezielte Vorträge mit ergänzenden Inhalten angeboten und in regelmäßigen Abständen finden Zwischenpräsentationen der Projektgruppenmitglieder statt.",
    "learning_outcomes": "Nach der Teilnahme an diesem Kurs kennen die Studierende unterschiedliche Elemente im Bereich des Game Design zur Vermittlung von komplexen Geschichtswelten und dessen Wirkung im Spiel. Sie können diese bewerten und gezielt implementieren. Zusätzlich beherrschen die Studierenden das Anwenden Methoden und Algorithmen zur Implementierung von Systemen für das Entwerfen, Entwickeln und Umsetzen von interaktiven Geschichtswelten. Durch die Arbeit in interdisziplinären Teams mit unterschiedlichen Expertisen, entsteht ein realistischer Arbeitsablauf und Verteilung in der Produktion von Spielen. Dies ermöglicht das Verstehen von Entwicklungsprozessen und den Einsatz von agilen Methoden zum Bewerten des Projektverlaufs und das Erreichen von individuell gesetzten Zielen.",
    "teaching_methods": "Lehrtechnik: Interaktives Seminar, Projekt. Lernaktivität: Bearbeiten von Problemen und deren Lösungsfindung, Zusammenarbeit mit anderen Studierenden, Vorbereiten und Durchführen von Präsentationen, Einhalten von Fristen. Lehrmethode: Gruppenarbeit, Präsentation, Projektarbeit.",
    "media": "Direkter, individueller Gedankenaustausch mit Dozenten, Doktoranden und Kommilitonen; Folien,\nflipped classroom, pair-reviews\nCIT226000: Immersive Storytelling: Games | Immersive Storytelling: Games",
    "literature": "- Fundamentals of Game Design - Adams, Ernest\n- The Art of Game Design: A Book of Lenses - Jesse Schell\n- Once upon a pixel - Paterson, Eddie\n- Interactive storytelling for video games: a player-centered approach to creating memorable\ncharacters and stories - Lebowitz, Josiah; Klug, Chris",
    "lv_sws_lecturer": "Groh, Georg; Prof. Dr. rer. nat. habil.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nImmersive Storytelling: Games (CIT226000) (Seminar, 5 SWS)\nKlinker G [L], Dyrda D, Liedtke S"
  },
  {
    "module_id": "CIT3220000",
    "title": "Games mit Bewegung - Dein Körper als 3D Nutzerinterface",
    "level": "Bachelor",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 105,
    "hours_presence": 45,
    "examination_achievements": "Die Prüfungsleistung wird in Form von Projektarbeit erbracht. Die Studierenden wenden die erworbenen Kenntnisse in einem Team an, um gemeinsam eine selbstdefinierte Projektaufgabe zu lösen. Damit weisen die Teilnehmer nach, dass sie mit aktuellen Interaktionsgeräten und mit Methoden des Motion Capturing umgehen können, dass sie sie verstanden haben, sie selbständig in körperbasierten Spieleanwendungen einsetzen können und die grundlegenden Techniken im Umgang mit 3D User Interfaces beherrschen und diskutieren können. Der Lernerfolg wird fortlaufend ermittelt:\n- in zweiwöchentlichen Gruppenmeetings, in welchen jedes\nTeammitglied auf einen Teil der Projektarbeit eingeht und von einer anderen Gruppe Feedback erhält (Pair-reviews) Zum Semesterende\n- in einer 20-minütigen Abschlusspräsentation (pro Projektgruppe), in welcher jedes Teammitglied\nauf einen Teil der Projektarbeit eingeht,\n- in einem ca 2-minütigen Video (Trailer), welches die Kerninhalte des Projekts darstellt, und\n- in einem ca. 10-seitigen Designdokument, in welchem algorithmische, methodische und grafische\nAspekte erklärt und die funktionalen, sowie inhaltlichen Schwerpunkte vorgestellt werden.",
    "repetition": "",
    "recommended_prerequisites": "IN0031, IN0033\nCIT3220000: Games mit Bewegung - Dein Körper als 3D Nutzerinterface | Games with Motion - 3D UI with Your Body",
    "content": "Dieses Modul führt aktuelle Techniken zum Erfassen, Verfolgen und Interagieren im drei-dimensionalen Raum ein. Anschließend werden Fragestellungen und Probleme bei Nutzerinteraktionen mit 3D UserInterfaces diskutiert. Während des Seminars werden praxisnahe Aufgaben im Bereich 3D User-Interfaces und Mixed- Reality Anwendungen gestellt und in der zweiten Hälfte des Semesters in kleinen Projektteams fortgeführt. Eine Projektaufgabe wird hier hinsichtlich Konzeptionierung und Implementierung in einer interaktiven drei-dimensionalen Anwendung umgesetzt. Der Projektfortschritt wird agil und iterativ begleitet, um zeitnah Feedback zum Verlauf geben zu können. Als Abschluss werden die erarbeiten Projekte anhand von nutzerzentrierten Evaluierungsmethoden analysiert, und im Rahmen von Pair-Reviews zwischen den einzelnen Gruppen besprochen.",
    "learning_outcomes": "Nach Abschluss dieses Moduls sind Studierende in der Lage, eine Auswahl aktuell am Markt verfügbarer neuartiger Interaktionsgeräte zum Motion Capturing in interaktiven Anwendungen einzusetzen. Desgleichen können sie einfache, animierte Charaktere implementieren. Sie kennen Softwaresysteme zur Interpretation von Bewegungsdaten, sowie Komponenten einer Pipeline zum Anlernen ausgewählter Gesten. Durch den praktischen Umgang mit diesen Systemen können sie zwischen den Schwierigkeitsgraden ausgesuchter Ideen für interaktive Anwendungen differenzieren. Sowie diese mit verfügbaren Interaktionsgeräte und Gesteninterpretationssoftware umsetzen. Sie können grundlegende Probleme bei 3D Nutzerinteraktionen einordnen und in Verbindung mit den diskutierten Techniken deren Relevanz ableiten und implementieren.",
    "teaching_methods": "Lehrtechnik: Projekt. Lernaktivität: Bearbeiten von Problemen und deren Lösungsfindung, Zusammenarbeit mit anderen Studierenden, Vorbereiten und Durchführen von Präsentationen, Einhalten von Fristen. Lehrmethode: Gruppenarbeit, Präsentation, Projektarbeit.",
    "media": "Direkter, individueller Gedankenaustausch mit Dozenten, Doktoranden und Kommilitonen; Folien,\nflipped classroom, pair-reviews",
    "literature": "+ Alberto Menache: Understanding Motion Capture for Computer\nAnimation, Second Edition (Morgan Kaufmann Series in Computer Graphics)\n+ Ricardo Tobon, Alex Restrepo: The Mocap Book: A Practical Guite to the Art of Motion Capture\n+ Aktuelle Artikel aus Konferenzen und Zeitschriften",
    "lv_sws_lecturer": "Plecher, David; Prof. Dr. rer. nat.\nCIT3220000: Games mit Bewegung - Dein Körper als 3D Nutzerinterface | Games with Motion - 3D UI with Your Body\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nGames mit Bewegung- Dein Körper als 3D Nutzerinterface (CIT3220000) (Seminar, 3 SWS)\nKlinker G [L], Weber S, Liedtke S"
  },
  {
    "module_id": "CIT3230000",
    "title": "Advanced Concepts of Programming Languages",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 105,
    "hours_presence": 75,
    "examination_achievements": "The assessment is by means of a written exam of 90 minutes. Individual assignments assess in how far students are able to reproduce the complex semantical behaviors of small example programs. Their knowledge and practical skills concerning programming constructs is further assessed by assignments, which ask to simulate programming language constructs of one kind by programming language constructs of another kind. It is permitted to prepare a double-sided A4 sheet of paper for the written exam and bring it to the exam.",
    "repetition": "Folgesemester",
    "recommended_prerequisites": "IN0001 Introduction to Informatics,\nIN0002 Fundamentals of Programming (Exercises & Laboratory),\nIN0003 Functional Programming and Verification,\nat least one programming language",
    "content": "This is not a beginners programming course – Instead, this lecture focusses on the semantics of various programming language concepts, and their implementation from the point of view of a compiler engineer. Topics may include, among others:\n- Relaxed Memory Models\n- Wait-/Lock-free Programming\n- Locks, Monitors & Condition Variables\n- Transactional Memory\n- Gotos, Co-Routines and Continuations\n- Single/Multi-Dispatching\nCIT3230000: Advanced Concepts of Programming Languages | Advanced Concepts of Programming Languages\n- (Multiple-) Inheritance\n- Delegation and Prototype Based Programming\n- Aspect Oriented Programming\n- Meta programming",
    "learning_outcomes": "After successful completion of this module, students are familiar with an assortment of programming language constructs from popular programming languages. They understand the semantics of these constructs as well as the implementation consequences, that they inflict on the implementation as well as the runtime behavior of compiler and runtime system. They are able to analyze and compare different language based approaches, to discuss their relative merits and potential workarounds in case certain language features are missing. By means of this knowledge, they are able to extend existing compilers to handle the aforementioned constructs as well as able to re-encode concepts from one language by means of another language.",
    "teaching_methods": "By means of pre-recorded lesson videos of around 15 minutes each, students can prepare the lecture content at their own pace. In the classroom, students can open discussion on unclear parts of the lesson videos. Additionally, illustrating examples and live programming enhance and deepen the student’s insights into the topics. Selected problems that are then solved by the joined effort of the audience and the lecturer further illustrate the lessons with hands-on experiences. In the additionally offered exercise course (2h), accompanying assignments for individual study deepen the understanding of the concepts explained in the lecture, train students to apply the learnt concepts in implementations and develop the skill to to simulate the effect of missing language features by others.",
    "media": "Pre-recorded lesson videos, in-class programming experiments, quizzes, collaborative shared\nwhiteboard, programming assignments",
    "literature": "Selected literature of the area and appropriate conference or journal papers.\nExcerpts from topic-based literature:\nTopic:\n- Memory Consistency [11]\n- Functional Memory Model [2]\n- Transactional Memory [4]\n- Synchronization in Functional Programming [8]\n- Multiple Dispatching [7]\n- Multiple inheritance [3]\n- Mixins [1] and Traits [9]\n- Prototype Based Programming [5]\n- Aspect Oritentation [6]\nCIT3230000: Advanced Concepts of Programming Languages | Advanced Concepts of Programming Languages\n- Metaprogramming [10\nReferences:\n[1] Gilad Bracha and William Cook. “Mixin-based inheritance”. In: European conference on object-\noriented programming on Object-oriented programming systems, languages, and applications\n(OOPSLA/ECOOP) (1990).\n[2] Stephen Dolan, KC Sivaramakrishnan, and Anil Madhavapeddy. “Bounding data races in space\nand time”. In: (June 2018). doi: 10.1145/3296979.3192421.\n[3] Margaret A. Ellis and Bjarne Stroustrup. The Annotated C++ Reference Manual. Addison-\nWesley, 1990. isbn: 0-201-51459-1.\n[4] Tim Harris, James Larus, and Ravi Rajwar. “Transactional Memory, 2nd edition”. In: Synthesis\nLectures on Computer Architecture 5.1 (2010), pp. 1–263.\n[5] Roberto Ierusalimschy. Programming in Lua, Third Edition. Lua.Org, 2013. isbn: 859037985X.\n[6] H. Masuhara, G. Kiczales, and C. Dutchyn. “A Compilation and Optimization Model for Aspect-\nOriented Programs”. In: Compiler Construction. Lecture Notes in Computer Science 2622 (2003).\nEd. by G”orel Hedin, pp. 46–60.\n[7] Radu Muschevici et al. “Multiple dispatch in practice”. In: Proceedings of the 23rd Annual ACM\nSIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications,\nOOPSLA 2008, October 19-23, 2008, Nashville, TN, USA. Ed. by Gail E. Harris. ACM, 2008, pp.\n563–582. doi: 10.1145/1449764. 1449808. url: https://doi.org/10.1145/1449764.1449808.\n[8] Simon Peyton Jones, Andrew Gordon, and Sigbjorn Finne. “Concurrent Haskell”. In:\nProceedings of the 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming\nLanguages. POPL ’96. St. Petersburg Beach, Florida, USA: Association for Computing Machinery,\n1996, pp. 295–308. isbn: 0897917693. doi:\n10.1145/237721.237794. url: https://doi.org/10.1145/237721.237794.\n[9] Nathanael Sch¨arli et al. “Traits: Composable Units of Behaviour”. In: European Conference on\nObject-Oriented Programming (ECOOP) (2003).\n[10] Peter Seibel. Practical Common Lisp. 1st. USA: Apress, 2012. isbn: 1430242906. url: https://\ngigamonkeys.com/book/.\n[11] Daniel J. Sorin, Mark D. Hill, and David A. Wood. A Primer on Memory Consistency and Cache\nCoherence. 1st. Morgan & Claypool Publishers, 2011. isbn:\n1608455645, 9781608455645.",
    "lv_sws_lecturer": "Seidl, Helmut; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nAdvanced Concepts of Programming Languages (CIT3230000) (Vorlesung, 3 SWS)\nSeidl H [L], Petter M\nExercise - Advanced Concepts of Programming Languages (CIT3230000) (Übung, 2 SWS)\nTilscher S [L], Petter M, Seidl H, Tilscher S"
  },
  {
    "module_id": "CIT3230001",
    "title": "Codegenerierung für Datenverarbeitung",
    "level": "Bachelor/Master",
    "language": "Deutsch/Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 105,
    "hours_presence": 75,
    "examination_achievements": "Die Modulprüfung besteht aus einer Klausur (90 Minuten), in der die Studierenden nachweisen, dass sie die Funktionsweise von Codegenerierung im Kontext datenverarbeitender Systeme verstanden haben und unter Beachtung anwendungsspezifischer Besonderheiten derartige Systeme entwickeln können. Die Prüfung erfordert vorrangig eigensta#ndig formulierte Antworten, gegebenenfalls auch das Vervollständigen von Code-Segmenten.",
    "repetition": "",
    "recommended_prerequisites": "IN0004 Einführung in die Rechnerarchitektur;\nIN0008 Grundlagen: Datenbanken",
    "content": "- Grundlegende Ausführungsmodelle von Programmen (Intepretation, Verwendung von Bytecode,\nMaschinencodeerzeugung, etc.)\n- Verschiedene Programmrepräsentationen (Quelltext, Intermediate Representations (IRs),\nverschiedene Formen von Bytecode)\n- Klassische Techniken der Codegenerierung\n- SSA und Optimierungstechniken am Beispiel von LLVM-IR\n- Maschinencodegenerierung: Instruktionsselektion und Registerallokation\n- Ausführung von Programmen in virtuellen Maschinen (z.B. WebAssembly, BPF, JavaScript)\n- Sandboxing und Optimierungen für JIT-Kompilierung\n- Ausführung von Datenbankanfragen (z.B. SQL, Data Frame API)\n- Ausführungsmodelle und Coderepräsentationen\n- Ausführung von Maschinencode/Binary Translation (z.B. RISC-V)\nCIT3230001: Codegenerierung für Datenverarbeitung | Code Generation for Data Processing\n- Besonderheiten bei der Übersetzung von Maschinencode",
    "learning_outcomes": "Nach erfolgreicher Teilnahme am Modul sind die Studierenden in der Lage, eine effiziente Ausführungsumgebung für datenverarbeitende Programme auf Basis von Codegenerierung zu implementieren. Die Studierenden können für Hochsprachen, Datenbankabfragen und Maschinencode geeignete Programmrepräsentationen entwerfen, diese zu performantem Maschinencode übersetzen, und geeignete Optimierungen und Sicherheitsmaßnahmen (Sandboxing) verwenden.",
    "teaching_methods": "In der Vorlesung werden die Inhalte im Vortrag unter Verwendung konkreter Beispiele und Diskussionen mit den Studierenden vermittelt. Die Vorlesung soll den Studierenden dabei auch als Motivation zur eigenständigen inhaltlichen Auseinandersetzung mit den Themen sowie zum Studium der Literatur dienen. In den begleitenden Übungen sollen die Studierenden die vermittelten Konzepte implementieren, um das Verständnis der behandelten Techniken zu vertiefen.",
    "media": "Vortrag mit Folien, Übungsblätter",
    "literature": "LLVM Documentation: https://llvm.org/docs/\nFranz Faerber, Alfons Kemper, Per-Åke Larson, Justin J. Levandoski, Thomas Neumann, Andrew\nPavlo. Main Memory Database Systems\nJames E. Smith, Ravi Nair: Virtual Machines, Versatile Platforms for Systems and Processes,\nElsevier/Morgan Kaufmann, 2005",
    "lv_sws_lecturer": "Neumann, Thomas; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nCodegenerierung für Datenverarbeitung (CIT3230001) (Vorlesung mit integrierten Übungen, 5\nSWS)\nEngelke A"
  },
  {
    "module_id": "CIT3230002",
    "title": "Cloud Information Systems",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 75,
    "hours_presence": 75,
    "examination_achievements": "The assessment is by means of a written exam of 90 minutes assessing knowledge regarding the fundamental concepts of cloud information systems.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0010 Introduction to Computer Networking and Distributed Systems (recommended)",
    "content": "- Introduction to foundational technologies (virtualization, containers, orchestration)\n- Architecture of cloud-native information systems (client/server, middleware, microservices)\n- Cost optimization in public clouds (cost and pricing models)\n- Economic cloud architecture comparison\n- Multi-cloud deployments\n- Implications of SaaS (DevOps, security)\n- Case studies of public clouds\n- Case studies of cloud-native information system architectures and their building blocks (e.g.,\ncloud object stores, key/value stores, OLTP DBMS, OLAP DBMS)",
    "learning_outcomes": "Upon successful completion of this module, students are able to:\n- understand and analyze public cloud services.\n- define the requirements and challenges when architecting, implementing and managing cloud-\nnative information systems.\n- design cost-efficient and scalable cloud information systems using current cloud technologies.\nCIT3230002: Cloud Information Systems | Cloud Information Systems",
    "teaching_methods": "By means of a presentation, either by slides or whiteboard, the lecture presents fundamental concepts of public clouds and the architecture of scalable and cost-efficient cloud information systems. Accompanying assignments for individual study deepen the understanding of the concepts explained in the lecture.",
    "media": "Slides and further supporting documents",
    "literature": "- The Cloud Computing Book: The Future of Computing Explained by Douglas E. Comer, CRC\n2021\n- Cloud Computing: Concepts, Technology & Architecture by Thomas Erl, Ricardo Puttini, and\nZaigham Mahomood, Pearson, 2013\n- Research papers from systems and database conferences",
    "lv_sws_lecturer": "Leis, Viktor; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "CIT3230003",
    "title": "Data Structure Engineering",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "The goal of the course is to teach skills for understanding and developing efficient data structures. We assess that in a written 90-minute exam that tests the acquired knowledge about modern hardware and data structures discussed in the lecture, as well as the ability to apply this knowledge based on usage scenarios.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0007 Fundamentals of Algorithms and Data Structures (recommended)\nIN0004 Introduction to Computer Organization and Technology - Computer Architecture\n(recommended)\nKnowledge of low-level language, e.g., C/C++, Rust",
    "content": "Data structure engineering is the process of designing and implementing in-memory and out-of- memory data structures to support the efficient storage, organization, and retrieval of data. On modern hardware a low asymptotic complexity alone does not guarantee high performance; one must also take features of today's processors and storage technologies into account. The course first introduces the necessary hardware background, before studying different data structures such as hash tables, search trees, and tries and how to optimize them for modern hardware.",
    "learning_outcomes": "Students can design efficient and compact data structures. They are capable of implementing custom, domain-specific data structure variants and of synchronizing them for multi-core processors in a scalable fashion. CIT3230003: Data Structure Engineering | Data Structure Engineering",
    "teaching_methods": "By means of a presentation, either by slides or whiteboard, the lecture presents existing high- performance data structures, and teaches basic principles and techniques of data structure engineering. Accompanying assignments for individual study deepen the understanding of the concepts explained in the lecture, train students to implement custom data structures.",
    "media": "Slides and further supporting documents",
    "literature": "John L. Hennessy & David A. Patterson. Computer Architecture: A Quantitative Approach\nResearch papers from conferences such as SIGMOD, VLDB, and ICDE",
    "lv_sws_lecturer": "Leis, Viktor; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nData Structure Engineering (CIT3230003) (Vorlesung, 4 SWS)\nLeis V, Kuschewski M"
  },
  {
    "module_id": "CIT3230004",
    "title": "Data Processing on Modern Hardware",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "The exam takes the form of a 90 minutes written test or an oral exam in case of low number of participants. Assignments that assess whether the student can apply the various optimization techniques taught in class on a given data structure/workload set-up or whether the student can correctly identify and explain the performance behavior of a system running on a modern hardware configuration.",
    "repetition": "Folgesemester",
    "recommended_prerequisites": "IN0004 Introduction to Computer Organization and Technology – Computer Architecture\nIN0008 Fundamentals of Databases\nIN0007 Fundamentals of Algorithms and Data Structures",
    "content": "* Cache hierarchy awareness and how it influences the design of modern data storage formats and indexes. * Memory-, threading- and execution models for data processing on modern machines * Latest practices for query execution, compilation and optimization * Exploiting parallelism in multi-core machines for in-memory data management systems, with particular focus on crafting for non-uniformity in memory access latencies * Building efficient distributed data processing at scale through the use of modern network and storage technologies",
    "learning_outcomes": "Upon successful completion of this module, students are able to: CIT3230004: Data Processing on Modern Hardware | Data Processing on Modern Hardware * implement data processing engines that run faster on modern machines using a variety of techniques:\n- optimize data structures and algorithms for the memory hierarchy\n- effectively adjust the program structure of the execution engine and the data pipelines to better\nexploit modern hardware features (AVX, SGX,\n- apply custom-parallelization techniques to most common data-processing algorithms\n- efficiently synchronize data structures\n* learn how to best leverage new hardware technologies in the context of (distributed) data processing engines:\n- accelerators (e.g., FPGAs, smart NICs, etc.)\n- low-latency high-bandwidth networks\n- modern storage and memory (non-volatile, memory extensions, far memory, CXL)\n* reason about software abstractions and programming models for modern hardware, especially in the context of data-intensive applications. * apply the knowledge in real data management systems:\n- understand what happens in the background\n- do performance analysis and debugging of hot spots and bottlenecks\n- optimize algorithms and data structures to run well both in isolation and alongside other programs\n(e.g., multi-tenancy).",
    "teaching_methods": "Lectures, tutorials, problems for individual study: The module consists of lectures and accompanying tutorials. Solutions to exercises will be discussed in the tutorials. The students will have an opportunity to apply the knowledge acquired in a group/or individual project at the end of the course.",
    "media": "Lecture with animated slides",
    "literature": "„Computer Architecture: A Quantitative Approach” (6th edition) by Hennessy and Patterson.\n“Computer Systems: A Programmer’s Perspective” (3rd edition) by Bryant and O’Hallaron\n“Software Optimization Resources” by Agner Fog\n“What Every Programmer Should Know About Memory” by Ulrich Drepper",
    "lv_sws_lecturer": "Kemper, Alfons; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nData Processing on Modern Hardware (CIT3230004) (Vorlesung, 4 SWS)\nCIT3230004: Data Processing on Modern Hardware | Data Processing on Modern Hardware\nGeorgoulakis Misegiannis M, Giceva Makreshanska J, Gruber F"
  },
  {
    "module_id": "CIT4210000",
    "title": "Advanced Games-Specific Practical Course (Games Lab)",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester/Sommersemester",
    "credits": 10,
    "hours_total": 300,
    "hours_self_study": 285,
    "hours_presence": 15,
    "examination_achievements": "o Official form of assessment: project work and final presentation with slides and live-demo. o Each student submits his/her individual project work results within his/her group’s submissions:\n• Game design and ethical assessment documentation (5 pages).\n• Physical game prototype (consisting of several conceptually connected physical objects typically\nmade out of paper or cardboard (e.g. drawings, cards, figures)\n• Game implementation: code and related artifacts.\n• Final Presentation materials (presentation and poster).\no Students are graded individually on the basis of the submitted contributions according to the following criteria and metrics:\n• Game design documentation: completeness and quality of reasoning: 15%\n• Physical game prototype: criteria described in described in chapter 7 of the book by Tracy\nFullerton (see reading list): 15%\n• Game implementation: code and related artifacts: extension: quality of software engineering, use\nof games-related criteria laid out in chapters 9, 10, 11 of the book by Tracy Fullerton (see reading list): 60%\n• Final Presentation and corresponding materials: scientific depth and quality, comprehensibility:\n10% o The exam form “graded project work” was chosen in relation to the intended learning outcomes as follows:\n• practical application of previously learned techniques and graded individual submissions of the\nwork results ensures that students have the required skills\n• practically working together as a team in designing, implementing and evaluating a game\nmotivates and makes it necessary to successfully use these techniques.\n• submission of the results of game design and implementation makes it necessary to successfully\nchoose and apply technological and conceptual building blocks from third parties CIT4210000: Advanced Games-Specific Practical Course (Games Lab) | Advanced Games-Specific Practical Course (Games Lab)\n• in the meetings with their advisers, students are advised to incorporate games-related module\ncontent from their lines of specialization Submitting the respective work results ensures a minimum individual proficiency with the respective module contents.\n• By devising, discussing, and submitting the required game design and ethical assessment\ndocument, students show that they are able to identify, analyze, and evaluate positive and negative ethical implications of their game and are able to address these implications in terms of adaptations of the game design.",
    "repetition": "",
    "recommended_prerequisites": "Bachelor Informatics: Games Engineering, especially\n• IN0038: Realtime Computer Graphics\n• IN0039: Realtime Computer Graphics Lab Course\n• IN0006: Introduction to Software Engineering\n• IN0037: Game Physics",
    "content": "• Designing a game in a team\n• Prototyping a game in a team\n• Implementing a game in a team\n• Playtesting and evaluation of a game\n• Ethics of Games",
    "learning_outcomes": "Upon successful completion of this module, students are able to:\n• apply and combine techniques and models of real-time computer graphics, game physics, and\nsoftware engineering in teams for implementation and testing of a game as a team effort\n• understand and apply specific techniques and models of game design and game testing that go\nbeyond general software engineering principles\n• analyze, compare, evaluate and apply existing technological building blocks (e.g. game\nengines, specialized software for game physics, client-server architectures and corresponding implementations, HCI hardware) for game development\n• analyze, evaluate, and apply techniques, algorithms, and models from games-related modules\nin their lines of specialization (e.g. VR- or AR-techniques from “Interaction and Communication”, business analytics and mechanism design techniques from “Game Theory and Algorithmic Economics”, deep-learning-based computer vision techniques from “Visual Computing” or advanced deep learning for game physics techniques from “Computer Graphics and Animation”)\n• analyze, and evaluate ethical aspects of their game designs and game mechanics.",
    "teaching_methods": "Teaching Method:\n• Students organize into groups of three or four students.\nCIT4210000: Advanced Games-Specific Practical Course (Games Lab) | Advanced Games-Specific Practical Course (Games Lab)\n• Students have 6 mandatory two hour meetings with their lecturers:\no meeting 1: course organization, lecture in game ethics. o meeting 2: student groups present and discuss their game design and its ethical implications and present their physical prototype o meeting 3: students present and discuss their physical game prototypes o meeting 4: students report and discuss the intermediate state of their implementations o meeting 5: students present and discuss their final game prototype and report and discuss their playtesting results o meeting 6: final presentation of the games at the school’s demo-day o if necessary, 3 hours of individual advice for student groups Advised learning method:\n• Students hold regular team meetings according to the process- and product-models introduced\nin meeting 1 and IN0006. In the meetings, students organize their to-do-lists, present intermediate results, and evaluate, which technologies and games-related module content to include in their design implementations.\n• Each student studies the recommended literature, as well as documentation and use-cases of\npossible technologies, as well as games-related module content\n• Each student works out his/her contributions to design, implementation, and testing of the game\naccording to the work in the team meetings and team communication. Course criteria and registration:\n• The course is open to all students of Master Informatics: Games Engineering.\n• No restrictions to registration apply. The student-groups approach the lecturer they want to work\nwith and are formally registered by the lecturer to an instance of the module.",
    "media": "Lecture content in the mandatory meetings is presented with Powerpoint slides.\nStudents have full access to all media via the Moodle page of the module, with e.g.\n• Discussion board\n• Links to all background reading materials",
    "literature": "Tracy Fullerton: Game Design Workshop: A Playcentric Approach to Creating Innovative Games,\nFourth Edition, CRC Press, 2018",
    "lv_sws_lecturer": "Westermann, Rüdiger; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "CIT4210001",
    "title": "Additional Advanced Games-Specific Practical Course (Additional Games Lab)",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester/Sommersemester",
    "credits": 10,
    "hours_total": 300,
    "hours_self_study": 285,
    "hours_presence": 15,
    "examination_achievements": "o Official form of assessment: project work and final presentation with slides and live-demo. o Each student submits his/her individual work results within his/her group’s submissions, i.e.: 1. Game design documentation (5 pages). 2. Game implementation: code and related artifacts. 3. Final Presentation materials (presentation and poster). o Students are graded individually on the basis of the submitted contributions according to the following criteria and metrics:\n• Game design documentation: completeness (in terms of above description) and quality of\nreasoning: 15%\n• Game implementation: code and related artifacts: extension: quality of software engineering, use\nof “new twist” (25 of the 70%) and games-related criteria laid out in chapters 9, 10, 11 of the book by Tracy Fullerton (see reading list): 75%\n• Final Presentation and corresponding materials: scientific depth and quality, comprehensibility:\n10% o The exam form “graded project work” was chosen in relation to the intended learning outcomes as follows:\n- practical application of previously learned techniques and graded individual submissions of the\nwork results ensures that students have the required skills\n- submission of the results of game design and implementation makes it necessary to successfully\nchoose and apply technological and conceptual building blocks from third parties (e.g. software APIs).\n- in the meetings with their advisers teaching the respective line of specialization students are\nadvised to incorporate games related module content from their lines of specialization into their game design and implementation. CIT4210001: Additional Advanced Games-Specific Practical Course (Additional Games Lab) | Additional Advanced Games-Specific Practical Course (Additional Games Lab)",
    "repetition": "",
    "recommended_prerequisites": "• CIT4210000 Advanced Games-Specific Practical Course (Games Lab)\nBachelor Informatics: Games Engineering, especially\no IN0038: Realtime Computer Graphics\no IN0039: Realtime Computer Graphics Lab Course\no IN0006: Introduction to Software Engineering\no IN0037: Game Physics",
    "content": "• Designing an advanced game in a team\n• Implementing an advanced game in a team\n• Playtesting an advanced game",
    "learning_outcomes": "Upon successful completion of this module, students are able to:\n• apply and combine techniques and models of real-time computer graphics, game physics, and\nsoftware engineering in teams for implementation and testing of an advanced game as a team effort\n• analyze, compare, evaluate and apply existing technological building blocks (e.g. game\nengines, specialized software for game physics, client-server architectures and corresponding implementations, HCI hardware) for advanced game development\n• analyze, evaluate, and apply techniques, algorithms, and models from games-related modules in\ntheir lines of specialization",
    "teaching_methods": "Teaching Method:\n• Students organize into groups of three or four students.\n• Students may continue the development of their game from the lab course “Games Master Lab”\n• Students have 6 mandatory two hour meetings with their lecturers:\no meeting 1: course organization o meeting 2: student groups present and discuss their advanced game design. A special emphasis is placed on choosing and integrating one or more approaches covered in games-related modules in their lines of specialization. o meeting 3 and 4: students report and discuss the intermediate state of their implementations and are advised in terms of integrating one or more approaches covered in games-related modules in their lines of specialization o meeting 5: students present and discuss their final game prototype and report and discuss their playtesting results o meeting 6: final presentation of the games at the school’s demo-day o if necessary, 3 hours of individual advice for student groups Advised learning method: CIT4210001: Additional Advanced Games-Specific Practical Course (Additional Games Lab) | Additional Advanced Games-Specific Practical Course (Additional Games Lab)\n• Students hold regular team meetings according to the process- and product-models introduced\nin meeting 1 and IN0006. In the meetings, students organize their to-do-lists, present intermediate results, and evaluate, which technologies and games-related module content to include in their design implementations.\n• Each student studies the recommended literature, as well as documentation and use-cases of\npossible technologies, as well as games-related module content\n• Each student works out his/her contributions to design, implementation, and testing of the game\naccording to the work in the team meetings and team communication. Course criteria and registration:\n• The course is open to all students of Master Informatics: Games Engineering.\n• No restrictions to registration apply. The student-groups approach the lecturer they want to work\nwith and are formally registered by the lecturer to an instance of the module.",
    "media": "Lecture content in the mandatory meetings is presented with Powerpoint slides.\nStudents have full access to all media via the Moodle page of the module, with e.g.\n• Discussion board\n• Links to all background reading materials",
    "literature": "Tracy Fullerton: Game Design Workshop: A Playcentric Approach to Creating Innovative Games,\nFourth Edition, CRC Press, 2018",
    "lv_sws_lecturer": "Westermann, Rüdiger; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "CIT4230000",
    "title": "Strategic IT Management",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 4,
    "hours_total": 120,
    "hours_self_study": 75,
    "hours_presence": 45,
    "examination_achievements": "The examination will be in the form of a written exam (90 minutes) in which the students' ability to describe, evaluate and apply models, methods, key figures, visualizations and tools of strategic IT management to given problems in a context-dependent manner will be tested. Successful participation in a voluntary case study or a workshop throughout the exercise can be included as a bonus in the assessment of the exam. The exact regulations for this will be announced in time at the beginning of the module.",
    "repetition": "",
    "recommended_prerequisites": "Bachelor in Informatics or Information Systems, specifically:\n- Fundamentals of Business Information Systems\n- Databases\n- Software Engineering\n- Business Process Management",
    "content": "1. IT Strategy and IT Management Frameworks 2. IT Governance and IT Organisation 3. Enterprise Architecture Management 3.1 Schools of EAM 3.2 Foundations of EAM 3.3 Capability Based Planning 3.4 Agile EAM and EAM Patterns 4. Large-scale Agile Software Development 4.1 Foundations and Frameworks of LSAD CIT4230000: Strategic IT Management | Strategic IT Management 4.2 Selected Topics of LSAD 5. Case Studies",
    "learning_outcomes": "After participating in the module, students will be able to understand the key challenges, concepts, methods and decision areas of strategic IT management and their interactions. Furthermore, students will understand the relationship between strategic IT management, enterprise architecture management, scaled agile software development and IT governance. Moreover, after participating in the module, students have in-depth knowledge of patterns and frameworks of enterprise architecture management and scaled agile software development in the areas of models, methods, metrics and visualizations, among others.",
    "teaching_methods": "With the help of a slide presentation, the lecture introduces the fundamental concepts of strategic IT management. Furthermore, the understanding of the basic concepts of strategic IT management is deepened in the lectures with the help of appropriate tasks and examples. Through exercises during the lecture and the work on a separate case study, special modeling techniques from enterprise architecture management and from scaled agile software development are explained and practiced. In addition, self-study assignments are provided.",
    "media": "Slide presentation, teamwork",
    "literature": "Hanschke, I. (2013). Strategisches Management der IT-Landschaft: Ein praktischer Leitfaden fu#r\ndas Enterprise Architecture Management. Carl Hanser Verlag GmbH Co KG.\nKaplan, J. D. (2005). Strategic IT portfolio management: governing enterprise transformation.\nPRTM.\nBuckl, S., Ernst, A. M., Matthes, F., Ramacher, R., & Schweda, C. M. (2009, September). Using\nenterprise architecture management patterns to complement TOGAF. In 2009 IEEE International\nEnterprise Distributed Object Computing Conference (pp. 34-41). IEEE.\nBuckl, S., Ernst, J., Lankes, A. M., Matthes (2008).\nEnterprise architecture management pattern catalog (version 1.0, february 2008)\nSandkuhl, K., Fill, H. G., Hoppenbrouwers, S., Krogstie, J., Matthes, F., Opdahl, A., ... & Winter, R.\n(2018). From expert discipline to common practice: a vision and research agenda for extending the\nreach of enterprise modeling. Business & Information Systems Engineering, 60(1), 69-80. Chicago\nUludag, O#., Kleehaus, M., Caprano, C., & Matthes, F. (2018, October). Identifying and structuring\nchallenges in large-scale agile development based on a structured literature review. In 2018 IEEE\n22nd International Enterprise Distributed Object Computing Conference (EDOC) (pp. 191-197).\nIEEE.\nCIT4230000: Strategic IT Management | Strategic IT Management\nDikert, K., Paasivaara, M., & Lassenius, C. (2016). Challenges and success factors for large-\nscale agile transformations: A systematic literature review. Journal of Systems and Software, 119,\n87-108.\nPaasivaara, M., Behm, B., Lassenius, C., & Hallikainen, M. (2018). Large-scale agile\ntransformation at Ericsson: a case study. Empirical Software Engineering, 23(5), 2550-2596.\nChicago",
    "lv_sws_lecturer": "Matthes, Florian; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nStrategisches IT-Management (CIT4230000) (Vorlesung, 3 SWS)\nMatthes F [L], Matthes F, Tobisch F, Kuhn P"
  },
  {
    "module_id": "CIT4230001",
    "title": "Computational Modeling for System Genetics",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 120,
    "hours_presence": 60,
    "examination_achievements": "The students are individually evaluated on a project work, by the project supervisors, according to their performance:\n- During the project work (motivation, problem solving capacity, data analysis skills, programming\ncapabilities).\n- At the final presentation (clearness of presentation and slides, used methods, achieved results).\n10 minutes.\n- In the written report (conciseness, language, used methods). 20 pages maximum.\nThe final mark will be given by the supervisors who attend the final lectures.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Bachelor in mathematics, bioinformatics, computer science,\nphysics, statistics or a related field. Students from medicine with background in statistics and some\nbasic programming experience could also join. One basic lecture in statistics (e.g. IN0018, IN2339)\nor in machine learning (e.g IN2064; MA4802). Strong interest in biological and medical research\nquestions.",
    "content": "This is a two-part module: (1) Seven lectures introduce basics of systems genetics, and statistical models employed. The six lectures are supported with exercise sessions in R or python. This is followed by (2) an eight-week hands-on project. The lectures are organized around the following topics: CIT4230001: Computational Modeling for System Genetics | Computational Modeling for System Genetics\n- Introduction to human genetics and genome-wide association studies (GWAS)\n- Populations structure\n- Polygenic risk score\n- Gene-mapping and variant fine-mapping\n- Gene expression QTLs (eQTLs)\n- Causal inference with omics data (metabolomics, transcriptomics, etc.)\n- Omics approaches for rare diseases\nOver these lectures, computational methods are introduced including:\n- Linear regression and hypothesis testing\n- Linear mixed models\n- Regularized linear models\n- Multiple testing correction\n- Graphical Gaussian models\n- Denoising autoencoders",
    "learning_outcomes": "At the end of the module, students understand / are able to practically implement:\n- the challenges of complex trait genetics\n- statistical models for QTL mapping and GWAS\n- methods for adjustment for multiple testing\n- regularized linear models and its applications in genetics\n- linear mixed models to deal with population structure\n- experimental techniques to measure gene expression\n- efficient algorithms for expression QTL analysis\n- statistical concepts for causal inference such as Mendelian randomization\n- network inference methods such as Graphical Gaussian models and application to omics data\n(metabolome, transcriptome)\n- apply some of the above-mentioned techniques on an actual problem from systems genetics.\nEvaluate model performance, calibration and provide biological interpretation of its application to real data.",
    "teaching_methods": "We design this module as a two-part module: (1) Seven lectures introduce the students to the most relevant topics and methods for systems genetics. This is followed by (2) an eight-week project work where students focus on specific systems genetics topics in one partner research lab to get hands-on experience. Lectures provide the state-of-the-art of systems genetics modeling approaches. These concepts are first applied with in-class exercise sessions following each lecture. During the project work, these concepts are applied on real problems under mentoring of the teaching team. The results of the project work are summarized in a final talk and a written report.",
    "media": "Weekly posted exercises online, slides, script, live demo\nCIT4230001: Computational Modeling for System Genetics | Computational Modeling for System Genetics",
    "literature": "Civelek, M., & Lusis, A. J. (2014). Systems genetics approaches to understand complex traits.\nNature Reviews Genetics, 15(1), 34–48. http://doi.org/10.1038/nrg3575\nGenome-Wide Association Studies, Krishnarao Appasani, Cambridge University Press",
    "lv_sws_lecturer": "Gagneur, Julien; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nComputational Modeling for System Genetics (CIT4230001) (Vorlesung, 2 SWS)\nGagneur J, Heinig M\nExercise Computational Modeling for System Genetics (CIT4230001) (Übung, 2 SWS)\nGagneur J, Heinig M"
  },
  {
    "module_id": "CIT4230002",
    "title": "Advanced Natural Language Processing",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Written exam (physical) (120 min). The exam will test die learning goals in the following way:\n• understand state of the art deep learning methods presented in scientific publications and are\nable to explain what motivates and justifies these approaches compared to previous state of the art: o exam questions will present factual details of architectures (in order to prevent the students from having to remember them by heart) and ask questions that check whether the students understood the reasons for these architectural details and their consequences.\n• apply and combine the building blocks of the presented approaches to /into solutions of problems\nin other fields of modern NLP that were not explicitly discussed in one of the topical blocks. o Exam questions will check this learning goal by presenting the student with a problem that requires application and combination of architectural building blocks and asking about possible solutions to the problem involving application and combination.\n• on the basis of discussed approaches, able to develop and implement their own deep learning\narchitectures or architecture variants for NLP research (e.g. thesis topics) and NLP applications (in a professional environment). o The learning goal is mainly supported through the practical homework exercises. The written exam will test this learning goal by asking for principal ideas for variations of a given architecture in view of tackling an additional requirement given in the question.\n• analyze, compare and evaluate own and foreign deep architectures for specific NLP problems\nand applications. Especially, in terms of analysis, students are able to identify elements that are true SOTA advancements (compared to mere “fine-tuning” successes) which have the potential to exceed the scope of nice applications. Here, evaluation is not restricted to algorithmic measures of performance but encompasses evaluating pragmatic choices in view of human NLP applications (ethics, explainability etc.) CIT4230002: Advanced Natural Language Processing | Advanced Natural Language Processing o The exam will test these learning goals by presenting the students with a practical human-centric NLP problem from Social Computing and with two candidate architectures for the solution. In terms of given criteria the students are asked to compare the two approaches in view of the problem. The exam form “written exam” is chosen for the module because for the expected number of students (about 150-200), an oral exam (which would be also an alternative, given the learning goals and the intended checks described above) is not practically possible. Student submissions in the form of implemented and evaluated architectural solution to practical problems (project work) would in principle be another way to test certain aspects of the learning outcomes. However, project work is better suited for lab-courses (we offer three such lab courses), because the proportion of theoretical content in the proposed module is higher than for the lab courses. Furthermore, it is hard to ensure compliance to exam regulations for homework-style contributions. With the current other teaching responsibilities in the team, creating a large number of such projects and proper grading of a large number of student submissions is not possible.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "• IN2346: Introduction to Deep Learning (necessary)\n• IN2361: Natural Language Processing (recommended)",
    "content": "This module covers selected advanced topics in modern NLP: Block 1: Modern Transformer-based architectures & XAI for NLP\n• Evolution of modern Transformer-based architectures (BERT, GPT-n etc.)\n• Correlation between model size, training data, training mode, and performance.\n• Zero-shot, few-shot learning, fine-tuning.\n• Pre-training, meta-learning, in-context learning, verbalization.\n• Adapters.\n• XAI methods for NLP\nBlock 2: NMT for low resource languages\n• Seq2Seq evaluation and metrics\n• Synthetic data generation\n• Integration of monolingual LMs into NMT systems\n• Transfer-learning between languages\n• Multilingual model trade-offs\nBlock 3: Argument Mining and Ethical Aspects of modern NLP\n• Argument Mining\n• Bias in Data, Debiasing efforts and their problems\n• Toxicity and Hate Speech Detection\n• Fairness in NLP system outcomes\nBlock 4: Conversational AI and the link to symbolic AI\n• Open-domain chatbots and task-oriented dialogue systems\nCIT4230002: Advanced Natural Language Processing | Advanced Natural Language Processing\n• end-to-end dialogue system\n• Pipeline-elements for dialogue systems\nBlock 5: Quantum NLP\n• Basic approaches to Quantum Natural Language Processing\n• The potential of multi-purpose expression\nBlock 6: Auto-Summarization\n• Abstractive, extractive, contrastive, temporal summarization concepts\n• Summarization metrics, comparison, and deficiencies\n• Extractive Summarization algorithm deep-dive.\n• Abstractive summarization approaches (classical, neural, hybrid, contrastive learning)\nBlock 7: (Open Block): AI models combining natural language and images",
    "learning_outcomes": "Upon successful completion of this module, students are able to:\n• understand state of the art deep learning methods presented in scientific publications and are\nable to explain what motivates and justifies these approaches compared to previous state of the art.\n• apply and combine the building blocks of the presented approaches to /into solutions of problems\nin other fields of modern NLP that were not explicitly discussed in one of the topical blocks.\n• on the basis of discussed approaches, able to develop and implement their own deep learning\narchitectures or architecture variants for NLP research (e.g. thesis topics) and NLP applications (in a professional environment).\n• analyze, compare and evaluate own and foreign deep architectures for specific NLP problems\nand applications. Especially, in terms of analysis, students are able to identify elements that are true SOTA advancements (compared to mere “fine-tuning” successes) which have the potential to exceed the scope of nice applications. Here, evaluation is not restricted to algorithmic measures of performance but encompasses evaluating pragmatic choices in view of human NLP applications (ethics, explainability etc.)",
    "teaching_methods": "Teaching Method: The module is organized in topical blocks of two weeks. In each block, a certain advanced NLP topic is introduced in 3 lectures (slides and presentation in lecture hall (all of which will be recorded and made available for students in the module materials)). The lecture format will stimulate short interactive discussions based on student questions. Each block has a defined set of background reading comprised of research papers and recent conference tutorials and exercises. Each block will also have 1 central exercise session where the lecturer will interactively work on an IPython sheet in class that the students have access to prior to the session and which they are supposed to be able to refer to on their laptops in class. The sheet has mostly prepared code working on data-sets that lecturer and students are able to experiment with and amend in class. The sheet will also have homework assignments for the students (motivation: a significant portion of the exam will test the learning outcomes that are associated with the exercises). Advised learning method: CIT4230002: Advanced Natural Language Processing | Advanced Natural Language Processing Students attend the live sessions and read the background reading + do the homework assignments at home. Course criteria and registration: The course is open to all students of CIT and from other schools and LMU students. Registration mode is “automatische Fixplatzvergabe” (no limits) Online information: The course will have an accompanying Moodle page with\n• Discussion board\n• Links to session recordings\n• Links to all background reading materials\n• IPython sheets of exercises\n• Exam information",
    "media": "• 3 hours of lecture are presented with Powerpoint slides. (3 x 90 min in two weeks)\n• 1 hour exercise: the lecturer presents an IPython sheet with prepared code. Students and\nLecturer collaboratively experiment with the code in class.\n• Students have full access to all media via the Moodle page of the module (see section “Online\nInformation”)",
    "literature": "Block 1:\n• Singh et al: ACL 2022 Tutorial: Zero- and Few-Shot NLP with Pretrained Language Models,\nhttps://github.com/allenai/acl2022-zerofewshot-tutorial (URL, Oct 2022)\n• Brown at al: Language Models are Few-Shot Learners. Proc NeurIPS 2020\n• Lakkaraju et al: NeurIPS Tutorial on Explainable AI 2020, https://www.youtube.com/watch?\nv=EbpU4p_0hes (URL, Oct 2022)\nBlock 2:\n• Chauhan, S., Daniel, P. A Comprehensive Survey on Various Fully Automatic Machine\nTranslation Evaluation Metrics. Neural Process Lett (2022)\n• Belouadi, Egger: USCORE: An Effective Approach to Fully Unsupervised Evaluation Metrics for\nMachine Translation (2022), arXiv:2202.10062v2\n• Haddow et al.: Survey of Low-Resource Machine Translation (2022), arXiv:2109.00486v3\nBlock 3:\n• Singh et al: ACL 2022 Tutorial: Zero- and Few-Shot NLP with Pretrained Language Models,\nhttps://github.com/allenai/acl2022-zerofewshot-tutorial (URL, Oct 2022)\nBlock 4:\n• Zhang et al: Recent advances and challenges in task-oriented dialog systems, 2020, Science\nChina Technological Sciences, 63(10), 2011-2027.\n• Zhang et al: DIALOGPT : Large-Scale Generative Pre-training for Conversational Response\nGeneration. 2020, Proc ACL 2020\nBlock 5:\nCIT4230002: Advanced Natural Language Processing | Advanced Natural Language Processing\n• Di Sipio et al: The dawn of quantum natural language processing. In ICASSP 2022-2022 IEEE\nInternational Conference on Acoustics, Speech and Signal Processing (ICASSP) (pp. 8612-8616).\nIEEE.\n• Kartsaklis et al: (2021). lambeq: An efficient high-level python library for quantum NLP. arXiv\npreprint arXiv:2110.04236.\n• Guarasci, et al (2022): Quantum Natural Language Processing: Challenges and Opportunities.\nApplied Sciences, 12(11), 5651.\nBlock 6:\n• Lewis et al: (2019). Bart: Denoising sequence-to-sequence pre-training for natural language\ngeneration, translation, and comprehension. arXiv preprint arXiv:1910.13461.\n• Zhang et al (2020): Pegasus: Pre-training with extracted gap-sentences for abstractive\nsummarization. In International Conference on Machine Learning (pp. 11328-11339). PMLR.\nBlock 7:\n• Ramesh at al (2022): Hierarchical Text-Conditional Image Generation with CLIP Latents.\narXiv:2204.06125",
    "lv_sws_lecturer": "Groh, Georg; Prof. Dr. rer. nat. habil.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nAdvanced Natural Language Processing (CIT4230002) (Vorlesung mit integrierten Übungen, 4\nSWS)\nGroh G [L], Groh G"
  },
  {
    "module_id": "CIT4230003",
    "title": "Advanced Machine Learning: Deep Generative Models",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 3,
    "hours_total": 90,
    "hours_self_study": 60,
    "hours_presence": 30,
    "examination_achievements": "The academic assessment will be done by a written exam of 60 minutes. Assignments will check the knowledge to verify the familiarity with advanced machine learning models, specifically deep generative models. Answering the assignments will require free text formulations as well as choosing among provided alternatives. Short programming tasks with pseudo-code check the students' ability to implement and critically evaluate these algorithms and methods. Small scenarios comparing and evaluating the learned alternatives need to be set-up and investigated.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Machine Learning, IN2064",
    "content": "The module covers advanced machine learning principles, specifically discussing the field of deep generative models. The topics include: 1. Normalizing Flows\n• Forward and Reverse Parametrization\n• Jacobian Determinant Computation\n2. Variational Inference\n• Latent variable models\n• ELBO\n3. Variational Autoencoders\n• Encoder-Decoder\n• Amortized Inference\nCIT4230003: Advanced Machine Learning: Deep Generative Models | Advanced Machine Learning: Deep Generative Models 4. Generative Adversarial Networks (GANs)\n• Likelihood-free inference\n5. Generative Diffusion Models\n• Score function matching\n• Forward (diffusion) and reverse (denoising) algorithms",
    "learning_outcomes": "Upon successful completion of this module, students will be able to understand the theoretical foundations of advanced machine learning principles. They will be able to identify the core building blocks of generative models such as normalizing flows, GANs, or diffusion models. Moreover, they will be able to apply and implement these learning algorithms in modern programming languages. Furthermore, the students will be able to evaluate and compare the learned methods regarding their qualitative properties.",
    "teaching_methods": "Lecture with presentation slides to discuss the theoretical concepts; interactive tutorials and demonstrations to practice concepts and showcase properties; assignments for individual study including programming exercises",
    "media": "Slides, exercise sheets, white board, programming tasks",
    "literature": "• George Papamakarios, Eric Nalisnick, Danilo Jimenez Rezende, Shakir Mohamed, Balaji\nLakshminarayanan. \"Normalizing Flows for Probabilistic Modeling and Inference\"\n• Christopher Bishop. “Pattern Recognition and Machine Learning” (Section 9.4)\n• Shakir Mohamed, Lakshminarayanan Balaji. “Learning in Implicit Generative Models”\n• Jonathan Ho, Ajay Jain, Pieter Abbeel. \"Denoising Diffusion Probabilistic Models\"\n• Jonathan Ho, Ajay Jain, Pieter Abbeel. \"Denoising Diffusion Probabilistic Models\"",
    "lv_sws_lecturer": "Günnemann, Stephan; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nAdvanced Machine Learning: Deep Generative Models (CIT4230003) (Vorlesung mit integrierten\nÜbungen, 2 SWS)\nGao N, Gosch L, Günnemann S, Kollovieh M, Kosmala A, Lüdke D, Scholten Y, Wollschläger T"
  },
  {
    "module_id": "CIT4230004",
    "title": "Statistical Foundations of Learning",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 8,
    "hours_total": 240,
    "hours_self_study": 150,
    "hours_presence": 90,
    "examination_achievements": "There is a final examination, which is either 120-min written exam or 25-min oral exam, depending on the number of exam registrations (to be announced during lecture period). The exam includes the following:\n- Direct questions that evaluate the students’ abilities to recall key concepts/techniques from the\nlectures (ILO 1,2)\n- Questions that ask the students to derive theory in slightly modified settings. These evaluate\nstudents’ abilities to apply the results discussed in lectures/tutorials and prove modified results (ILO 3)\n- Questions that ask the students to interpret the consequences of a modified result (ILO 4)\nIn addition, there are bi-weekly graded assignments that can be submitted individually or in pairs. The assignments are optional, but a 70% or higher score in the assignments would lead to a 0,3- bonus grade (if final exam grade is between 1,3 and 4,0)",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Machine learning (IN2064 or equivalent); Discrete probability theory (IN0018); Analysis for\ninformatics (MA0902)\nSome background in statistics (MA2402 or equivalent) could be helpful.",
    "content": "This course introduces the students to a statistical perspective of machine learning, and provides mathematical tools to analyze the performance of machine learning algorithms. CIT4230004: Statistical Foundations of Learning | Statistical Foundations of Learning The first part of the course introduces concepts on statistical learning theory and other foundational results for machine learning. In particular, the following topics is covered:\n- Risk minimization, Bayes risk, Empirical risk (8 AE, 1 AE = 45 mins)\n- Statistical consistency and universal consistency (4 AE)\n- Vapnik-Chervonenkis (VC) theory of generalization (8 AE)\n- PAC learning and No free lunch theorem (6 AE)\n- Algorithmic stability (4 AE)\n- Universal approximation theorem (2 AE)\n- Boosting (4 AE)\n- Above techniques will be used to study generalization of Nearest Neighbor rule, Support Vector\nMachine and Neural Networks (6 AE) The second part of the course introduces some advanced and recent topics on the theory of learning:\n- Approximation bounds for clustering (6 AE)\n- Theory of over-parametrized models (4 AE)\n- Training dynamics of neural networks, including neural tangent kernel (6 AE)\nA concluding lecture (2 AE) will present some current challenges and recent works in the statistical foundations of learning.",
    "learning_outcomes": "At the end of the module, the students are able to: ILO-1. mathematically analyze algorithms for data classification and clustering ILO-2. remember techniques from statistics (limit theorems, concentration inequalities), which can be used in data analysis ILO-3. apply statistical tools to improve performance of algorithms ILO-4. judge the limitations of machine learning problem formulations, and statistical theories",
    "teaching_methods": "The lecture is taught using slides and occasional board work, where:\n- Key theoretical frameworks and results are presented, along with significance (ILO 1)\n- Concepts and tools from statistics are introduced (ILO 2) and used to prove the theoretical results\n(ILO 3)\n- Results are presented that show the limitations of learning problems (ILO 4)\nThere are weekly tutorials and bi-weekly assignments in which:\n- Sample problems are provided and discussed in tutorials, which provide examples of how the\ntheory can be used or new theoretical results can be derived (ILO 1,2,3)\n- In graded assignments, students need to individually/in pairs solve questions related to using/\nextending the theory for new settings (ILO 1,3) and judge the limitations (ILO 4) CIT4230004: Statistical Foundations of Learning | Statistical Foundations of Learning",
    "media": "The lectures are taught using slides, with occasional board work. The exercise sessions are taught\nusing board work. The lectures (and exercise sessions, when possible) are live-streamed via TUM\nLive.\nIn addition, Moodle will be actively used for asynchronous discussions, collaboratively solving\nsample problems, learning materials etc.",
    "literature": "The first part of the course will mainly follow parts of the textbooks:\n- Shai Shalev-Shwartz, and Shai Ben-David. Understanding machine learning: From theory to\nalgorithms. Cambridge University Press, 2014.\n- Luc Devroye, László Györfi, and Gábor Lugosi. A probabilistic theory of pattern recognition.\nSpringer Science & Business Media, 2013.\nThe second part will be based on recent papers, such as:\n- David Arthur, and Sergei Vassilvitskii. \"k-means++ the advantages of careful seeding.\"\nProceedings of the eighteenth annual ACM-SIAM symposium on Discrete algorithms. 2007.\n- Vincent Cohen-Addad, Varun Kanade, Frederik Mallmann-Trenn, and Claire Mathieu.\n\"Hierarchical clustering: Objective functions and algorithms.\" Journal of the ACM (JACM) 66\n(4):1-42, 2019.\n- Peter L. Bartlett, Andrea Montanari, and Alexander Rakhlin. \"Deep learning: a statistical\nviewpoint.\" Acta numerica 30:87-201, 2021.\n- Trevor Hastie, Andrea Montanari, Saharon Rosset, and Ryan J. Tibshirani. \"Surprises in high-\ndimensional ridgeless least squares interpolation.\" The Annals of Statistics 50(2):949-986, 2022.\n- Sanjeev Arora, Simon S. Du, Wei Hu, Zhiyuan Li, Russ R. Salakhutdinov, and Ruosong\nWang. \"On exact computation with an infinitely wide neural net.\" Advances in Neural Information\nProcessing Systems 32, 2019.\nAdditional references, if needed, will be provided during the lectures.",
    "lv_sws_lecturer": "Ghoshdastidar, Debarghya; Prof. Dr. Ph.D.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nStatistical Foundations of Learning (CIT4230004) (Vorlesung mit integrierten Übungen, 6 SWS)\nGhoshdastidar D [L], Ghoshdastidar D"
  },
  {
    "module_id": "CIT4230005",
    "title": "Engineering Resilient Cognitive Systems",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 3,
    "hours_total": 90,
    "hours_self_study": 60,
    "hours_presence": 30,
    "examination_achievements": "Schriftliche Prüfung (60 Minuten) oder mündliche Prüfung (30 Minuten) – je nach Teilnehmendenzahl - als am besten geeignete Prüfungsformen für die Prüfung von Vorlesungsstoff.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Helpful, but not necessary:\nIN2309 Advanced Topics of Software Engineering\nIN2081 Patterns in Software Engineering\nIN222 Cognitive Systems\nIN2247 Functional Safety",
    "content": "Most cyber-physical cognitive systems such as automated vehicles have to work in highly dynamic, uncertain contexts. In consequence, it is hardly possible to engineer a safe and reliable system a-priori at design time. At the same time, safety and reliability are inevitable quality attributes. Therefore, cognitive systems must be resilient, i.e. they must be enabled to be aware of their context and their own state and to adapt themselves dynamically at runtime to their context in order to optimize their utility whilst preserving safety. Thus, resilience will play an essential for future cognitive systems. The goal of this module is to understand the basic of concepts of resilient architectures for cyber- physical cognitive systems and to partly apply them to small example problems. Particularly this includes: CIT4230005: Engineering Resilient Cognitive Systems | Engineering Resilient Cognitive Systems 1. Resilience: Terminology, fundamental concepts, conceptual framework 2. Safety Architectures: Introduction to terminology and fundamental concepts of safety and reliability of software-intensive systems; architectural patterns and tactics for safety-critical systems 3. Self-adaptive Systems: Terminology and fundamental concepts, conceptual frameworks, self- adaptive architectures, models at runtime 4. Adaptive Resilience Management: resilience-related context awareness, dynamic risk/utility assessment, adaptation planning 5. Learning methods: training context awareness and resilience tactics for flexible, yet safe adaptations to known and unknown contexts",
    "learning_outcomes": "By the end of the module, the students will be able to describe the basic concepts of resilience for cyber-physical cognitive systems and to discuss the underlying concepts of safety & reliability engineering as well as of self-adaptive software systems. In particular, the students will be able to model resilient architectures by applying dedicated engineering methodologies and using architectural patterns and tactics.",
    "teaching_methods": "Traditional lecture style combined with interactive case-studies. Understanding the fundamental concepts will be taught in a traditional lecture format. Interactive case study development will be used to teach the ability to apply the concepts to small examples.",
    "media": "Slides for the class and as a script",
    "literature": "References to scientific papers provided during the lecture\nIn addition:\n1. Nelly Bencomo, Robert France, Betty H. C. Cheng, Uwe Aßmann, \"Models@run.time\". Springer\nCham, https://doi.org/10.1007/978-3-319-08915-7, ISBN: 978-3-319-08914-0\n2. Len Bass, Software Architecture in Practice, Addison-Wesley (4th Edition), ISBN:\n978-0136886099\n3. Danny Weyns, An Introduction to Self-adaptive Systems: A Contemporary Software Engineering\nPerspective. Wiley-IEEE, ISBN: 978-1119574941",
    "lv_sws_lecturer": "Trapp, Mario; Prof. Dr.-Ing. habil.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nEngineering Resilient Cognitive Systems (CIT4230005) (Vorlesung, 2 SWS)"
  },
  {
    "module_id": "CIT4230006",
    "title": "Causal Inference in Time Series",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "● There will be a 90-minute written examination at the end of the semester. The examination will\nevaluate the critical thinking as well as mathematical understanding of the course material.\n● In addition, there will be bi-weekly assessments in the form of homework/project. They will be\nindividual or in teams (depending on the class strength).\n● By handing in reasonable solutions to at least 60% of the bi-weekly assessments (both in theory\nand programming) one can obtain a bonus of 0.3 in the final exam. Note that neither 1.0 nor 4.3 or worse can be improved.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "In order to be successful in this course, it is recommended that you have a basic knowledge of:\n● Statistics & probability (e.g. IN0018, or IN2332, or MA2409 or MA9712)\n● Machine Learning (e.g. IN2064)\n● Detection and estimation (MA5426 or BGU31007 or EI7006)\n● Some programming experience (e.g. IN0002 Praktikum: Programming Basics)",
    "content": "● Introduction: What is causal inference?\n● Review of useful preliminaries\n○ Random variable, Time series, Spectral analysis ○ Sequential predictors,\n● Causality in Times Series\n○ Granger causality ○ Directed information graphs CIT4230006: Causal Inference in Time Series | Causal Inference in Time Series ○ Efficient algorithms\n● Causal structure learning in time series\n○ Structures with Latent variables\n● Time-Varying networks\n○ change-point detection\n● Concrete Applications\n○ Computational neuroscience ○ Financial markets ○ Social networks",
    "learning_outcomes": "By the end of the course, the student must be able to:\n● Understanding of causal models and causal reasoning in dynamical systems.\n● Identify situations in which a problem can be thought of as a network.\n● Analyze data appropriately using a variety of network analytic techniques.\n● Ability to apply different methods for causal structure learning\n● Propose action based on sound interpretation of network analytics.\nTransversal skills:\n● Continue to work through difficulties to find optimal solutions.\n● Demonstrate the capacity for critical thinking (Causal reasoning)\n● Access and evaluate appropriate sources of information.",
    "teaching_methods": "The teaching will be in the form of lectures and discussions. In the lecture, the theoretical background of the module is presented and explained. In the exercises, students will deal with practical problems that contribute to understanding and deepen the content of the lecture. Students are encouraged to deal independently with the contents of the lecture through the regular provision of exercise sheets. Solutions for the exercises will be discussed in the exercise event.",
    "media": "Lectures will be mostly taught on board with lectures on slides. Lecture notes will be made\navailable to the students",
    "literature": "We will use material selected from different sources, including chapters of the following books:\n● “Causality: Models, Reasoning, and Inference”, J. Pearl\n● “The Book of Why”, J. Pearl, D. Mackenzie\n● “Introduction to Time Series and Forecasting”, P. J. Brockwell, R. A. Davis",
    "lv_sws_lecturer": "Etesami, Seyed Jalal; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nCausal Inference in Time Series (CIT4230006) (Vorlesung, 2 SWS)\nZentralübung zu Causal Inference in Time Series (CIT4230006) (Übung, 2 SWS)\nEtesami S [L], Chao Y, Liu L"
  },
  {
    "module_id": "CIT5230000",
    "title": "Introduction to Programming",
    "level": "Bachelor",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 12,
    "hours_total": 360,
    "hours_self_study": 240,
    "hours_presence": 120,
    "examination_achievements": "2-4 weekly programming tasks will be posed as homework and graded. Participants must solve and hand in these in electronic form. This ensures, that participants can program in the small by means of an object-oriented programming language such as Java, that they have understood fundamental concepts of programming, and are able to apply these to provide original solutions or programs. To identify the individual contributions of the participants, they must be able to defend their solutions interactively. The test takes the form of 120 minutes computer-based test. Questions allow to assess acquaintance with concepts of programming, small programming tasks assess the ability to conceive appropriate algorithmic solutions and realize applications. Homework and test are both equally weighed 50%.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "None",
    "content": "• Introduction\n- Basic notions: Problem – algorithm – program\n- Imperative programming constructs\n• Object-oriented programming\n- Objects, classes, methods\n- Inheritance, abstract classes, and interfaces\nCIT5230000: Introduction to Programming | Introduction to Programming\n- Polymorphism\n- Generics\n• Functional programming\n- Iterators and collections\n- Lambda expressions and streams\n• Data structures\n- Numbers, strings, arrays\n- Lists, stacks, queues, trees\n• Recursion\n- Binary search\n- Patterns of recursion\n• Syntax and semantics\n- Syntax of programming languages: regular expressions and context-free grammars\n- Semantics of programs: control-flow graphs\n• Programming in the large (perspectives)\n• Graphical user interfaces\n• Concurrency and Threads",
    "learning_outcomes": "Upon successful completion of the module, participants understand the essential concepts of computer science on a basic, practical, but scientific level. Participants can solve manageable algorithmic problems and implement basic applications in Java or a similar object-oriented language on their own. They understand the underlying concepts and models and are therefore able to acquire skills in other object-oriented programming languages on their own.",
    "teaching_methods": "By means of a slide presentation with animations, the interactive lecture introduces the basic concepts and methods of programming and explains them using examples. Small exercises, e.g., quizzes and programming tasks, with individual feedback help students to identify whether they have understood the basic concepts and methods. Accompanying tutor groups deepen the understanding of fundamental concepts explained in the lecture by means of suitable group exercises: participants develop small sample applications under guidance to develop their programming skills in an object-oriented programming language. Homework exercises assess whether the students understand the learned concepts. The presentation of the own solution in the accompanying tutor group improves communication skills, which are essential in computer science. Individual feedback on homework allows students to measure learning progress and improve their skills.",
    "media": "Lecture with digital slides, livestream, online exercises (programming, quiz) with individual\nfeedback, communication platform for the exchange between instructors, tutors, and students\nCIT5230000: Introduction to Programming | Introduction to Programming",
    "literature": "Deitel, Harvey / Deitel, Paul: Java How to Program, Early Objects, Pearson, 11th edition, 2017\nEvans, Ben / Flanagan, David: Java in a Nutshell O'Reilly, 7th edition, 2018\nSedgewick, Robert / Wayne, Kevin: Computer science: An interdisciplinary approach, Addison-\nWesley, 2016\nSedgewick, Robert / Wayne, Kevin: Introduction to programming in Java: an interdisciplinary\napproach, Addison-Wesley, 2017",
    "lv_sws_lecturer": "Krusche, Stephan; Prof. Dr. rer. nat. habil.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nIntroduction to Programming, Exercise Session (CIT5230000) (Übung, 2 SWS)\nKrusche S [L], Krusche S, Paulsen M, Bassner P\nIntroduction to Programming (CIT5230000) (Vorlesung mit integrierten Übungen, 8 SWS)\nKrusche S [L], Krusche S, Paulsen M, Bassner P"
  },
  {
    "module_id": "CIT6230000",
    "title": "Lernen durch Lehren: Programmierkurse an Schulen",
    "level": "Bachelor/Master",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester/Sommersemester",
    "credits": 3,
    "hours_total": 90,
    "hours_self_study": 30,
    "hours_presence": 60,
    "examination_achievements": "Selbstreflexion zur Erreichung der Lernziele anhand eines Fragebogens sowie Teilnahme am Gruppenabschluss-Gespra#ch, aktive Teilnahme. Das Module wird benotet.",
    "repetition": "",
    "recommended_prerequisites": "- Grundlegende Programmierkenntnisse (IN0001 und IN0002 oder vergleichbar)\n- Bereitschaft, sich in Technologien (wie z.B. Scratch, HTML, Python, Bash oder Swift) auf\nEinstiegsniveau einzuarbeiten\n- Deutsch Kenntnisse (Mindestens B2)",
    "content": "Dieser Praxis-Kurs findet vollsta#ndig virtuell statt. Teilnehmende inspirieren Schülerinnen und Schüler mit Programmierkursen auf einfachem Niveau. Durch kleine Programme und Spiele vermitteln sie Jugendlichen Einblicke in digitale Themen, sta#rken ihre IT-Kompetenzen und teilen ihre Leidenschaft fu#r ihre Studienwahl. Die Teilnehmenden arbeiten in Teams und betreuen selbstständig Jugendlichen einer Schulklasse. Sie verbessern ihre Kommunikation zu IT-Themen mit Jugendlichen ohne IT-Erfahrung, wenden Pra#sentationstechniken an, u#ben Moderationsfa#higkeiten und trainieren Kreativita#t in neuen Situationen. Die Dozierenden des Kurses bereiten die Teilnehmenden für den Einsatz vor: mit praxiserprobten und didaktisch fundierten Konzepten fu#r Programmierkurse in unterschiedlichen Sprachen und Themen wie z.B. Scratch, HTML, Python, Bash und Swift.",
    "learning_outcomes": "Nach erfolgreichem Abschluss des Moduls können die Teilnehmer: CIT6230000: Lernen durch Lehren: Programmierkurse an Schulen | Learning through Teaching: Programming Courses at Schools\n- Begeisterung für Informatik vermitteln\n- Grundlegende Programmierkenntnisse an Menschen ohne IT-Erfahrung vermitteln\n- Digitale Präsentationstechniken und Online-Moderationsmethoden anwenden\n- Mit Menschen kommunizieren, kollaborieren und auf deren individuelle Bedürfnisse eingehen, die\nnicht mit der IT vertraut sind\n- Jugendlichen Selbstwirksamkeit als Vorbild vorleben\n- Die Bedeutung grundlegender IT-Fähigkeiten, Digitalisierungsfertigkeiten und Medienkompetenz\nvermitteln\n- Die Bedeutung von Kreativita#t und kritisches Denken sowie einer positiven Fehlerkultur\nweitergeben",
    "teaching_methods": "Der Kurs findet ausschließlich online statt. Neben dem Selbststudium erfolgen ein Onboarding und eine Begleitung durch die Dozierenden. Zum Abschluss soll eine kurze Reflexion des Einsatzes verfasst werden.",
    "media": "Vortragsfolien, Onlinekurse",
    "literature": "Wird im Kurs bekannt gegeben",
    "lv_sws_lecturer": "Krusche, Stephan; Prof. Dr. rer. nat. habil.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nÜberfachliche Grundlage: Lernen durch Lehren - Programmierkurse an Schulen (CIT6230000)\n(Praktikum, 2 SWS)\nKrusche S [L], Krusche S, Linhuber M"
  },
  {
    "module_id": "IN0006",
    "title": "Einführung in die Softwaretechnik",
    "level": "Bachelor",
    "language": "Deutsch/Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 105,
    "hours_presence": 75,
    "examination_achievements": "Prüfungsart: Klausur Die Modulprüfung besteht aus einer 90-minütigen Klausur, in der die Studierenden Konzepte und Methoden der verschiedenen Phasen des Software-Engineering erklären und zur Lösung kleiner Probleme anwenden. Des Weiteren wird durch Modellierungsaufgaben die Fähigkeit zur systematischen Analyse und Bewertung fachlicher Anforderungen überprüft.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0002 Praktikum: Grundlagen der Programmierung",
    "content": "Software Engineering ist die Etablierung und systematische Anwendung von Prinzipien, Methoden und Werkzeugen für die arbeitsteilige, ingenieurmäßige Entwicklung und Anwendung von umfangreichen, komplexen Softwaresystemen. Es beschäftigt sich mit der Herstellung und Entwicklung von Software, der Organisation und Modellierung von Datenstrukturen und Objekten, und dem Betrieb von Softwaresystemen. Themen der Vorlesung sind damit unter anderem:\n- Modellierung mit UML\n- Vorgehensmodelle in der Software Entwicklung (linear, iterativ, agil)\n- Anforderungsermittlung und -analyse (funktionales Modell, dynamisches Modell und\nObjektmodell)\n- Systementwurf (Spezifikation, Software Architektur, Architekturmuster und Entwurfsziele)\n- Objektentwurf und Implementierung (Wiederverwendung, Entwurfsmuster und Schnittstellen\nSpezifikation)\n- Testen (Komponententest, Integrationstest und Systemtest)\nIN0006: Einführung in die Softwaretechnik | Introduction to Software Engineering\n- Konfigurationsmanagement, Build Management und Release Management\n- Softwarewartung und Evolution\n- Projektorganisation und Kommunikation",
    "learning_outcomes": "Nach der erfolgreichen Teilnahme an dem Modul kennen die Studierenden die Konzepte und Methoden für die verschiedenen Phasen eines Projekts, z.B. Modellierung des Problems, Wiederverwendung von Klassen und Komponenten, und Auslieferung der Software. Sie sind in der Lage für konkrete Probleme die geeigneten Konzepte und Methoden auszuwählen und anzuwenden. Die Studierenden kennen die wichtigsten Begriffe und Vorgehensweisen der Softwaretechnik und können gegebene Probleme daraufhin analysieren und bewerten. Darüber hinaus haben sie die Fähigkeit konkrete Problemstellungen in der Softwaretechnik, z.B. mit Hilfe von Entwurfsmustern, lösen.",
    "teaching_methods": "Mit Hilfe einer Folienpräsentation mit Animationen stellt die interaktive Vorlesung die Grundbegriffe und Methoden des Software Engineerings vor und erläutert sie an Beispielen. Kleine Übungen, z.B. Quiz-, Modellierungs- und Programmieraufgaben, mit individuellem Feedback helfen den Studierenden zu erkennen, ob sie die Grundbegriffe und Methoden verstanden haben. Begleitende Übungen vertiefen anhand geeigneter Gruppenaufgaben das Verständnis der Inhalte der Vorlesung und zeigen die Anwendung der verschiedenen Methoden mit Hilfe von überschaubaren Problemstellungen in den verschiedenen Phasen des Software Engineerings. Hausaufgaben ermöglichen Studierenden die Themen im Selbststudium zu vertiefen. Die Präsentation der eigenen Lösung in der begleitenden Übung verbessert die Kommunikationsfähigkeiten, die im Software Engineering essentiell sind. Individuelles Feedback zu den Hausaufgaben erlaubt den Studierenden den Lernfortschritt zu messen und ihre Fähigkeiten zu verbessern.",
    "media": "Vortrag mit digitalen Folien, Livestream, Online Übungsaufgaben (Programmierung, Modellierung,\nQuiz) mit individuellem Feedback, Diskussionsforum und Kommunikationsplattform zum Austausch\nzwischen Dozenten, Übungsbetreuern und Studierenden",
    "literature": "B. Bruegge, A. Dutoit: Object-Oriented Software Engineering: Using UML, Design Patterns and\nJava, 3rd Edition, Pearson Education, 2010\nI. Sommerville, Software Engineering, 9th edition, Addison Wesley, 2010",
    "lv_sws_lecturer": "Matthes, Florian; Prof. Dr. rer. nat.\nIN0006: Einführung in die Softwaretechnik | Introduction to Software Engineering\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nÜbungen zu Einführung in die Softwaretechnik (IN0006) [1/4] (Übung, 2 SWS)\nBhatotia P [L], Bhatotia P, Chen J, Kirmemis O, Meignan--Masson I, Reimers S, Sabanic P\nEinführung in die Softwaretechnik (IN0006) (Vorlesung, 3 SWS)\nBhatotia P [L], Bhatotia P, Elver M, Lefort A, Okelmann P, Stavrakakis D, Thalheim J, Unnibhavi H"
  },
  {
    "module_id": "IN0007",
    "title": "Grundlagen: Algorithmen und Datenstrukturen",
    "level": "Bachelor",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 105,
    "hours_presence": 75,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer 90-minütigen Klausur erbracht. In dieser weisen Studierende anhand der gestellten Aufgaben nach, dass sie über fundamentale Kenntnisse im Bereich der Algorithmen und Datenstrukturen verfügen und diese erfolgreich bei der Lösung von Problemen anwenden können. Ferner demonstrieren Studierende beim Lösen der gestellten Aufgaben, dass sie die im Modul behandelten Datenstrukturen und grundlegenden algorithmischen Methoden beherrschen. Die Studierenden weisen nach, dass sie in begrenzter Zeit grundlegende algorithmische Probleme erkennen und analysieren können sowie Wege zu einer effizienten Lösung finden können.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0001 Einführung in die Informatik 1, IN0015 Diskrete Strukturen",
    "content": "Das Modul behandelt zunächst die Grundlagen der Analyse von Effizienz bzw. Komplexität. Es werden grundlegende Begriffe, Komplexitätsmaße, die Landau-Symbole sowie verschiedene Maschinenmodelle eingeführt. Danach studiert das Modul grundlegende Datenstrukturen und algorithmische Probleme.\n- Datenstrukturen für Sequenzen: Untersucht werden dynamische Arrays, Listen, Stapel und\nWarteschlangen. Dabei wird jeweils die Komplexität der einzelnen Operationen hergeleitet.\n- Hashing: Im Kern werden Hashing mit Verkettung, universelles Hashing sowie verschiedenen\nSondierverfahren vorgestellt. Das Modul behandelt optional perfektes Hashing und hash-basierte Algorithmen, zum Beispiel für das Problem des Mengendurchschnitts. IN0007: Grundlagen: Algorithmen und Datenstrukturen | Fundamentals of Algorithms and Data Structures\n- Sortieren: Das Modul wiederholt zunächst einfache Verfahren wie InsertionSort, SelectionSort\nund BubbleSort. Anschließend werden fortgeschrittene Verfahren wie MergeSort, HeapSort und QuickSort analysiert. Optional werden sortierbasierte Algorithmen, die untere Schranke für vergleichsbasiertes Sortieren, Rang-Selektion, RadixSort sowie externes Sortieren vorgestellt.\n- Prioritätswarteschlangen: Das Modul untersucht binäre Heaps und Binomialheaps.\n- Suchbäume: Das Modul behandelt binäre Suchbäume, AVL-Bäume und (a,b)-Bäume.\n- Graphalgorithmen: Das Modul studiert verschiedene Graphrepräsentation,\nTraversierungstechniken per DFS/BFS, die Berechnung von Zweifachzusammenhangskomponenten und starken Zusammenhangskomponenten, topologische Sortierung, die Berechnung von kürzesten Wegen und minimalen Spannbäumen. Optional werden Lösungsverfahren für das Traveling Salesman Problem (TSP) vorgestellt. Im Stoffspektrum des Moduls sind optional Datenkompressionverfahren (Huffman, Lempel-Ziv) und einfache Algorithmen für das Problem des Pattern Matchings vorgesehen.",
    "learning_outcomes": "Die Teilnehmer beherrschen die oben genannten grundlegende Algorithmen und Datenstrukturen. Sie sind in der Lage, diese eigenständig in ihrer Komplexität zu analysieren und die entsprechenden Analysekonzepte auf verwandte algorithmische Probleme anzuwenden. Ferner sind die Teilnehmer in der Lage, die behandelten Algorithmen und Datenstrukturen einzusetzen, sie ggf. zu modifizieren und verschiedene Lösungen in ihrer Güte zu vergleichen.",
    "teaching_methods": "Das Modul besteht aus einer Vorlesung und einer begleitenden Übungsveranstaltung. Die Inhalte der Vorlesung werden im Vortrag und durch Präsentation vermittelt. Studierende werden insbesondere durch die Lösung von Übungsblättern zur inhaltlichen Auseinandersetzung mit den Themen angeregt. Die Lösung der Übungsaufgaben wird in der Übungsveranstaltung besprochen. Zusätzlich erhalten die Studierenden durch die Korrektur der Übungsblätter eine individuelle Rückmeldung über ihren Lernerfolg.",
    "media": "Folien, Tafelarbeit, Übungsblätter",
    "literature": "Kurt Mehlhorn, Peter Sanders: Algorithms and Data Structures - The Basic Toolbox. Springer,\n2008.\nVertiefendes und ergänzendes Material zur Vorlesung findet sich in folgenden Büchern:\n- Volker Heun: Grundlegende Algorithmen - Einführung in den Entwurf und die Analyse effizienter\nAlgorithmen. 2. Auflage, Vieweg, 2003.\n- Michael T. Goodrich, Roberto Tamassia. Algorithm Design - Foundations, Analysis, and Internet\nExamples. John Wiley & Sons, 2002.\n- Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein. Introduction to\nAlgorithms, 3rd edition, MIT Press, 2009. Deutsche Übersetzung: Algorithmen - Eine Einführung.\n3. Auflage, Oldenbourg Verlag, 2010.\n- Jon Kleinberg, Eva Tardos. Algorithm Design. Pearson Education, 2005.\nIN0007: Grundlagen: Algorithmen und Datenstrukturen | Fundamentals of Algorithms and Data Structures\n- Uwe Schöning. Algorithmik. Spektrum Akademischer Verlag, 2001.\n- Robert Sedgewick, Kevin Wayne: Algorithms. 4th edition, Addison-Wesley, 2011.\n- Robert Sedgewick. Algorithms in Java, Parts 1-4. 3rd edition, Addison-Wesley, 2002. Deutsche\nÜbersetzung: Algorithmen in Java, Teil 1-4. 3. Auflage, Pearson Education, 2003.",
    "lv_sws_lecturer": "Albers, Susanne; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nGrundlagen: Algorithmen und Datenstrukturen (IN0007) (Vorlesung, 3 SWS)\nLeis V [L], Haas G, Leis V, Müller M\nÜbungen zu Grundlagen: Algorithmen und Datenstrukturen (IN0007), Mo, Di (Übung, 2 SWS)\nLeis V [L], Haas G, Müller M"
  },
  {
    "module_id": "IN0008",
    "title": "Grundlagen: Datenbanken",
    "level": "Bachelor",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 105,
    "hours_presence": 75,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer Klausur von 90 Minuten erbracht. Wissensfragen überprüfen die Vertrautheit mit den wesentlichen Konzepten von relationalen Datenbanksystemen. Transferaufgaben und kleine Szenarien überprüfen die Fähigkeit, diese Konzepte systematisch und qualifiziert anzuwenden und zu bewerten.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0015 Diskrete Strukturen, IN0001 Einführung in die Informatik 1",
    "content": "SQL, Datenintegrität, relationale Entwurfstheorie, physische Datenorganisation (Speicherorganisation, Indexstrukturen), Anfragebearbeitung, Transaktionsverwaltung, Grundzüge der Fehlerbehandlung (Recovery, Backup) und der Mehrbenutzersynchronisation, Sicherheitsaspekte (Autorisierung), XML-Datenmodellierung (optional)",
    "learning_outcomes": "Die Studierenden können die wesentlichen Konzepte von relationalen Datenbanksystemen anwenden und können sie systematisch und qualifiziert nutzen und bewerten. Die Studierenden beherrschen die systematische Nutzung eines Datenbanksystems vom konzeptuellen Entwurf über den Implementationsentwurf zum physischen Entwurf. Sie können auch komplexe Anfragen in SQL formulieren und haben ein Grundverständnis der logischen und physischen Optimierung auf der Grundlage der Relationenalgebra. Weiterhin haben sie den sicheren Betrieb hinsichtlich Recovery, Mehrbenutzersynchronisation und Autorisierung verstanden. IN0008: Grundlagen: Datenbanken | Fundamentals of Databases",
    "teaching_methods": "Vorlesung: In der Vorlesung werden die Inhalte anhand von animierten Folien vorgestellt und meist anhand von einfachen Beispielen erläutert Übung: In der Übung werden die Inhalte anhand von weiteren, komplexeren Beispielen unter Anleitung eines Betreuers eingeübt. Darüber hinaus gibt es Aufgaben zum Selbststudium, sowie eine Webschnittstelle zum Datenbanksystem HyPer zum aktiven Austesten von SQL-Anfragen und Selbststudium von Anfrageplänen.",
    "media": "Vorlesung mit animierten Folien, Webschnittstelle für SQL, Database Normalizer (Check von\nRelationendefinitionen auf Einhaltung der Normalformen), Tool Interaktive Relationale Algebra",
    "literature": "- Alfons Kemper, André Eickler: Datenbanksysteme. Eine Einführung. 10., aktualisierte und\nerweiterte Auflage, Oldenbourg Verlag, 2015\n- A. Kemper, M. Wimmer: Übungsbuch: Datenbanksysteme. 3. Auflage Oldenbourg Verlag, 2012\n- A. Silberschatz, H. F. Korth, S. Sudarshan: Database System Concepts. Sixth Edition, McGraw-\nHill, 2010",
    "lv_sws_lecturer": "Kemper, Alfons; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nGrundlagen: Datenbanken (IN0008) (Vorlesung, 3 SWS)\nKemper A, Anneser C, Jungmair M, Lehner S, Sichert M\nÜbungen zu Grundlagen: Datenbanken (IN0008) Gruppen 1-25 (Übung, 2 SWS)\nKemper A [L], Anneser C, Jungmair M, Lehner S, Sichert M"
  },
  {
    "module_id": "IN0009",
    "title": "Grundlagen: Betriebssysteme und Systemsoftware",
    "level": "Bachelor",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 75,
    "hours_presence": 75,
    "examination_achievements": "Die Modulprüfung besteht aus einer Klausur von 90 Minuten, in der die Studierenden das Verständnis des Stoffes (wie die Verwaltung von Betriebsmitteln und der Einsatz von Systemsoftware) durch Wiedergabe und Anwendung des Gelernten nachweisen müssen. Zudem müssen sie vorgestellte Verfahren anwenden und Ihre Fähigkeiten in der Systemprogrammierung bei der Lösung kleiner Aufgaben unter Beweis stellen.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0001 Einführung in die Informatik 1 und IN0004 Einführung in die Rechnerarchitektur werden\nempfohlen",
    "content": "Grundkonzepte: Betriebssysteme; Nebenläufigkeit; Parallele Programmierung; Systemnahe Programmierung (Prozesse, Speicher, Kommunikation, BM-Verwaltung; Modelle (abstrakt, formal) für Nebenläufigkeit, u.a. Petrinetze; Wechselseitiger Ausschluss, Synchronisation, Deadlocks; Compiler/Linker/Loader mit Integration von Bibliotheken, Übergang auf (geeignete) Hardware-Basis, maschinennahe Programmierung und C; I/O insbesondere zur Vorbereitung der Vernetzung)",
    "learning_outcomes": "Nach Abschluss des Moduls sind die Studierenden in der Lage, die Grundlagen, Probleme und Lösungen von Betriebssystemen und der Systemsoftware zu verstehen und die aktuellen Entwicklungen einzuschätzen. Zudem verstehen sie die einzelnen Komponenten, wie zum Beispiel die Prozess- und die Speicherverwaltung, und sie können die unterschiedlichen IN0009: Grundlagen: Betriebssysteme und Systemsoftware | Basic Principles: Operating Systems and System Software Strategien und Verfahren analysieren und bewerten. Sie sind zudem in die Lage, die erworben Grundlagenkenntnisse direkt auf neue Entwicklungen im Bereich der Betriebssysteme sowie der Systemsoftware anzuwenden, indem sie Betriebssystemkomponenten und andere Systemsoftware selber entwickeln.",
    "teaching_methods": "Die Vorlesung führt mittels einer Folienpräsentation und anhand von Beispielen in die Grundprinzipien und Vorgehenswesen des Betriebssystemsaufbaus und deren interner Funktionalität ein. Begleitende Übungen vertiefen das Verständnis der in der Vorlesung vermittelten Konzepte anhand von geeigneten Gruppenaufgaben und veranschaulichen die Anwendung unterschiedlicher Herangehensweisen anhand von überschaubaren Aufgabenstellungen der unterschiedlichen Aspekte der Betriebssystemunterteilung. Zusätzliche Programmieraufgaben ermöglichen es den studierenden ihr Wissen im Selbststudium zu vertiefen. Rückmeldung und Hilfe in Programmierübungen helfen zusätzlich den Lernfortschritt zu beurteilen und ihr Können zu verbessern.",
    "media": "Unterlagen (Folien und weitere Dokumente) via Moodle",
    "literature": "A.S. Tanenbaum, H. Bos: Modern Operating Systems, 4/E (Pearson,\n2015)",
    "lv_sws_lecturer": "Ott, Jörg; Prof. Dr.-Ing.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nGrundlagen: Betriebssysteme und Systemsoftware (IN0009) (Vorlesung, 3 SWS)\nOtt J [L], Ott J, Uhl M\nÜbungen zu Grundlagen: Betriebssysteme und Systemsoftware (IN0009) (Übung, 2 SWS)\nOtt J [L], Uhl M, Liedtke S"
  },
  {
    "module_id": "IN0011",
    "title": "Einführung in die Theoretische Informatik",
    "level": "Bachelor",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 8,
    "hours_total": 240,
    "hours_self_study": 150,
    "hours_presence": 90,
    "examination_achievements": "Prüfungsart: Klausur Die Prüfungsleistung wird in Form einer 180-minütigen Klausur erbracht. Wissensfragen überprüfen die Vertrautheit mit Konzepten der Theoretischen Informatik, Konstruktionsaufgaben überprüfen die Fähigkeit, mit bekannten Algorithmen konkrete Probleme zu lösen oder kleine neue Algorithmen zu entwickeln, und Beweisaufgaben überprüfen die Fähigkeit, Aussagen über die Konzepte der Vorlesung logisch herzuleiten.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0015 Diskrete Strukturen, MA0901 Lineare Algebra für Informatik, MA0902 Analysis für\nInformatik",
    "content": "Formale Sprachen, Grammatiken, Chomsky Hierarchy. Reguläre Sprachen: DFA, NFA mit und ohne ε-Transitionen, reguläre Ausdrücke und Übersetzungen dazwischen; Systeme von Gleichungen zwischen Sprachen; Abschluss unter Booleschen Operationen; Ardens Lemma; Pumping Lemma; Entscheidungsprobleme; Minimierung; Satz von Myhill-Nerode. CFLs: PDAs und Übersetzungen zw. CFGs und PDAs; Beweis, dass DPDAs schwächer als PDAs sind; Abschlusseigenschaften; CYK Algorithmus; Pumping Lemma; Chomsky und Greibach Normalformen. IN0011: Einführung in die Theoretische Informatik | Introduction to Theory of Computation Kontextsensitive Sprachen und LBAs. Berechenbarkeit: Berechenbarkeit, Entscheidbarkeit, Halb-Entscheidbarkeit, rekursive Aufzählbarkeit und ihre Beziehungen; Existenz nichtberechenbarer Funktionen; Turing Maschinen, akzeptierte Sprachen und Typ-0 Sprachen; Äquivalenz von Turing Maschinen, While-Programmen und Goto-Programmen; Primitive und µ-rekursive Funktionen; Reduktionen zwischen Problemen; das Halteproblem; universelle Turing Maschinen; Satz von Rice und Satz von Rice-Shapiro; Unentscheidbarkeit des Postschen Korrespondenzproblems und wichtiger Probleme auf CFGs. Komplexitätstheorie: Zeit und Platzkomplexitätsklassen; Polynomialzeitreduktionen; die Klassen P und NP; NP-Vollständigkeit; Satz von Cook; wichtige NP-vollständige Probleme und Reduktionen zwischen ihnen. Alle Beweise werden behandelt.",
    "learning_outcomes": "Nach der erfolgreichen Teilnahme an diesem Modul verstehen die Teilnehmer die wesentlichen Konzepte der Theoretischen Informatik auf einem grundlegenden, aber wissenschaftlichen Niveau. Teilnehmer wissen, was reguläre Ausdrücke, kontextfreie Grammatiken, die Chomsky Hierarchy, endliche Automaten und Turingmaschinen sind. Sie können gegebene formale Sprachen mit dem passenden Beschreibungsmittel definieren und sie können zeigen, falls sich eine gegebene Sprache nicht mit einem bestimmten Beschreibungsmittel definieren lässt. Sie können beweisen, dass bestimmte Beschreibungsmittel äquivalent sind und können verschiedene Beschreibungen algorithmisch ineinander transformieren. Sie können die grundlegenden Konzepte der Komplexitätstheorie erklären und können Entscheidungsprobleme unter gegebenen Komplexitätsschranken algorithmisch aufeinander reduzieren.",
    "teaching_methods": "In der Vorlesung werden die Inhalte vorgestellt und im Dialog mit den Studenten erläutert. In den begleitenden Übungen werden mit Hilfe von Aufgaben die angestrebten Lernergebnisse an konkreten Beispielen eingeübt, entweder individuell oder in Kleingruppen, und mit Hilfe des Betreuers.",
    "media": "Folienpräsentation, Tafelanschrieb, Animationen, Vorlesungsaufzeichnung, Übungsblätter, online\nDiskussionsforum.",
    "literature": "John E. Hopcroft, Rajeev Motwani, Jeffrey D. Ullman. Introduction to Automata Theory,\nLanguages, and Computation\nDexter Kozen. Automata and Computability\nKatrin Erk, Lutz Priese. Theoretische Informatik. Eine umfassende Einführung.\nUwe Schöning. Theoretische Informatik kurzgefasst.\nIN0011: Einführung in die Theoretische Informatik | Introduction to Theory of Computation",
    "lv_sws_lecturer": "Nipkow, Tobias; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nÜbungen zu Einführung in die Theoretische Informatik (IN0011) (Übung, 2 SWS)\nCzerner P, Kappelmann K, Krasotin V\nEinführung in die Theoretische Informatik (IN0011) (Vorlesung, 4 SWS)\nEsparza Estaun F"
  },
  {
    "module_id": "IN0015",
    "title": "Diskrete Strukturen",
    "level": "Bachelor",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 8,
    "hours_total": 240,
    "hours_self_study": 150,
    "hours_presence": 90,
    "examination_achievements": "Die Studierenden werden mittels einer schriftlichen Prüfung von 120 - 180 Minuten bewertet. Ein Teil der Prüfungsaufgaben überprüft, ob der Studierende die mathematischen Begriffe aus Mengentheorie, Relationen, Logik, Graphen und den weiteren, in der Vorlesung behandelten Bereichen korrekt anwenden kann. Ein weiterer Teil der Aufgaben überprüft, ob der Studierende dazu in der Lage ist, das richtige Verfahren aus den behandelten Themen zur Lösung eines konkreten Problems auszuwählen und korrekt anzuwenden.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "keine",
    "content": "Die Vorlesung ist eine Einführung in die Begriffe und Bereiche der Diskreten Mathematik für Informatiker. Sie gliedert sich in fünf Teilen: 1) Grundbegriffe der Mengen, Relationen und Funktionen:\n- Mengen: Grundoperationen, Äquivalenzgesetze, KV-Diagramme,\nAbzählbarkeit, Satz von Cantor\n- Relationen: Join, Transitive Hülle, Relationale Algebra\n- Funktionen: Grundeigenschaften, Komposition, Inverse\n2) Grundlagen der Aussagenlogik und Logik erster Stufe:\n- Aussagenlogik:\n- Syntax und Semantik\n- Wahrheitstabellen und Bezug zu KV-Diagramme\nIN0015: Diskrete Strukturen | Discrete Structures\n- Äquivalenzgesetze\n- KNF, DNF, Normalisierungsverfahren, Erfüllbarkeitsäquivalenz\n- SAT-Verfahren: DPLL, Resolution. Korrektheitsnachweis\n- Modellierung mit Aussagenlogik\n- Prädikatenlogik\n- Syntax und Semantik\n- Äquivalenzgesetze\n- Modellierung mit Prädikatenlogik\n3) Grundlagen der Kombinatorik:\n- Zählprinzipien\n- Ziehung von Bällen aus Urnen: Variationen, Permutationen, Kombinationen.\n- Binomialkoeffizienten: Symmetrie, Identitäten von Pascal und Vandermonde\n- Verteilungsprobleme\n- Stirling-Zahlen der ersten und zweiten Art\n- Geordnete und ungeordnete Zahlpartitionen\n- Anwendung Lastverteilung\n4) Grundlagen der Graphentheorie:\n- Grunddefinitionen\n- Bäume\n- Eulerkreise: Satz von Euler. Hamiltonkreise: Sätze von Dirac und Ore\n- Planargraphen: Eulersche Polyederformel, Satz von Kuratowski\n- Matchings: Heiratssatz, augmentierende Pfade\n- Matchings mit Präferenzen: Satz von Gale-Shapley\n5) Algebraische Grundlagen:\n- Grunddefinitionen: Algebra, Gruppe, Ring, Körper\n- Gruppen\n- Ordnung: Satz von Lagrange, Erzeuger, Gruppenexponent\n- Zyklische Gruppen\n- Zahlentheoretische Grundlagen: Größter gemeinsamer Teiler,\nErweiterter euklidischer Algorithmus, Eulersche phi-Funktion\n- Multiplikative Restklassengruppen\n- RSA",
    "learning_outcomes": "Nach erfolgreichem Abschluss des Moduls\n- beherrschen Teilnehmer die Grundbegriffe sowie die Grundlagen des Umgangs mit logischen,\nalgebraischen und algorithmischen Kalkülen,\n- können kombinatorische Problemstellungen lösen,\n- können Probleme mit Methoden der Graphentheorie modellieren und lösen und\n- sind zur quantitativen Betrachtung der Effizienz von Lösungsmethoden und Algorithmen in der\nLage. IN0015: Diskrete Strukturen | Discrete Structures",
    "teaching_methods": "Das Modul besteht aus einer Vorlesung und einer begleitenden Übung. Die Inhalte der Vorlesung werden im Vortrag und durch Präsentation vermittelt. Studierende werden durch kleine, im Laufe der Vorträge gestellte Aufgaben, sowie durch die Lösung von Übungsblättern zur inhaltlichen Auseinandersetzung mit den Themen angeregt. Die Lösung der Übungsaufgaben wird in der Übungsveranstaltung besprochen.",
    "media": "Folienpräsentation, Tafelanschrieb, Übungsblätter.",
    "literature": "- A. Steger: Diskrete Strukturen, Band 1: Kombinatorik, Graphentheorie, Algebra, Springer, 2001\n- K.H. Rosen: Discrete Mathematics And Its Applications, McGraw-Hill, 1995\nM. Aigner: Diskrete Mathematik, Vieweg, 1999 (3rd Edition)\n- R.L. Graham, D.E. Knuth, O. Patashnik: Concrete Mathematics: a Foundation for Computer\nScience, Addison-Wesley, 1994\n- D. Gries, F.B. Schneider: A Logical Approach to Discrete Math, Springer, 1993\n- D.L. Kreher, D.R. Stinson: Combinatorial Algorithms: Generation, Enumeration, and Search, CRC\nPress, 1999\n- S. Pemmaraju, S. Skiena: Computational Discrete Mathematics: Combinatorics and Graph\nTheory with Mathematica, Cambridge University Press, 2003\n- Schöning, Uwe: Logik für Informatiker, Spektrum-Verlag, 2000 (5. Auflage)",
    "lv_sws_lecturer": "Esparza Estaun, Francisco Javier; Prof.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nDiskrete Strukturen (IN0015) (Vorlesung, 4 SWS)\nCremers D [L], Cremers D, Curreli C, Gladkova M, Hofherr F\nÜbungen zu Diskrete Strukturen (IN0015) - 1 (Mo) (Übung, 2 SWS)\nCremers D [L], Eisenberger M, Gladkova M, Hofherr F, Weber S"
  },
  {
    "module_id": "IN0018",
    "title": "Diskrete Wahrscheinlichkeitstheorie",
    "level": "Bachelor",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 105,
    "hours_presence": 75,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer 120-minütigen Klausur erbracht, die sich aus drei verschiedenen Aufgabentypen zusammensetzt. Verständnisaufgaben überprüfen, ob die Studierenden Grundbegriffe und Sätze verinnerlicht haben, typischerweise dadurch, dass sie die Begriffe auf Beispiele anwenden. Algorithmische Aufgaben testen, ob die Studierenden die in der Vorlesung eingeführten Rechenregeln beherrschen und anwenden können. Modellierungsaufgaben prüfen die Fähigkeit der Studierenden, konkrete Probleme als abstrakte Zufallsexperimente zu modellieren und mithilfe der mathematischen Mittel der Vorlesung zu lösen.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0015 Diskrete Strukturen, MA0901 Lineare Algebra für Informatik, MA0902 Analysis für\nInformatik",
    "content": "-Grundlagen der (diskreten) Wahrscheinlichkeitstheorie\n++ Wahrscheinlichkeitsräume, Ereignisse, Prinzip der Inklusion/Exklusion, Boolesche Ungleichung, bedingte Wahrscheinlichkeit, Multiplikationssatz, Satz der totalen Wahrscheinlichkeit, Satz von Bayes, Unabhängigkeit ++ Zufallsvariablen, Erwartungswert, Varianz, Linearität des Erwartungswertes, bedingte Zufallsvariablen und deren Erwartungswert, Varianz, Momente und zentrale Momente, mehrere Zufallsvariablen und deren gemeinsame Dichte & Verteilung, Unabhängigkeit von Zufallsvariablen, Momente zusammengesetzter Zufallsvariablen, Indikatorvariablen ++ diskrete Verteilungen: Bernoulli-Verteilung, Binomialverteilung, geometrische Verteilung, Coupon-Collector-Problem, Poisson-Verteilung, Zusammenhänge unter den Verteilungen IN0018: Diskrete Wahrscheinlichkeitstheorie | Discrete Probability Theory ++ Methoden zur Abschätzung von Wahrscheinlichkeiten, Ungleichungen von Markov und Chebyshev, Chernoff Schranken ++ Gesetz der großen Zahlen ++ wahrscheinlichkeitserzeugende Funktionen und deren Anwendung auf Verteilungen, momenterzeugende Funktionen mit verschiedenen Anwendungen\n-Kontinuierliche Wahrscheinlichkeitsräume\n++ kontinuierliche Zufallsvariablen, Kolmogorov Axiome, sigma-Algebren, Lebesgue-Integrale, Rechnen mit kontinuierlichen Zufallsvariablen, Simulation von Zufallsvariablen ++ kontinuierliche Verteilungen: Gleichverteilung, Normalverteilung und lineare Transformation, Exponentialverteilung und Warteprozesse, Zusammenhang mit diskreten Verteilungen ++ mehrere kontinuierliche Zufallsvariablen, Randverteilungen und Unabhängigkeit, Summen von Zufallsvariablen ++ Momenterzeugende Funktionen für kontinuierliche Zufallsvariablen ++ Zentraler Grenzwertsatz\n-Induktive Statistik\n++ Schätzvariablen, Maximum-Likelihood-Prinzip, Konfidenzintervalle, Testen von Hypothesen, Entwicklung und Anwendung von statistischen Tests\n-Stochastische Prozesse\n++ Prozesse mit diskreter Zeit, Markovketten, Übergangswahrscheinlichkeiten, Ankunftswahrscheinlichkeiten, Übergangszeiten, Rückkehrzeiten, Fundamentalsatz für ergodische Markovketten",
    "learning_outcomes": "Nach erfolgreichem Abschluss des Moduls\n- sind die Teilnehmer mit wichtigen Konzepten der diskreten und kontinuierlichen\nWahrscheinlichkeitsräume sowie der stochastischen Prozesse vertraut und können diese in weiten Teilen selbst herleiten\n- beherrschen Rechenregeln zur Bestimmung und Abschätzung von Wahrscheinlichkeiten,\nErwartungswerten und Varianzen,\n- sind in der Lage, reale Probleme auf abstrakte Wahrscheinlichkeitsräume abzubilden und\n- können einfache statistische Tests fachgerecht anwenden.",
    "teaching_methods": "Das Modul besteht aus einer Vorlesung und einer begleitenden Übung. Die Inhalte der Vorlesung werden im Vortrag und durch Präsentation vermittelt. Studierende werden durch kleine, im Laufe der Vorträge gestellte Aufgaben, sowie durch die Lösung von Übungsblättern zur inhaltlichen Auseinandersetzung mit den Themen angeregt. Die Lösung der Übungsaufgaben wird in der Übungsveranstaltung besprochen.",
    "media": "Folienpräsentation, Tafelanschrieb, Übungsblätter.\nIN0018: Diskrete Wahrscheinlichkeitstheorie | Discrete Probability Theory",
    "literature": "- T. Schickinger, A. Steger: Diskrete Strukturen - Band 2, Springer Verlag, 2001\n- Nobert Henze: Stochastik für Einsteiger, Vieweg, 2004\n- R. Mathar, D. Pfeifer: Stochastik für Informatiker, B.G. Teubner Stuttgart, 1990\n- M. Greiner, G. Tinhofer: Stochastik für Studienanfänger der Informatik, Carl Hanser Verlag, 1996\n- H. Gordon: Discrete Probability, Springer-Verlag, 1997\n- R. Motwani, P. Raghavan: Randomized Algorithms, Cambridge University Press, 1995\n- L. Fahrmeir, R. Künstler, I. Pigeot, G. Tutz: Statistik - Der Weg zur Datenanalyse, Springer-\nVerlag, 1997",
    "lv_sws_lecturer": "Esparza Estaun, Francisco Javier; Prof.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nDiskrete Wahrscheinlichkeitstheorie (IN0018) (Vorlesung, 3 SWS)\nAlbers S [L], Albers S\nÜbungen zu Diskrete Wahrscheinlichkeitstheorie (IN0018); Mi, Do, Fr (Übung, 2 SWS)\nAlbers S, Schubert S"
  },
  {
    "module_id": "IN0019",
    "title": "Numerisches Programmieren",
    "level": "Bachelor",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester/Sommersemester",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 105,
    "hours_presence": 75,
    "examination_achievements": "Prüfungsart: Klausur Die Prüfungsleistung wird in Form einer Klausur von 90 Minuten erbracht. In dieser soll nachgewiesen werden, dass in begrenzter Zeit ein Problem erkannt wird und Wege zu einer Lösung gefunden werden können. Die Prüfungsfragen gehen über den gesamten Vorlesungsstoff. Die Antworten erfordern eigene Formulierungen. Darüber hinaus können kurze Rechenaufgaben gestellt werden. Prüfungsfragen bewerten das Verständnis grundlegender Prinzipien des Numerischen Programmierens der Prüfungsteilnehmer und Prüfungsteilnehmerinnen. Hierzu zählt ebenfalls die Evaluierung des Wissens der Teilnehmenden in Bezug auf die wichtigsten grundlegenden numerischen Algorithmen der Informatik. Kleine Codestücke erlauben die Überprüfung der Fähigkeit der Studierenden diese Algorithmen anzuwenden und zu implementieren.",
    "repetition": "Folgesemester",
    "recommended_prerequisites": "MA0901 Lineare Algebra für Informatik, MA0902 Analysis für Informatik",
    "content": "- Gleitpunktarithmetik (Zahldarstellung, Rundungsfehleranalyse, Kondition, Stabilität)\n- Interpolation (Polynominterpolation, Splines, trigonometrische Interpolation, Schnelle Fourier-\nTransformation)\n- Integration (einfache und zusammengesetzte Regeln, Extrapolationsverfahren, Gauß-Quadratur)\n- Lösung linearer Gleichungssysteme (Gauß-Elimination, LR-Zerlegung, Pivoting, Least Squares)\n- Gewöhnliche Differentialgleichungen (Finite Differenzen, Euler-Verfahren, Runge-Kutta-\nVerfahren, Konsistenz, Stabilität und Konvergenz, Diskretisierungsfehler, Mehrschrittverfahren) IN0019: Numerisches Programmieren | Numerical Programming\n- Iterative Verfahren (Relaxationsverfahren: Jacobi und Gauß-Seidel, Minimierungsverfahren:\nsteilster Abstieg, Fixpunktiteration, nichtlineare Gleichungen: von der Bisektion zu Newton)\n- Das symmetrische Eigenwertproblem (Motivation, Kondition, Vektoriteration, QR-Verfahren,\nReduktionsalgorithmen)",
    "learning_outcomes": "Die Teilnehmenden verstehen die wesentlichen Grundsätze numerischen Programmierens, kennen die wichtigsten elementaren numerischen Algorithmen (z.B. Gauß-Elimination, QR- Algorithmen, Neville-Algorithmen, Jacobi und Gauß-Seidel-Algorithmen, Newtonverfahren), die für Aufgabenstellungen aus der Informatik relevant sind, und sind in der Lage, diese Algorithmen sicher anzuwenden und zu implementieren.",
    "teaching_methods": "Das Modul besteht aus einer Vorlesung und einer begleitenden Übung. Die Inhalte der Vorlesung werden im Vortrag und durch Präsentationen vermittelt. Studierende sollen zum Studium der Literatur und der inhaltlichen Auseinandersetzung mit den Themen angeregt werden. In den Übungen werden teilweise in Gruppenarbeit gemeinsam konkrete Fragestellungen beantwortet und ausgesuchte Beispiele bearbeitet.",
    "media": "Folien, Tafelarbeit, Übungsblätter",
    "literature": "- Huckle, Schneider: Numerische Methoden, Springer-Verlag, Berlin-Heidelberg, 2006\n- Späth: Numerik - eine Einführung für Mathematiker und Informatiker, Vieweg, Braunschweig-\nWiesbaden, 1994\n- Schwarz: Numerische Mathematik, Teubner, Stuttgart, 4. Auflage 1997\n- Stoer, Bulirsch: Numerische Mathematik, Springer-Verlag, Berlin Heidelberg, Band 1 (8. Auflage\n1999) und Band 2 (4. Auflage 2000)\n- Press, Flannery, Teukolsky, Vetterling: Numerical Recipes Cambridge University Press, http://\nwww.nr.com/\n- Golub, Ortega: Scientific Computing: An Introduction with Parallel Computing Academic Press,\n1993",
    "lv_sws_lecturer": "Bungartz, Hans-Joachim; Prof. Dr. rer. nat. habil.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nÜbungen zu Numerisches Programmieren (IN0019) (Übung, 3 SWS)\nBungartz H [L], Geiger M, Sun S\nNumerisches Programmieren (IN0019) (Vorlesung, 2 SWS)\nBungartz H [L], Geiger M, Sun S\nIN0019: Numerisches Programmieren | Numerical Programming"
  },
  {
    "module_id": "IN0021",
    "title": "Einführung in die Wirtschaftsinformatik",
    "level": "Bachelor",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer Klausur von 90 Minuten erbracht. In ihr soll nachgewiesen werden, dass die Grundlagen und Modellierungsmethoden der Wirtschaftsinformatik verstanden wurden und angewendet werden können. Die Modellierungsmethoden der Wirtschaftsinformatik werden gezeigt, indem Informationssysteme erfasst und mittels Modellierungsmethoden (Prozess- und Datenmodelle) erstellt werden können. Des Weiteren können Erkenntnisse aus den Übungen berichtet und Fragen dazu beantwortet werden.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Keine",
    "content": "# Grundlegende Begriffe der Wirtschaftsinformatik # Informationssysteme in Unternehmen, Modellierung betrieblicher Informationssysteme # Modellierung von Geschäftsprozessen und Daten (ERM, BPMN, EPK) # Entwicklung von prozessorientierten Anwendungen # Einsatz prozessorientierter Anwendungen in der Praxis am Beispiel von Produktion und Pflege/ Health Care # Beitrag der Wirtschaftsinformatik zur digitalen Transformation # Informationssicherheit",
    "learning_outcomes": "Nach der Teilnahme an dem Modul sind die Studierenden in der Lage wichtige Paradigmen und Teilgebiete der Wirtschaftsinformatik zu verstehen, Wirtschaftsinformatik neben anderen IN0021: Einführung in die Wirtschaftsinformatik | Introduction to Information Systems Disziplinen einzuordnen und von der Informatik und Betriebswirtschaftslehre abzugrenzen. Zusätzlich verstehen die Studierenden Informationssysteme und deren Nutzen in verschiedenen Branchen. Außerdem sind sie in der Lage Modelle (insb. Prozess- und Datenmodelle) als Grundlage für die Gestaltung von Informationssystemen zu modellieren. Studierende werden in die Lage versetzt, prozessorientierte Anwendungen entwickeln können. Hierbei verstehen Studierende den gesamten Prozess von der Modellierung einer solchen Anwendung über deren Verifikation und Analyse bis hin zur Implementierung in einer Process Engine. Die Studierenden erkennen die Bedeutung von prozessorientierten Anwendungen anhand von Realweltprozessen in Produktion und Pflege/Health Care und können dadurch auch den Beitrag der Wirtschaftsinformatik für die digitale Transformation in Unternehmen einordnen. Schlussendlich verstehen die Studierenden Grundlagen der Informationssicherheit als wichtigen Aspekt der Wirtschaftsinformatik.",
    "teaching_methods": "Das Lehrformat setzt sich aus Vorlesung und inhaltlich abgestimmter Übung zusammen. Dabei trägt der/die DozentIn in der Vorlesung den Inhalt vor. Es werden zusätzlich Videos des Lehrinhalts auf der Webseite zur Vorlesung zur Verfügung gestellt. Die Videos dienen zur Wiederholung und vertieften Einprägung der präsentierten Inhalte und können auch im Sinne eines „flipped classrooms“ eingesetzt werden. Die Vorlesungsinhalte zielen auf die Vermittlung der grundlegenden Begriffe und Konzepte der Wirtschaftsinformatik an. Die Konzepte werden daher insbesondere in deren betrieblichem Anwendungskontext anhand unterschiedlicher Realweltbeispiele illustriert. Die Übung besteht aus vertiefenden Aufgaben zum Theorieteil der Vorlesung sowie praktischen Aufgaben. Die Übungen werden einzeln bearbeitet. Der Übungsteil dient dem Verstehen und Anwenden der vermittelten Konzepte. Die Übungen sollen die Studierenden in die Lage versetzen, grundlegende Konzepte der Wirtschaftsinformatik in deren Anwendung in verschiedenen betrieblichen Kontext zu verstehen und bewerten zu können. Die Übungen vermitteln den Studierenden auch einen Überblick über die bestehende Toollandschaft. Weiterhin sammeln die Studierenden in den Übungen erste praktische Erfahrungen in der Modellierung und Implementierung prozessorientierter Anwendungen.",
    "media": "Folien, Videos, Moodle, Übungsaufgaben",
    "literature": "# Hansen, H.R.; Mendling, J. Neumann, G. (2019): Wirtschaftsinformatik. Grundlagen und\nAnwendungen. 12. völlig neu bearbeitete Auflage, Walter de Gruyter GmbH, Berlin/Boston 2019\n# Weske, M. (2019) Business Process Management - Concepts, Languages, Architectures, Third\nEdition. Springer 2019, ISBN 978-3-662-59431-5, pp. 1-417 2019\n# Zeitschriften- und Konferenzartikel zu den einzelnen Themen werden gesondert bekannt\ngegeben.",
    "lv_sws_lecturer": "Rinderle-Ma, Stefanie; Prof. Dr. rer. nat.\nIN0021: Einführung in die Wirtschaftsinformatik | Introduction to Information Systems\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nÜbungen zu Einführung in die Wirtschaftsinformatik (IN0021) (Übung, 2 SWS)\nRinderle-Ma S [L], Ehrendorfer M\nEinführung in die Wirtschaftsinformatik (IN0021) (Vorlesung, 2 SWS)\nRinderle-Ma S [L], Rinderle-Ma S"
  },
  {
    "module_id": "IN0022",
    "title": "Planen und Entscheiden in betrieblichen Informationssystemen",
    "level": "Bachelor/Master",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Die Modulprüfung besteht aus einer 120-minütigen Klausur, in der die Studierenden durch das Lösen von Problemstellungen ihre Fähigkeit zur Anwendung, Analyse und Beurteilung grundlegender Verfahren aus den Bereichen Entscheidungsanalyse, Lineare Optimierung, und Ganzzahlige Lineare Optimierung demonstrieren. Einerseits werden praktische Aufgabenstellungen als mathematisches Optimierungsproblem modelliert. Andererseits zeigen die Teilnehmer durch das Beantworten theoretischer Fragestellungen, dass sie die Funktionsweise und die mathematischen Eigenschaften verschiedener Algorithmen verstanden haben. Das Beantworten der Problem- und Fragestellungen erfordert eigene Formulierungen.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0015 Diskrete Strukturen, Mathematische Behandlung der Naturwissenschaften",
    "content": "Entscheidungsanalyse (Entscheidungsbäume, MCDM, InvesMMonsrechnung), Lineare Optimierung, Modellierung betrieblicher Optimierungsprobleme (Transportproblem, Zuweisungsproblem, Zielprogrammierung), Simplex (Normalform, Basivariablen und Basislösungen, Primaler Simplex-Algorithmus, Simplex Tableau, Revidierter Simplex), Sensitivitätsanalyse und Dualitätstheorie, Ganzzahlige Programmierung (Branch-and- Bound, Komplexitätstheorie, Modellierung ganzzahliger Probleme), Netzplantechnik und Netzflussprobleme IN0022: Planen und Entscheiden in betrieblichen Informationssystemen | Information Systems II",
    "learning_outcomes": "Nach Absolvieren des Moduls kennen die Teilnehmer grundlegende Verfahren aus den Bereichen Entscheidungsanalyse, Lineare Optimierung, und Ganzzahlige Lineare Optimierung. Sie sind in der Lage betriebliche Planungs- und Entscheidungsprobleme wie z.B. Transportprobleme oder Netzflussprobleme zu modellieren und verstehen Algorithmen, um diese Probleme effektiv zu lösen. Studierende kennen die wesentlichen Eigenschaften dieser Algorithmen und betriebswirtschaftlich relevante Anwendungen.",
    "teaching_methods": "Vorlesung und inhaltlich abgestimmte Übung bilden das Lehrformat. In der Vorlesung trägt der Dozent den Inhalt vor und präsentiert Anwendungsbeispiele aus der Praxis der betrieblichen Planung interaktiv. Die Studierenden werden somit mit den betriebswirtschaftlichen Planungs und Entscheidungsprobleme vertraut gemacht und lernen die Anwendungen von entsprechenden Optimierungsverfahren zu unterscheiden. In der Übung bearbeiten die Studierenden in betreuter Einzel- und Gruppenarbeit Übungsaufgaben und werten die entsprechenden quantitativen Verfahren aus. Dadurch lernen die Studierenden betriebliche Planungs- und Entscheidungsprobleme zu bewerten und das konstruktive Kritisieren der eigenen Arbeit.",
    "media": "Skriptum, Übungsblätter, PowerPoint und E-Learning Plattform",
    "literature": "- Domschke, W.; Drexl, A.: Einführung in Operations Research, 5. Auflage, Kap. 1-6, Springer,\n2002.\n- Zimmermann, W.; Stache, U.: Operations Research, Quantitative Methoden zur\nEntscheidungsvorbereitung, 10. Auflage, Kap. 8,9, Oldenburg, 2001.\n- Whinston, A.: Operations Research, Algorithms and Applications, Whiley&Sons, Duxbury Press,\n1994.\n- Nemhauser, G.; Wolsey, L.: Integer and Combinatorial Optimization, Wiley-Interscience, 1999.",
    "lv_sws_lecturer": "Bichler, Martin; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN0024",
    "title": "Operations Research",
    "level": "Bachelor/Master",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 105,
    "hours_presence": 75,
    "examination_achievements": "Die Modulprüfung besteht aus einer 120-minütigen Klausur, in der die Studierenden durch das Lösen von Problemstellungen ihre Fähigkeit zur Anwendung, Analyse und Beurteilung grundlegender Verfahren aus den Bereichen Entscheidungsanalyse, Lineare Optimierung, und Ganzzahlige Lineare Optimierung demonstrieren. Einerseits werden praktische Aufgabenstellungen als mathematisches Optimierungsproblem modelliert. Andererseits zeigen die Teilnehmer durch das Beantworten theoretischer Fragestellungen, dass sie die Funktionsweise und die mathematischen Eigenschaften verschiedener Algorithmen verstanden haben. Das Beantworten der Problem- und Fragestellungen erfordert eigene Formulierungen.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0015 Diskrete Strukturen, Mathematische Behandlung der Naturwissenschaften",
    "content": "Entscheidungsanalyse (Entscheidungsbäume, MCDM, InvesMMonsrechnung), Lineare Optimierung, Modellierung betrieblicher Optimierungsprobleme (Transportproblem, Zuweisungsproblem, Zielprogrammierung), Simplex (Normalform, Basivariablen und Basislösungen, Primaler Simplex-Algorithmus, Simplex Tableau, Revidierter Simplex), Sensitivitätsanalyse und Dualitätstheorie, Ganzzahlige Programmierung (Branch-and- Bound, Komplexitätstheorie, Modellierung ganzzahliger Probleme), Netzplantechnik und Netzflussprobleme",
    "learning_outcomes": "Nach Absolvieren des Moduls kennen die Teilnehmer grundlegende Verfahren aus den Bereichen Entscheidungsanalyse, Lineare Optimierung, und Ganzzahlige Lineare Optimierung. Sie sind IN0024: Operations Research | Operations Research in der Lage betriebliche Planungs- und Entscheidungsprobleme wie z.B. Transportprobleme oder Netzflussprobleme zu modellieren und verstehen Algorithmen, um diese Probleme effektiv zu lösen. Studierende kennen die wesentlichen Eigenschaften dieser Algorithmen und betriebswirtschaftlich relevante Anwendungen.",
    "teaching_methods": "Vorlesung und inhaltlich abgestimmte Übung bilden das Lehrformat. In der Vorlesung trägt der Dozent den Inhalt vor und präsentiert Anwendungsbeispiele aus der Praxis der betrieblichen Planung interaktiv. Die Studierenden werden somit mit den betriebswirtschaftlichen Planungs und Entscheidungsprobleme vertraut gemacht und lernen die Anwendungen von entsprechenden Optimierungsverfahren zu unterscheiden. In der Übung bearbeiten die Studierenden in betreuter Einzel- und Gruppenarbeit Übungsaufgaben und werten die entsprechenden quantitativen Verfahren aus. Dadurch lernen die Studierenden betriebliche Planungs- und Entscheidungsprobleme zu bewerten und das konstruktive Kritisieren der eigenen Arbeit.",
    "media": "Skriptum, Übungsblätter, PowerPoint und E-Learning Plattform",
    "literature": "- Domschke, W.; Drexl, A.: Einführung in Operations Research, 5. Auflage, Kap. 1-6, Springer,\n2002.\n- Zimmermann, W.; Stache, U.: Operations Research, Quantitative Methoden zur\nEntscheidungsvorbereitung, 10. Auflage, Kap. 8,9, Oldenburg, 2001.\n- Whinston, A.: Operations Research, Algorithms and Applications, Whiley&Sons, Duxbury Press,\n1994.\n- Nemhauser, G.; Wolsey, L.: Integer and Combinatorial Optimization, Wiley-Interscience, 1999.",
    "lv_sws_lecturer": "Bichler, Martin; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nOperations Research (IN0024) (Vorlesung, 3 SWS)\nBichler M\nOperations Research - Übungen (IN0024) (Übung, 2 SWS)\nBichler M [L], Bürgermeister J, Dobos T, Oberlechner M, Pieroth F"
  },
  {
    "module_id": "IN0025",
    "title": "Information Technologies and Society (IT and Society)",
    "level": "Bachelor",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Die Modulprüfung besteht aus einer 90-minütigen Klausur, in der die Studierenden die Fähigkeit zur systematischen Analyse und Bewertung von gesellschaftsbezogenen Fragestellungen im Rahmen der fortschreitenden Entwicklung von IT aufzeigen sollen.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Keine Voraussetzungen",
    "content": "Die Vorlesung bietet einen Überblick über die Rolle von IT in der Gesellschaft. Besondere Schwerpunkte werden gelegt auf die Wechselwirkungen zwischen modernen Informations- und Datenanalysetechnologien und der Privatheit des Einzelnen und der Gesellschaft, und der Wahrung von Sicherheit von Daten durch Nutzer und Unternehmen. Des Weiteren werden ökonomische Auswirkungen von IT und Prinzipien der Regulierung der Auswirkungen von IT (auch an konkreten Fallbeispielen) besprochen.",
    "learning_outcomes": "Die Vorlesung befähigt Studenten soziale, ökonomische und ethische Dimensionen von Informationstechnologien zu verstehen. Durch die Auseinandersetzung mit Konzepten der Sozialwissenschaften lernen die Studenten das kritische Reflektieren über den Einfluss von Informationstechnologien auf Privatheit, Vertrauen & Sicherheit, Arbeitsleben, Produktivität und Unternehmenswelt genauso wie über die Rolle von Informationstechnologien für soziale Interaktionen, Demokratie und politische Entscheidungsfindung. Die Vorlesung lehrt Studenten eine interdisziplinäre Orientierung bzgl. der Evaluierung von wichtigen IT-bezogenen Fragen, die IN0025: Information Technologies and Society (IT and Society) | Information Technologies and Society (IT and Society) in der heutigen Gesellschaft auftreten. Die Vorlesung dient Studenten dazu, Möglichkeiten und Hindernisse von IT in der Gesellschaft zu erkennen und Wege zu finden, diese Möglichkeiten zu stärken und Hindernisse zu überwinden.",
    "teaching_methods": "Die Vorlesung wird aus einem Präsentationsteil mit Fragen und Diskussionspunkten bestehen. Die Übung wird die Vorlesungsthemen weiter vertiefen mit weiteren Möglichkeiten zur Diskussion.",
    "media": "Folien/PowerPoint, Übungsblätter, Auswahl von Literatur (Online), Blog",
    "literature": "Die Vorlesung wird unterstützt durch ausgewählte Lesematerialien, welche die Interdisziplinarität\ndes Themengebietes wiederspiegeln. Lesematerialien stammen aus den Sozialwissenschaften\n(insb. Volkswirtschaftslehre/Betriebswirtschaftslehre, Psychologie, Soziologie, Ethik, und\nRechtswissenschaften). Des weiteren werden ausgewählte Materialien aus dem technischen\nBereich zur Unterstützung der Lehre genutzt (insb. Informatik und Informationswissenschaften).\nLesematerialien beinhalten akademische Literatur, aber auch informelle Literatur (insb.\nTagespresse, Magazine und Berichte von Organisationen). Die Lesematerialien werden jährlich\nangepasst, um dem Themengebiet, welches häufigen Änderungen unterliegt, gerecht zu werden.",
    "lv_sws_lecturer": "Großklags, Jens; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nInformationstechnologien und Gesellschaft (IN0025) (Vorlesung, 2 SWS)\nGroßklags J [L], Großklags J, Chen M, Ullstein C\nÜbung - Informationstechnologien und Gesellschaft (IN0025) (Übung, 2 SWS)\nGroßklags J [L], Großklags J, Chen M, Ullstein C"
  },
  {
    "module_id": "IN0031",
    "title": "Einführung in die Informatik für Games Engineering",
    "level": "Bachelor",
    "language": "Deutsch/Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 105,
    "hours_presence": 75,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer Klausur von 90 Minuten erbracht. Sie bezieht sich zu 60% auf theoretische Konzepte der Spieleentwicklung und -produktion und zu 40% auf die erlernten Werkzeuge, Praktiken und Konzepte bei der Umsetzung und Anwendung von Spielkonzepten (praktischer Teil). Die Fragen werden in Englisch gestellt; sie können in Deutsch oder Englisch beantwortet werden. Während der Klausur sind keine Unterlagen zugelassen, als Hilfsmittel kann ein Taschenrechner und ein Wörterbuch (Englisch <-> Muttersprache) benutzt werden. Wissensfragen überprüfen die Vertrautheit mit prinzipiellen Konzepten der Spieleentwicklung,\n-produktion, und technischen Grundlagen (bezogen auf den theoretischen Teil).\nKurze Programmieraufgaben, Fragen zu kurzen Programmbeispielen und Fragen zu Programmierkonzepten überprüfen die Fähigkeit, mit einer Game Engine umgehen und kleine Systeme verstehen und erweitern zu können (bezogen auf den praktischen Teil). Die erfolgreiche Bearbeitung von Programmieraufgaben wird in Form eines bewerteten Projekts als freiwillige Mid-Term-Leistung gewertet. Die Aufgaben werden im Semester verteilt ausgegeben. Die erreichten Punkte werden entsprechend der Maximalpunktzahl in eine Note umgerechnet. Ergibt die Verrechnung von 1/3 freiwillige Midtermleistung und 2/3 der Klausurnote, eine Verbesserung, wird diese als Modulnote übernommen.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Keine\nIN0031: Einführung in die Informatik für Games Engineering | Introduction to Informatics for Games Engineering",
    "content": "Grundlegende Konzepte in den Bereichen:\n- Entwicklungsgeschichte: Gaming\n- Rollen verschiedener Beitragender zur Spieleentwicklung\n- Spielgenres\n- Psychologische Grundlagen von Spielen und Ideen (Motivation, Flow, Kreativität)\n- Spielproduktion\n- Innovationen im Spielebereich\n- Ausgewählte technische Grundlagen der Spieleumsetzung (Game Engine Design, Rendering,\nTransformationen, Kollisionserkennung, Künstliche Intelligenz, Nutzerschnittstelle)\n- Im Übungsbetrieb beispielhafte Umsetzung von Spielkonzepten auf Basis einer Game Engine\ninklusive projektorientierter Anwendungen",
    "learning_outcomes": "Nach erfolgreicher Teilnahme am Modul sind die Studierenden in der Lage, die wesentlichen Schritte bei der Entwicklung und Produktion von Spielkonzepten, insbesondere im Bereich der Preproduction und Kontentgenerierung, und die grundlegenden technischen Komponenten, wie Game Loops, Kollisionssysteme, Interaktionskonzepte und Szenen Graphen, eines Computerspiels darzulegen, sowie eigene Spielideen in einer bestehenden Entwicklungsumgebung umzusetzen.",
    "teaching_methods": "Vorlesung, Übung, Aufgaben zum Selbststudium. Die Aufgaben werden wöchentlich über das Lehrportal zur Verfügung gestellt und in der darauffolgenden Übung besprochen (Musterlösung). Beides dient zur vertiefenden Wissensvermittlung und zur Selbstkontrolle der Studierenden – als Hilfestellung zur Vorbereitung auf die Klausur. In der zweiten Semesterhälfte können die Studierenden des Weiteren an einem Teamprojekt (Abschlussprojekt) teilnehmen, in welchem sie die erlernten Konzepte und Methoden aus der Vorlesung und der Übung gemeinsam in frei wählbaren Anwendungsszenarien umsetzen und diskutieren können. Die erfolgreiche Präsentation eines Demonstrators wird mit einem Bonus honoriert.",
    "media": "Powerpointfolien, Filme, Bücher, Übungsblätter, Beispieldemonstrationen",
    "literature": "Grundlagen (Pflicht):\n- Heather Maxwell Chandler, Rafael Chandler: Fundamentals of Game Development. Jones and\nBartlett, 2009 (ISBN 10: 0-7637-7895-8).\nZur Vertiefung (freiwillig):\n- Roger E. Pedersen: Game Design Foundations, 2nd edition.Wordware Publishing, Inc., 2009\n(ISBN 10:1-59822-034-9).\nIN0031: Einführung in die Informatik für Games Engineering | Introduction to Informatics for Games Engineering\n- Jesse Schell: The Art of Game Design (A Book of Lenses). Morgan Kaufmann, 2008 (ISBN\n978-0-12-369496-4).\n- Noah Wardrip-Fruin, Nick Montfort: The New Media Reader. The MIT Press, 2003 (ISBN\n978-0-262-23227-2).\n- Frank D. Luna: Introduction to 3D Game Programming with DIRECTX 10. Wordware Publishing,\nInc., 2008 (ISBN 10: 1-59822-053-5).\n- Mat Buckland: Programming Game AI by Example. Wordware Publishing, Inc., 2005 (ISBN\n1-55622-078-2).\n- Ian Millington: Game Physics Engine Development, 2nd edition. Morgan Kaufmann Publishers,\n2010 (ISBN 978-0-12-381976-5).\n- Jason Gregory: Game Engine Architecture. A K Peters, Ltd., 2009 (ISBN 978-1-56881-413-1).\n- Johan Huizinga: Homo Ludens (Vom Ursprung der Kultur im Spiel), 1938. 22. Auflage 2011,\nRowohlt Taschenbuch Verlag (ISBN 978 3 499 55434 3).",
    "lv_sws_lecturer": "Plecher, David; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nEinführung in Informatik für Games Engineering (IN0031) (Vorlesung mit integrierten Übungen, 3\nSWS)\nKlinker G [L], Klinker G\nÜbungen zu Einführung in Informatik für Games Engineering(IN0031) (Übung, 2 SWS)\nKlinker G [L], Plecher D, Liedtke S ( Weber S )"
  },
  {
    "module_id": "IN0033",
    "title": "Interaktionsmethoden und -geräte",
    "level": "Bachelor",
    "language": "Deutsch/Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 105,
    "hours_presence": 75,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer Klausur von 90 Minuten erbracht. Sie bezieht sich zu 50% auf theoretische Konzepte der Spieleentwicklung und –produktion und zu 50% auf die erlernten Werkzeuge, Praktiken und Konzepte bei der Umsetzung und Anwendung von Spielkonzepten (praktischer Teil). Die Fragen werden in Englisch gestellt; sie können in Deutsch oder Englisch beantwortet werden. Während der Klausur sind keine Unterlagen zugelassen, als Hilfsmittel kann ein Taschenrechner und ein Wörterbuch (Englisch <-> Muttersprache) benutzt werden. Wissensfragen überprüfen die Vertrautheit mit prinzipiellen Konzepten der Spieleentwicklung,\n-produktion, und technischen Grundlagen (bezogen auf den theoretischen Teil).\nKurze Programmieraufgaben, Fragen zu kurzen Programmbeispielen und Fragen zu Programmierkonzepten überprüfen die Fähigkeit, mit einer Game Engine umgehen und kleine Systeme verstehen und erweitern zu können (bezogen auf den praktischen Teil). Die erfolgreiche Bearbeitung von Programmieraufgaben wird in Form eines bewerteten Projekts als freiwillige Mid-Term-Leistung gewertet. Die Aufgaben werden im Semester verteilt ausgegeben. Die erreichten Punkte werden entsprechend der Maximalpunktzahl in eine Note umgerechnet. Ergibt die Verrechnung von 1/3 freiwillige Midtermleistung und 2/3 der Klausurnote, eine Verbesserung, wird diese als Modulnote übernommen.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0031 Einführung in Informatik für Games Engineering, IN0038 Echtzeit-Computergrafik, IN0001\nEinführung in die Informatik 1, MA0901 Lineare Algebra für Informatik\nIN0033: Interaktionsmethoden und -geräte | Interaction Methods and Devices",
    "content": "Detaillierte Behandlung von Konzepten und Geräten der Mensch-Maschine-Interaktion im Umfeld von Computerspielen\n- Übersicht über aktuelle Ein- und Ausgabegeräte und –methoden\n- Übung technischer Details einzelner Ein- und Ausgabemethoden\n- Interaktionsmetaphern für Computerspiele und deren Tauglichkeit\n- Evaluation von Spieleinteraktionen.",
    "learning_outcomes": "Nach erfolgreicher Teilnahme am Modul haben die Studierenden einen Überblick über aktuelle Interaktionsmethoden im Bereich der Computerspiele und über die damit verbundenen Geräte. Sie kennen die Prinzipien, mit denen diese Interaktionen vom Computer wahrgenommen werden, und mit denen wiederum Feedback an die Spieler gegeben wird. Weiterhin kennen sie Metaphern, welche Spiele zur Interaktion einsetzen, und wissen wie diese evaluiert werden. Sie können aktuelle Spielinteraktionen hinsichtlich der verwendeten Ein- und Ausgabeprinzipien analysieren und eigenständig neue Spielinteraktionen ableiten und implementieren.",
    "teaching_methods": "Vorlesung, Übung, Aufgaben zum Selbststudium. Die Aufgaben werden wöchentlich über das Lehrportal zur Verfügung gestellt und in der darauffolgenden Übung besprochen (Musterlösung). Beides dient zur vertiefenden Wissensvermittlung und zur Selbstkontrolle der Studierenden – als Hilfestellung zur Vorbereitung auf die Klausur. In der zweiten Semesterhälfte können die Studierenden des Weiteren an einem Teamprojekt (Abschlussprojekt) teilnehmen, in welchem sie die erlernten Konzepte und Methoden aus der Vorlesung und der Übung gemeinsam in frei wählbaren Anwendungsszenarien umsetzen und diskutieren können. Die erfolgreiche Präsentation eines Demonstrators wird mit einem Bonus honoriert.",
    "media": "Powerpointfolien, Filme, Bücher, Übungsblätter, Beispieldemonstrationen",
    "literature": "Grundlagen (Pflicht):\n- Bowman,Kruijff, Laviola, Poupyrev: 3D User Interfaces: Theory and Practice. Pearson Education,\n2004.\nzur Vertiefung (freiwillig):\n- Shneiderman, Plaisant: Designing the User Interface: Strategies for Effective Human-Computer\nInteraction. Addison-Wesley Pearson Education, 2009.\n- Nielsson: Usability Engineering. Morgan Kaufmann, 1993.\n- Norman: The Design of Everyday Things. Basic Books, 2002",
    "lv_sws_lecturer": "Plecher, David; Prof. Dr. rer. nat.\nIN0033: Interaktionsmethoden und -geräte | Interaction Methods and Devices\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nÜbungen zu Interaktionsmethoden und -geräte (IN0033) (Übung, 3 SWS)\nKlinker G [L], Dyrda D\nInteraktionsmethoden und -geräte (IN0033) (Vorlesung, 2 SWS)\nKlinker G [L], Klinker G ( Liedtke S )"
  },
  {
    "module_id": "IN0034",
    "title": "Betriebssysteme und hardwarenahe Programmierung für Games",
    "level": "Bachelor",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 105,
    "hours_presence": 75,
    "examination_achievements": "Die Modulprüfung besteht aus einer Klausur von 90 Minuten, in der die Studierenden das Verständnis des Stoffes (wie die Funktionsweise von Rechensystemen und die Verwaltung von Betriebsmitteln) durch Wiedergabe und Anwendung der gelernten Inhalte nachweisen müssen. Zudem müssen sie vorgestellte Verfahren anwenden und ihre Programmierfähigkeiten bei der Lösung kleiner Aufgaben unter Beweis stellen.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0001 Einführung in die Informatik 1, IN0006 Einführung in die Softwaretechnik",
    "content": "In der Vorlesung werden die angegebenen Inhalte vorgestellt und erläutert. In den begleitenden Übungen werden neben dem Verständnis der Inhalte die Programmierfähigkeiten erlernt und anhand von Aufgaben eingeübt:\n- Schichtenmodell und Überblick\n++ Von Neumanns Architekturkonzept: Speicher, Rechenwerk, Leitwerk, Ein-/Ausgabe ++ Hardware-Schichten: Phys. Schicht, Bauelementeschicht, Gatterschicht, Mikroarchitektur ++ Software-Schichten: Betriebssystem (Kernel, Treiber, ...), Anwendungen\n- Hardware--Software-Schnittstelle\n++ Codierung von Daten (Ganzzahlen, Gleitkommazahlen, Zeichenketten, Referenzen, zusammengesetzte Datentypen) ++ Arithmetische und logische Operationen IN0034: Betriebssysteme und hardwarenahe Programmierung für Games | Operating Systems and Hardware oriented Programming for Games ++ Speicherzugriff, Adressierung ++ Kontrollflußoperationen ++ Vektoroperationen (SIMD) ++ Prozeduraufrufe, Stack, Heap ++ Unterbrechungen und Ausnahmen\n- Mikroprozessoren\n++ Speicheranbindung, Caches ++ Pipelining (Befehlszyklus, Konflikte, Gegenmaßnahmen) ++ Mehrkern-Systeme (Zugriffskonflikte, Speicherkonsistenz)\n- Prozess- und Prozessorverwaltung\n++ Nebenläufigkeit ++ Realisierung von Prozessen ++ Scheduling und Dispating\n- Speicherverwaltung\n++ Virtueller Speicher\n- Prozesskommunikation\n++ IPC-Konzepte, Sockets\n- Ein-Ausgabe",
    "learning_outcomes": "Nach der erfolgreichen Teilnahme an diesem Modul sind die Studierenden in der Lage die Funktionsweise von modernen Rechnerarchitekturen und deren Verwaltung durch das Betriebssystem zu verstehen, Verfahren und Strategien zur Verwaltung von Betriebsmitteln anzuwenden sowie neue Entwicklungen in beiden Bereichen (Rechnerarchitekturen und Betriebssysteme), insbesondere auch im Hinblick auf den Einsatz im Games-Bereich, zu bewerten. Zudem haben sie eine Programmiersprache zur hardwarenahen Programmierung (in der Regel die Sprache C) erlernt, so dass sie bestehende Systeme verstehen und mit der sie Lösungen für Teilprobleme selber entwickeln können.",
    "teaching_methods": "In der Vorlesung werden die angegebenen Inhalte vorgestellt und erläutert. In den begleitenden Übungen werden neben dem Verständnis der Inhalte die Programmierfähigkeiten erlernt und anhand von Aufgaben eingeübt.",
    "media": "Unterlagen via moodle",
    "literature": "Andrew S. Tanenbaum: Computerarchitektur: Strukturen, Konzepte, Grundlagen, Pearson\nStudium, 2006\nHelmut Herold, Bruno Lurz, Jürgen Wohlrab: Grundlagen der Informatik, Pearson, 2012\nDavid A. Patterson, John L. Hennesy: Computer Organization and Design: The Hardware/Software\nInterfache, ARM Edition, Morgan Kaufmann, 2017\nAndrew S. Tanenbaum: Moderne Betriebssyssteme, Pearson Studium, 2009\nIN0034: Betriebssysteme und hardwarenahe Programmierung für Games | Operating Systems and Hardware oriented\nProgramming for Games\nUwe Baumgarten, H.-J. Siegert: Betiebssysteme, Eine Einführung, Oldenbourg Verlag, 2007",
    "lv_sws_lecturer": "Baumgarten, Uwe; Prof. Dr. rer. nat. habil.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN0037",
    "title": "Game Physics",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 105,
    "hours_presence": 75,
    "examination_achievements": "Die Pru#fungsleistung wird in Form einer Klausur von 90 Minuten erbracht. Wissensfragen u#berpru#fen die Vertrautheit mit Konzepten der physikalischen Simulation und physikalischen Modellen. Kurze Programmieraufgaben mit Pseudo- Code u#berpru#fen die Fa#higkeit zur algorithmischen Umsetzung und die Fa#higkeit diese in C++ zu implementieren. Einfache Rechenaufgaben u#berpru#fen die Vertrautheit mit den Berechnungen der Algorithmen.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0038 Echzeit-Computergrafik, MA0901 Lineare Algebra fu#r Informatik, MA0902 Analysis fu#r\nInformatik",
    "content": "Grundlegende Konzepte und Methoden der Bereiche: Grundlagen der Animation, Animationstechniken, Technische Mechanik (Kinematik, Dynamik, Kontaktmechanik), Starrko#rpersimulation, Methoden der Kollisionsbehandlung, Theorie der elastischen Ko#rper- Fluidsimulation, Prinzipien der numerischen Simulation, und Partikelsysteme.",
    "learning_outcomes": "Nach erfolgreichem Absolvieren des Moduls verfu#gen die Teilnehmer u#ber einfu#hrende Kenntnisse in der physikalischen Simulation realer Pha#nomene und Effekte, die in Computerspielen immer ha#ufiger zum Einsatz kommen. Sie kennen zahlreiche physikalische Modelle zur Beschreibung realer Pha#nomene, ko#nnen sie bewerten und sind in der Lage, ein geeignetes Modell fu#r die algorithmische Umsetzung auszuwa#hlen, und die notwendigen Berechnungen durchzufu#hren. Sie beherrschen die algorithmische Beschreibung der Lo#sungsmethoden, mit dem Ziel der Integration der Methoden in Echtzeitsysteme. Ein weiteres IN0037: Game Physics | Game Physics angestrebtes Lernergebnis ist die Fa#higkeit Simulationsalgorithmen und Integrationstechniken mit C++ zu implementieren.",
    "teaching_methods": "Kern des Moduls sind Vorlesungen die Powerpoint-Folien, Tafel-Anschriebe und praktische Demonstrationen umfassen. Daneben gibt es eine Reihe von vier Programmier-Aufgaben zum Selbststudium. Mit vier freiwilligen U#bungen im Verlauf des Semesters ko#nnen die Teilnehmer nachweisen, dass sie zentrale Simulationsalgorithmen und Integrationstechniken verstanden haben, und in der Lage sind diese mit C++ zu implementieren. Die vier U#bungen sind Integrationsmethoden, Rigid-Body Simulationen, Kollisionserkennung, und ein abschließendes freies Projekt (basierend auf den Vorlesungsinhalten).",
    "media": "Vorlesungsfolien, Tafelanschrieb, Übungsaufgaben",
    "literature": "- Grundlagen (Pflicht):\n++ David M. Bourg: Physics for game developers, O´Reilly Media 2001 (ISBN 10:0-596-00006-5).\n- zur Vertiefung (freiwillig):\n++ David H. Eberly: Game Physics, Morgan Kaufmann 2003 (ISBN 13: 978-1558607408).\n++ David H. Eberly: 3D game engine design: a practical approach to real++time computer\ngraphics, Morgan Kaufmann 2001, ISBN 1558605932, 9781558605930.",
    "lv_sws_lecturer": "Thürey, Nils; Prof. Dr.-Ing.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nGame Physics (IN0037) (Vorlesung, 3 SWS)\nThürey N [L], Köhler F, Schnell P, Thürey N, Weitz S, Winchenbach R"
  },
  {
    "module_id": "IN0038",
    "title": "Echtzeit-Computergrafik",
    "level": "Bachelor",
    "language": "Deutsch/Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer Klausur von 75 Minuten erbracht. In dieser soll nachgewiesen werden, dass die Studierenden mit den Grundbegriffen und den grundsätzlichen Konzepten und Methoden im Bereich der interaktiven Computergrafik vertraut sind. Dies wird über Wissensfragen und einfache Transferaufgaben überprüft.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Einführung in die Programmierung und gleichzeitiger Besuch des Moduls IN0039 Praktikum:\nEchtzeit-Computergrafik",
    "content": "Das Modul ist begleitend zum Modul IN0039 Praktikum Echtzeit-Computergrafik. In der Vorlesung werden grundlegende Algorithmen der Echtzeit-Grafikprogrammierung und der Simulation der Bewegungsdynamik starrer Körper besprochen. Themen sind: Polygon-Modelle, Beleuchtungssimulation und Shading, Texture-Mapping, Rasterisierungs-basierte Graphikpipeline, Bewegungsdynamik, Partikel-Systeme, Kollisionsdetektion und -Auflösung.",
    "learning_outcomes": "Die Teilnehmer erwerben vertiefende Kenntnisse im Bereich der Spieleentwicklung mit dem Fokus auf Echtzeitgrafik, physikalische Bewegungssimulation und Kollisionsdetektion. Nach dem Besuch des Moduls kennen die Teilnehmer die wesentlichen Komponenten von Game Engines und verstehen deren Zusammenspiel. Sie verstehen die grundlegenden Prinzipien der Rasterisierungs-basierten Rendering-Pipeline, sind mit einfachen Methoden zur Simulation von Partikelbewegungen vertraut und kennen die grundlegenden Methoden zur Detektion von IN0038: Echtzeit-Computergrafik | Real-time Computer Graphics Kollisionen zwischen dynamischen Körpern. Die Studierenden demonstrieren die Fähigkeit, die erlernten Konzepte und Methoden anzuwenden und anwendungsspezifisch zu erweitern.",
    "teaching_methods": "Das Modul besteht aus einer Vorlesung, in der der Dozent die spezifischen Inhalte erklärt, auf relevante Literaturstellen hinweist und an der Tafel bzw. am Computer Beispiele zum vertieften Verständnis der vermittelten Konzepte und Methoden demonstriert.",
    "media": "Vorlesungsfolien, Tafelanschrieb, Online-Übungen und -Demonstrationen",
    "literature": "Gregory: Game Engine, AK Peters\nAkenine-Möller, Haines: Real-time Rendering, AK Peters\nEberly: 3D Games Engine Design, Morgan Kaufmann\nFoley, Van Dam, Feiner, Hughes: Computer Graphics: Principles and Practice, Addison-Wesley,\n2nd edition in C",
    "lv_sws_lecturer": "Westermann, Rüdiger; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nEchtzeit-Computergrafik (IN0038) (Vorlesung, 4 SWS)\nWestermann R, Bukenberger D, Liang H, Weitz S"
  },
  {
    "module_id": "IN0039",
    "title": "Praktikum: Echtzeit-Computergrafik",
    "level": "Bachelor",
    "language": "Deutsch/Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 120,
    "hours_presence": 30,
    "examination_achievements": "Auf wöchentlichen Übungsblättern werden überwiegend Programmieraufgaben gestellt, die von den Teilnehmern in elektronischer Form abgegeben werden. Durch kleine Programmieraufgaben wird überprüft, ob die Studierenden die grundlegenden Konzepte der Grafikprogrammierung verstanden haben und grundlegende Grafikalgorithmen in C++ und mit aktuellen Grafik-APIS programmiertechnisch umsetzen können. Um den eigenen Anteil an den Lösungen nachweisen zu können, müssen die Teilnehmer jederzeit in der Lage sein, ihre Lösungen auch mündlich zu präsentieren. Insgesamt werden 8 Übungsblätter ausgegeben. Auf die bestandene Klausur kann ein Notenbonus von 0.3 (bei Erreichen von 31%-60% der Punkte aus den Übungen), 0.6 (bei Erreichen von 61%-80% der Punkte aus den Übungen), oder 1.0 (bei Erreichen von > 80% der Punkte aus den Übungen) erhalten werden.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0002 Praktikum: Grundlagen der Programmierung und gleichzeitiger Besuch des Moduls IN0038\nEchtzeit-Computergrafik",
    "content": "Das Modul ist begleitend zum Modul IN0038. Die Studierenden entwickeln und programmieren kleinere Beispielanwendungen unter Anleitung. Hierbei erlernen die Studierenden die grundlegenden Konzepte von Graphik-Schnittstellen und der Grafikprogrammierung auf Grafikkarten mit Direct3D und C++ sowie die Grundlagen der Shaderprogrammierung. Die Studierenden programmieren in kleinen Teams unter Verwendung gängiger Version-Control Systeme. IN0039: Praktikum: Echtzeit-Computergrafik | Practical Course: Real-time Computer Graphics",
    "learning_outcomes": "Die Teilnehmer beherrschen die Grundprinzipien der Programmiersprache C++ und der Graphik- Schnittstelle Direct3D. Sie können Programme eigenständig entwickeln und dabei wesentliche Konzepte der Programmierung und der interaktiven 3D Grafik auf einem grundlegenden, praxis- orientierten, aber wissenschaftlichen Niveau anwenden. Nach dem Besuch des Moduls kennen die Teilnehmer die wesentliche Funktionalität von Direct3D und können diese zur Programmierung von interaktiven Grafik-Anwendungen in C++ nutzen.",
    "teaching_methods": "Das Praktikum wird in wöchentlichen Tutorgruppen abgehalten. Der Tutor bespricht die Lösungen der Aufgaben des letzten Übungsblattes und gibt Hinweise zu den Aufgaben des aktuellen Übungsblattes. Daran anschließend arbeiten die Studierenden in Kleingruppen am Computer an den Lösungen der aktuellen Übungsaufgaben. Da nicht alle Aufgaben im Rahmen der Tutorgruppe bearbeitet werden können, sollen die Studierenden die verbleibenden Aufgaben als Hausaufgabe lösen.",
    "media": "Tutorvortrag, interaktives Problemlösen, Diskussion",
    "literature": "Gregory: Game Engine, AK Peters\nAkenine-Möller, Haines: Real-time Rendering, AK Peters\nEberly: 3D Games Engine Design, Morgan Kaufmann",
    "lv_sws_lecturer": "Westermann, Rüdiger; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nPraktikum: Echtzeit-Computergrafik (IN0039) (Praktikum, 2 SWS)\nBukenberger D, Neuhauser C, Niedermayr S, Weitz S, Westermann R"
  },
  {
    "module_id": "IN0040",
    "title": "Social Gaming",
    "level": "Bachelor",
    "language": "Deutsch/Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Prüfungsart: Klausur und freiwillige benotete Midtermleistung Die Prüfungsleistung wird in Form einer 90 min. Klausur erbracht. Die Klausur überprüft zum einen anhand von Wissensfragen, inwieweit die Studierenden einen Überblick über die Social-Computing- und Social-Gaming-Konzepte/-Modelle, -Techniken/- Algorithmen und -Denkweisen/Methodiken, wie sie im Abschnitt „Inhalt“ genannt werden, gewonnen haben, dass sie mit diesen vertraut sind, diese verstanden haben und reproduzierend wiedergeben können. Die Klausur überprüft zum anderen anhand einfacher kleinerer Aufgaben, inwieweit die Studierenden in der Lage sind, die Social-Computing- und Social-Gaming- Techniken/-Algorithmen, wie sie im Abschnitt „Inhalt“ genannt werden, grundlegend anzuwenden. Eine weiter- und tiefergehende Überprüfung der im Abschnitt „Lernergebnisse“ genannten Fähigkeiten zur Anwendung der behandelten Social-Computing- und Social-Gaming- Konzepte/-Modelle, -Techniken/-Algorithmen und -Denkweisen/Methodiken zur Konzeption und Implementierung von sozialen Spielen und freizeitbezogenen Social Computing Anwendungen im Team findet im Praktikum Social Gaming (IN0041) statt, das parallel besucht werden soll. Den Studierenden werden zu jedem Thema eine größere Zahl von Kontrollfragen und Kleinaufgaben zur Lernkontrolle und Prüfungsvorbereitung zur Verfügung gestellt. Ein Teil dieser Kontrollfragen wird in leicht abgewandelter Form auch in der Klausur geprüft, um so einen Anreiz zur Auseinandersetzung mit dem Stoff anhand dieser Kontrollfragen zu schaffen. Im Rahmen der Übungen gibt es Hausaufgaben (in Form von 6-7 Hausaufgaben- Aufgabenblättern), die entweder abgegeben und als freiwillige benotete Midtermleistung mit einer Gesamtnote benotet werden können (Regelfall) oder die abgegeben werden können und für deren erfolgreiche Abgabe ein 0,3 Notenbonus gewährt wird (Alternativmöglichkeit). Sofern die Alternativmöglichkeit statt des Regelfalls angeboten werden soll, wird dies den Studierenden rechtzeitig vor Beginn bekanntgegeben. IN0040: Social Gaming | Social Gaming Für die Alternativmöglichkeit müssen zur Erreichung des 0,3 Notenbonus alle Aufgabenblätter als ausreichend bearbeitet bewertet worden sein (Bewertungsalternativen: ausreichend bearbeitet, nicht ausreichend bearbeitet). Für den Regelfall werden die Abgaben zu den einzelnen Blättern als Prüfungsleistung individuell benotet (Notenstufen 1 (sehr gut bearbeitet), 2 (gut bearbeitet), 3 (befriedigend bearbeitet), 4 (ausreichend bearbeitet) und 5 (nicht ausreichend bearbeitet). Aus den Einzelnoten wird eine gleichgewichtete Gesamtnote als freiwillige benotete Midterm-Leistung gebildet. Sofern diese gegenüber der bestandenen Klausur notenverbessernd wirkt, besteht die Modulnote aus dem gleich gewichteten Durchschnitt aus der Klausurnote und der freiwilligen benoteten Midterm- Leistung.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Empfohlene Voraussetzungen sind die Studieninhalte des ersten bis dritten Fachsemesters. Das\nPraktikum Social Gaming (IN0041) sollte gleichzeitig besucht werden.",
    "content": "In dem Modul IN0040 werden beispielhaft folgende Inhalte behandelt:\n- Ludologische Grundbegriffe sozialer Spiele (Konzepte und Modelle)\n- Grundlagen Social Computing, Social Media, Web2.0, (Mobile, Decentralized) Social Networking,\nsozialer Kontext (jeweils algorithmisch verarbeitbare Konzepte und Modelle sowie grundlegende Denkweisen und Methodiken)\n- Formen sozialer Spiele und freizeitbezogener Social Computing Anwendungen im Web\n(Anwendung der besprochenen Konzepte und Modelle)\n- Grundlagen Soziometrie: Zentralität: Konzepte, Modelle und Algorithmen\n- Grundlagen Soziometrie: Dichte Subnetzwerke: Konzepte, Modelle und Algorithmen\n- Grundlagen Soziometrie: Graph Clustering: Konzepte, Modelle und Algorithmen\n- Metrische Clustering Techniken für Social Computing / Social Gaming Anwendungen\n- Metriken, Eigenschaften und Modelle realer Netzwerke (Small Worlds etc.). Algorithmen die diese\nMetriken, Eigenschaften und Modelle verwenden.\n- Konzepte und Modelle für soziale Beziehungen in Raum und Zeit\n- Grundlagen des Social Signal Processing: Konzepte, Modelle und Algorithmen und\nAnwendungen.\n- Grundlagen Spieltheorie: Konzepte und Algorithmen\n- Optional: Visualisierung von statischen und dynamischen Netzwerken: Konzepte und\nAlgorithmen\n- Optional: Social Semantic Web: Konzepte und Algorithmen",
    "learning_outcomes": "Nach der erfolgreichen Teilnahme am Modul sind die Studierenden in der Lage, die im Inhalt genannten Konzepte/Modelle, Techniken/Algorithmen und Denkweisen/Methodiken des Social Computing und Social Gaming und bestehender und möglicher Anwendungen (insbesondere IN0040: Social Gaming | Social Gaming im Bereich Social Gaming) zu verstehen. Sie haben darüber einen Überblick gewonnen, um diese im Team in der praktischen Konzeption und Implementierung eigener sozialer Spiele und freizeitbezogener Social Computing Anwendungen anwenden zu können, die insbesondere individuelle und soziale Kontexte von Spielern intelligent einbeziehen. Zum anderen sollen sie in die Lage versetzt werden, die im Inhalt aufgeführten Konzepte/Modelle, Techniken/Algorithmen und Denkweisen/Methodiken auch in der Forschung zum Thema Social Gaming / Social Computing anwenden zu können. Hierzu zählt insbesondere die Fähigkeit, entsprechende Fachpublikationen lesen, verstehen und im Hinblick auf ihre Anwendung im Bereich soziale Spiele bewerten zu können sowie die Fähigkeit, auch eigene Algorithmen und abstraktere soziotechnische Lösungsansätze für Social Gaming / Social Computing Probleme (in Zusammenhang mit den genannten Inhalten, insbesondere im Hinblick auf die intelligente Nutzbarmachung sozialer Kontexte) entwickeln zu können.",
    "teaching_methods": "Vorlesung und praktische Übungen (bspw. Erfassen und Analysieren von Daten, Auswertung mit Hilfe eigener Programme und Fremdsoftware), die blockweise in der zweiten Semesterhälfte durchgeführt werden und die Anwendung von Konzepten und Methoden aus der Vorlesung einüben. Die Übungen werden in entsprechenden Präsenzveranstaltungen vorgestellt und mit Hilfe von Diskussionsforen in geeigneten E-Learning Plattformen betreut.",
    "media": "Folienpräsentation, Tafelanschrieb, Vorlesungsaufzeichnung, Diskussionsforen in E-Learning\nPlattformen.",
    "literature": "Originalarbeiten, Übersichtsartikel und Kapitel aus Lehrbüchern, die im Modul als empfohlene\nLiteratur zu den jeweiligen Themen bekannt gegeben werden und den Studierenden online zur\nVerfügung gestellt werden.\n- U.Brandes, T. Erlebach “Fundamentals” in U.Brandes, T. Erlebach (Eds.): Network Analysis;;\nSpringer LNCS 3418, 2004\n- Bishop, C. „Pattern Recognition and Machine Learning“, Springer 2006, chapter 9\n- M. Newman: The structure and function of complex networks, SIAM review pp167--256, 2003\n- David Liben-Nowell, Jasmine Novak, Ravi Kumar, Prabhakar Raghavan, and Andrew Tomkins.\nGeographic Routing in Social Networks. In Proceedings of the National Academy of Sciences,\n102(33):11623-11628, August 2005\n- Vinciarelli, A. and Pantic, M. and Bourlard, H.: “Social signal processing: Survey of an emerging\ndomain”, Image and Vision Computing}, 27(12), pp.1743—1759, 2009\n- D.Fudenberg, J.Tirole: Game Theory; MIT Press, 1991",
    "lv_sws_lecturer": "Klinker, Gudrun Johanna; Prof. i.R.\nIN0040: Social Gaming | Social Gaming\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nSocial Gaming (IN0040) (Vorlesung mit integrierten Übungen, 4 SWS)\nGroh G"
  },
  {
    "module_id": "IN0041",
    "title": "Praktikum: Social Gaming",
    "level": "Bachelor",
    "language": "Deutsch/Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 120,
    "hours_presence": 30,
    "examination_achievements": "Prüfungsart: Übungsleistung Studierende arbeiten in Kleingruppen an zwei aufeinander aufbauenden Projektaufgaben und designen und implementieren dabei Elemente sozialer Spiele. In der ersten Projektaufgabe designen sie mit den gelernten Methoden (bspw. Sketching, Videos, Papier-Prototypen, Storyboards) Elemente von mobilen sozialen Spielen und konzipieren schließlich ein mobiles soziales Spiel, das dann als zweite Projektaufgabe auf der Basis eines vorgegebenen Gerüsts aus Server- und Mobilclient-Komponenten implementieren. Die Gruppen geben ihre in den Aufgabenbeschreibungen spezifizierten Projektergebnisse (Programmcode, Entwurfsdokumente (Videos, Sketches etc.) und Daten) in geeigneter Form ab und dokumentieren dabei detailliert die Beiträge der einzelnen Gruppenmitglieder. Jedes Gruppenmitglied erhält eine Einzelnote für jede Projektaufgabe und daraus resultierend eine Gesamtnote für die Veranstaltung. Die Studierenden weisen durch erfolgreiches Bearbeiten der Aufgaben nach, dass sie soziale Spiele und Elemente von sozialen Spielen eigenständig in Teams konzipieren und implementieren können und dabei Entwürfe bewerten und technologische Entscheidungen treffen können. Sie weisen insbesondere nach, dass sie Konzepte, Techniken und -Denkweisen aus dem Modul IN0040 Social Gaming anwenden können, sich in neue Technologien schnell einarbeiten können und elementares Software-Engineering in kleinen Teams praktisch anwenden können.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Empfohlene Voraussetzungen sind die Studieninhalte des ersten bis dritten Fachsemesters. Das\nModul Social Gaming (IN0040) sollte gleichzeitig besucht werden.\nIN0041: Praktikum: Social Gaming | Practical Course: Social Gaming",
    "content": "In dem Modul IN0041 werden beispielhaft folgende Inhalte behandelt:\n- Design-Methoden für soziale Spiele und insbesondere mobile soziale Spiele (bspw. Sketching)\n- Anwendungen für Modelle sozialen Kontexts in (mobilen) sozialen Spielen in eigenen\nImplementierungen in Java.\n- Design eigener Formen sozialer Spiele und freizeitbezogene Social Computing Anwendungen\nim Web, insbesondere Social Networking Games, Location-Aware Mobile Social Games,-Socially- Aware Mobile Social Games\n- Programmierung von mobilen Endgeräten und Serverkomponenten für Social Games und\nfreizeitbezogene Social Computing Anwendungen",
    "learning_outcomes": "Nach erfolgreicher Teilnahme an diesem Modul besitzen die Studierenden die Fähigkeit, die in dem Modul Social Gaming (IN0040) erworbenen Grundkenntnisse der Konzepte/-Modelle, Techniken/-Algorithmen und Denkweisen/Methodiken des Social Computing für die Konzeption und Implementierung von (insbesondere mobilen) sozialen Spielen und freizeitbezogenen Anwendungen, die individuelle und soziale Kontexte von Spielern intelligent einbeziehen, anwenden zu können. Die Studierenden können Methoden zum Design von sozialen Spielen anwenden. Sie haben ihre in den ersten Semestern erworbenen Fähigkeiten im Programmieren (insbesondere in Java) vertieft und erweitert und praktische Erfahrungen im Software Engineering in kleinen Teams gewonnen. Sie haben die Fähigkeit gewonnen, sich benötigte Technologien (bspw. Umgang mit Geo-Informationssystemen in Bezug auf Location-based Mobile Social Games) schnell und effizient in dem Maße aneignen zu können, wie es für die praktische Lösung von Aufgaben im angestrebten Feld nötig ist. Sie können Software für mobile Android Endgeräte und Serverkomponenten für Social Games und freizeitbezogene Social Computing Anwendungen entwickeln.",
    "teaching_methods": "Die Aufgaben und technologische Aspekte zu ihrer Lösung werden in entsprechenden Präsenzveranstaltungen vorgestellt. Tutoren betreuen eine kleine Zahl von Studierendengruppen im Semesterverlauf mit Hilfe von Diskussionsforen und anderen elektronischen Kommunikationsformen in geeigneten E-Learning Plattformen. Die Studierenden tauschen sich darüber hinaus auch gruppenübergreifend ebenfalls intensiv über diese Medien aus und helfen sich gegenseitig bei auftretenden Problemen.",
    "media": "Folienpräsentation, Präsenzterminaufzeichnung, Diskussionsforen in E-Learning Plattformen.",
    "literature": "Originalarbeiten, Übersichtsartikel, Kapitel aus Lehrbüchern, technologische Tutorials und Videos,\ndie den Studierenden online zur Verfügung gestellt werden.\nIN0041: Praktikum: Social Gaming | Practical Course: Social Gaming\n- U.Brandes, T. Erlebach “Fundamentals” in U.Brandes, T. Erlebach (Eds.): Network Analysis;;\nSpringer LNCS 3418, 2004\n- Bishop, C. „Pattern Recognition and Machine Learning“, Springer 2006, chapter 9\n- David Beazley: Python Essential Reference, Safari Books 2013\n- C. Rossant: Learning IPython for Interactive Computing and Data Visualization, Packt Publishing,\nOctober 2015\n- Nathan Eagle and Alex (Sandy) Pentland. Reality mining: sensing complex social systems.\nPersonal Ubiquitous Comput. 10, 4 (March 2006)\n- Desrosiers, C., & Karypis, A: Comprehensive Survey of Neighborhood-based Recommendation\nMethods, 2011 in: Ricci et al (eds.) \"Recommender Systems Handbook\", Springer 2011",
    "lv_sws_lecturer": "Klinker, Gudrun Johanna; Prof. i.R.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nPraktikum Social Gaming (IN0041) (Praktikum, 2 SWS)\nGroh G"
  },
  {
    "module_id": "IN1503",
    "title": "Advanced Programming",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "The assessment consists of a final exam (75min) and of an optional bonus assignments (project work). In the final written exam, through free text, code analysis, and short code development questions, participants can demonstrate that they are able to develop scientific computing software in C+ +, balancing efficiency and maintainability. They demonstrate that they can choose fitting built-in types and decompose problems into functions, they can explain the basic memory layout and apply appropriate C++ techniques for dynamic resource management, they can solve common programming problems using object-oriented techniques, they can apply generic programming techniques to reduce code duplication, they can apply common performance evaluation, modeling, and optimization techniques and can analyze and compare different implementations with respect to their performance. They are additionally given excerpts from the online C++ documentation (which they use throughout the semester) and they use these excerpts to demonstrate that they can make use of fitting STL algorithms in their programs. Finally, via multiple-choice questions, they demonstrate that they can recall and compare development tools essential for working with complex scientific software projects. A hand-written sheet of A4 paper is allowed as a course summary in the final exam. In the bonus project assignment, the participants demonstrate that they can apply the concepts of the course to develop small programming projects collaboratively, in pairs, or by themselves, using development tools essential for working with complex scientific software projects. The final grade is defined by the final exam grade and by the optional bonus assignments (pass/ fail, 0.3 grade benefit, provided a passing exam grade). IN1503: Advanced Programming | Advanced Programming",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Competence in any programming language. Familiarity with statically-typed languages (e.g. C++,\nC, Fortran, Java) and/or object-oriented languages (e.g. C++, Java, Python) is helpful.",
    "content": "- Von Neumann architecture\n- Variables and built-in data types in C++, floating point representation, arrays and vectors, ranged-\nfor loops\n- Prominent Software Failures in Computational Science\n- Functions: arguments, call-by-value/-reference, overloading, recursion, anonymous functions\n(lambda)\n- Resource management: references and pointers, managing dynamically allocated memory,\nmemory layout (stack and free store), avoiding memory leaks, iterators\n- Build time: preprocessor, compiler, and linker, compile-time calculation (constexpr), header files,\nmodules, build systems\n- Object oriented programming: classes, visibility, essential operators (constructor, destructor,\nassignment, copy, move), operator overloading, classes managing dynamic memory, member initialization, inheritance, virtual functions, runtime polymorphism\n- Generic programming: function templates, class templates, non-type template parameters,\ntemplate specialization, constraints and concepts\n- The C++ Standard Library: containers, iterator types, STL algorithms, ranges, execution policies.\n- Performance modelling: cache concepts, pipelining, out-of-order execution, roofline model\n- Code optimization: profiling, compiler optimizations, function inlining, avoiding expensive\ncomputations, memory alignment, loop transformations\n- Vectorization: levels of parallelization, superscalar architectures, SIMD instructions and registers,\nauto-vectorization, structure of arrays, array of structures, intrinsics\n- Legacy and future of C++\n- Contributing to a free software project",
    "learning_outcomes": "After successful completion of this module, participants are able to develop software for scientific computing in C++, balancing performance and maintainability. More specifically, they are able to:\n- choose fitting built-in types and decompose problems into functions;\n- list prominent software failures (frequently with crucial consequences) in Computational Science\nrelated to data types and their usage and are able to explain the sequence of events as well as their causalities;\n- explain the basic memory layout and apply appropriate C++ techniques for dynamic resource\nmanagement;\n- solve common programming problems using object-oriented techniques;\nIN1503: Advanced Programming | Advanced Programming\n- apply generic programming techniques to reduce code duplication;\n- apply common performance evaluation, modeling, and optimization techniques and can analyze\nand compare different implementations in respect to their performance;\n- make use of given parts of the C++ documentation to choose and apply fitting STL algorithms in\ntheir programs; and\n- use development tools essential for working with complex scientific software projects.",
    "teaching_methods": "This module comprises lectures and accompanying exercises. The contents of the lectures will be taught by talks and presentations. Students will be encouraged to study literature and to get involved with the topics in depth. In the exercises, concrete problems will be solved - partially in teamwork - and selected examples will be discussed.",
    "media": "Slides, whiteboard, in-class quizzes, interactive code examples, programming exercises",
    "literature": "C++ Core Guidelines: https://isocpp.github.io/CppCoreGuidelines\nC++ Reference: https://en.cppreference.com/\nBjarne Stroustrup: Principles and Practice Using C++\nBjarne Stroustrup: A Tour of C++\nGeorg Hager, Gerhard Wellein: Introduction to High Performance Computing for Scientists and\nEngineers\nT. Huckle and T. Neckel: Bits and Bugs: A Scientific and Historical Review of Software Failures in\nComputational Science",
    "lv_sws_lecturer": "Bungartz, Hans-Joachim; Prof. Dr. rer. nat. habil.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nÜbungen zu Advanced Programming (IN1503) (Übung, 2 SWS)\nBungartz H [L], Chourdakis G, Narvaez Rivas S\nAdvanced Programming (IN1503) (Vorlesung, 2 SWS)\nBungartz H [L], Chourdakis G, Narvaez Rivas S, Neckel T"
  },
  {
    "module_id": "IN2001",
    "title": "Algorithms for Scientific Computing",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 8,
    "hours_total": 240,
    "hours_self_study": 150,
    "hours_presence": 90,
    "examination_achievements": "Type of Assessment: The exam takes the form of a 120 minutes written exam. The examination consists of a written exam of 120 minutes in which students show that they are able to find solutions for algorithmic problems arising in the field of scientific computing in a limited time. Questions and small tasks concerning code are used to test the student´s knowledge on known and related hierarchical methods as well as their ability to implement them. Example algorithms and questions are used to examine the capability of analyzing the efficiency of algorithms and the accuracy of a given method.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "",
    "content": "Discrete Fourier transform and related transforms\n- FFT: derivation and implementation\n- Fast discrete cosine/sine transforms: derivation and implementation via FFT\n- Applications: multi-dimensional data (images, video, audio) and FFT-based solvers for linear\nsystems of equations Space-filling curves\n- Peano- and Hilbert curves: representation by algebraic and grammatical means\n- Applications: organisation of multi-dimensional data; parallel, adaptive, and cache oblivious\nalgorithms IN2001: Algorithms for Scientific Computing | Algorithms for Scientific Computing Hierarchical numerical methods\n- Hierarchical bases for one- and multi-dimensional problems\n- Computational cost versus accuracy; Sparse Grids\n- Adaptive representation of continuous data\n- Applications: numerical quadrature, differential equations\n- Outlook: multigrid methods, wavelets",
    "learning_outcomes": "At the end of the module, students are able to identify, explain, and implement selected hierarchical methods that are of particular interest to the informatical aspects of scientific computing because of their algorithmic structure and their significance for practical applications. Participants can analyse and judge the efficiency of such methods by deriving statements about the required computational cost and - where applicable - the achieved accuracy and by comparing them with corresponding results for other methods. The students are able to transfer the methodology to new methods for related problems.",
    "teaching_methods": "This module comprises lectures and accompanying tutorials. The contents of the lectures will be taught by talks and presentations. Students will be encouraged to study literature and to get involved with the topics in depth. In the tutorials, concrete problems will be solved - partially in teamwork - and selected examples will be discussed.",
    "media": "Slides, whiteboard, exercise sheets",
    "literature": "- W.L. Briggs, Van Emden Henson, The DFT - An Owner's Manual for the Discrete Fourier\nTransform, SIAM, 1995\n- Charles van Loan, Computational Frameworks for the Fast Fourier Transform, SIAM, 1992\n- M. Bader, Space-Filling Curves - An Introduction with Applications to Scientific Computing,\nSpringer-Verlag, 2013\n- H. Sagan, Space-Filling Curves, Springer-Verlag, 1994\n- H.-J. Bungartz, Skript Rekursive Verfahren und hierarchische Datenstrukturen in der numerischen\nAnalysis, http://www5.in.tum.de/lehre/vorlesungen/algowiss/Bungartz_HierVerf.ps.gz\n- H.-J. Bungartz, M. Griebel: Sparse Grids, Acta Numerica, Volume 13, p. 147-269. Cambridge\nUniversity Press, May 2004",
    "lv_sws_lecturer": "Bungartz, Hans-Joachim; Prof. Dr. rer. nat. habil.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nAlgorithms for Scientific Computing (IN2001) (Vorlesung mit integrierten Übungen, 6 SWS)\nBader M [L], Bader M, Gaddameedi K, Wille M\nIN2001: Algorithms for Scientific Computing | Algorithms for Scientific Computing"
  },
  {
    "module_id": "IN2002",
    "title": "Algorithms for Scientific Computing II",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 4,
    "hours_total": 120,
    "hours_self_study": 75,
    "hours_presence": 45,
    "examination_achievements": "Type of Assessment: written exam (90 minutes) In the exam students should prove to be able to identify a given problem and find solutions within limited time. The examination will completely cover the content of the lectures. The answers will require own formulations. In addition, questions requiring short calculations may be posed. Exam questions evaluate the participants' capability to adapt numerical methods to ambitious applications from the practice of scientific computing involving advanced problems and methods in scientific computing. Exam tasks test the students' knowledge on hierarchical aspects.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "",
    "content": "Courses of this module exist in three different specifications:\n- Sparse Matrices (Huckle):\n++ Data structures, Sparsity Graphs ++ Sparse BLAS ++ Reordering ++ Direct solution of linear equations and algebraic pivoting ++ Iterative solution of linear equations and preconditioning.\n- Scientific Computing (Mendl):\n++ Introduction to quantum mechanics ++ Bell inequalities IN2002: Algorithms for Scientific Computing II | Algorithms for Scientific Computing II ++ Quantum circuits and algorithms ++ Quantum error correction ++ Mapping of NP problems to quantum ground states ++ Numerical methods for quantum systems\n- Scientific Computing (Bungartz):\n++ Molecular dynamics simulation ++ Sparse grid methods ++ Algebraic multigrid methods",
    "learning_outcomes": "At the end of the module, students are able to adapt numerical methods to ambitious applications from the practice of scientific computing. They understand and are familiar with advanced problems and methods in scientific computing. These advanced methods comprise in particular hierarchical aspects that students are able to understand, explain and apply to more complex applications.",
    "teaching_methods": "This module comprises lectures and accompanying tutorials. The contents of the lectures will be taught by talks and presentations. Students will be encouraged to study literature and to get involved with the topics in depth. In the tutorials, concrete problems will be solved - partially in teamwork - and selected examples will be discussed.",
    "media": "Slides, whiteboard, exercise sheets",
    "literature": "- Y. Saad: Iterative Methods for Sparse Linear Systems\n- M. A. Nielsen, I. L. Chuang: Quantum Computation and Quantum Information\n- M. Griebel, S. Knapek, G. Zumbusch, A. Caglar: Numerical Simulation in Molecular Dynamics\n- H.-J. Bungartz, Skript Rekursive Verfahren und hierarchische Datenstrukturen in der numerischen\nAnalysis, http://www5.in.tum.de/lehre/vorlesungen/algowiss/Bungartz_HierVerf.ps.gz",
    "lv_sws_lecturer": "Bungartz, Hans-Joachim; Prof. Dr. rer. nat. habil.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2003",
    "title": "Efficient Algorithms and Data Structures",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 8,
    "hours_total": 240,
    "hours_self_study": 150,
    "hours_presence": 90,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer Klausur von 150 Minuten erbracht. In dieser weisen Studierende anhand der gestellten Aufgaben nach, dass sie die begrifflichen und mathematischen Grundlagen der Algorithmenanalyse beherrschen. Ferner zeigen die Studierenden, dass sie über fundamentale und weitergehende Kenntnisse im Bereich der effizienten Datenstrukturen und Algorithmen verfügen. Sie weisen nach, dass sie in begrenzter Zeit typische algorithmische Probleme erkennen und analysieren können sowie Wege zu einer Lösung finden.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0015 Diskrete Strukturen, IN0007 Grundlagen: Algorithmen und Datenstrukturen, IN0018\nDiskrete Wahrscheinlichkeitstheorie",
    "content": "Das Modul behandelt zunächst die Grundlagen der Algorithmenanalyse. Anschließend werden fundamentale Datenstrukturen und grundlegende algorithmische Probleme behandelt. Im Bereich der Grundlagen der Algorithmenanalyse studiert das Modul verschiedene Maschinenmodelle, Komplexitätsmaße sowie das Lösen von Rekursionsgleichungen. Auf dem Gebiet der fundamentalen Datenstrukturen stellt das Modul verschiedene Suchbäume, Hash-Verfahren, Prioritätswarteschlangen und Union-Find-Datenstrukturen vor. Im Bereich der grundlegenden Algorithmen konzentriert sich das Modul auf die Entwicklung von zahlreichen Maxflow- und Mincutalgorithmen sowie auf Algorithmen für das Matching-Problem. IN2003: Efficient Algorithms and Data Structures | Efficient Algorithms and Data Structures",
    "learning_outcomes": "Nach der Absolvierung des Moduls sind Studierende in der Lage, die Laufzeit und den Speicherplatzbedarf von Algorithmen zu analysieren und zu bewerten. Darüber hinaus verfügen sie über ein grundlegendes Verständnis für die Arbeitsweise zahlreicher fundamentaler Algorithmen und Datenstrukturen. Dieses Verständnis versetzt sie in die Lage, für neue Probleme selbständig Algorithmen und Datenstrukturen zu entwickeln.",
    "teaching_methods": "Das Modul besteht aus einer Vorlesung und einer begleitenden Übung. Die Inhalte der Vorlesung werden im Vortrag und durch Präsentation vermittelt. Studierende werden insbesondere durch die Lösung von Übungsblättern zur inhaltlichen Auseinandersetzung mit den Themen angeregt. Die Lösung der Übungsaufgaben wird in der Übungsveranstaltung besprochen. Zusätzlich erhalten die Studierende durch die Korrektur der Übungsblätter eine individuelle Rückmeldung über ihren Lernerfolg.",
    "media": "Folien, Tafelarbeit, Übungsblätter",
    "literature": "Alfred V. Aho, John E. Hopcroft, Jeffrey D. Ullman: The Design and Analysis of Computer\nAlgorithms. Addison-Wesley, 1974.\nThomas H. Cormen, Charles E. Leiserson, Ron L. Rivest, Clifford Stein: Introduction to Algorithms.\nMcGraw-Hill, 1990.\nMichael T. Goodrich, Roberto Tamassia: Algorithm Design: Foundations, Analysis, and Internet\nExamples, John Wiley & Sons, 2002.\nVolker Heun: Grundlegende Algorithmen: Einführung in den Entwurf und die Analyse effizienter\nAlgorithmen, 2. Auflage, Vieweg, 2003.\nJon Kleinberg, Eva Tardos: Algorithm Design. Addison-Wesley, 2005.\nDonald E. Knuth: The Art of Computer Programming. Vol. 1: Fundamental Algorithms. 3. Auflage,\nAddison-Wesley, 1997.\nDonald E. Knuth: The Art of Computer Programming. Vol. 3: Sorting and Searching. 3. Auflage,\nAddison-Wesley, 1997.\nChristos H. Papadimitriou, Kenneth Steiglitz: Combinatorial Optimization: Algorithms and\nComplexity. Prentice Hall, 1982.\nUwe Schöning: Algorithmik. Spektrum Akademischer Verlag, 2001.\nSteven S. Skiena: The Algorithm Design Manual. Springer, 1998.",
    "lv_sws_lecturer": "Albers, Susanne; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nEffiziente Algorithmen und Datenstrukturen (IN2003) (Vorlesung, 4 SWS)\nRäcke H [L], Abdelwanis O, Räcke H\nIN2003: Efficient Algorithms and Data Structures | Efficient Algorithms and Data Structures\nÜbungen zu Effiziente Algorithmen und Datenstrukturen (IN2003) (Übung, 2 SWS)\nRäcke H [L], Abdelwanis O, Räcke H"
  },
  {
    "module_id": "IN2004",
    "title": "Effiziente Algorithmen und Datenstrukturen II",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 8,
    "hours_total": 240,
    "hours_self_study": 150,
    "hours_presence": 90,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer Klausur von 150 Minuten erbracht. In dieser weisen Studierende anhand der gestellten Aufgaben nach, dass sie über fundamentale und fortgeschrittene Kenntnisse der Algorithmenanalyse verfügen und diese erfolgreich bei der Lösung von Problemen anwenden können. Ferner demonstrieren Studierende beim Lösen der gestellten Aufgaben, dass sie die im Modul behandelten Datenstrukturen und fortgeschrittenen algorithmischen Methoden der kombinatorischen Optimierung beherrschen. Die Studierenden weisen nach, dass sie in begrenzter Zeit anspruchsvolle algorithmische Probleme erkennen und analysieren können sowie Wege zu einer effizienten Lösung finden können.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0015 Diskrete Strukturen, IN0018 Diskrete Wahrscheinlichkeitstheorie, IN2003 Effiziente\nAlgorithmen und Datenstrukturen",
    "content": "Lineare Optimierung\n- Modellierung\n- Simplex-Verfahren\n- Seidels Algorithmus\n- Ellipsoidmethode\n- Karmarkar\nApproximationsalgorithmen\n- Greedy Methoden\nIN2004: Effiziente Algorithmen und Datenstrukturen II | Efficient Algorithms and Data Structures II\n- Lokale Suche\n- Rundungsmethoden\n- Primal/Dual-Verfahren",
    "learning_outcomes": "Nach dem Absolvieren des Moduls verfügen Studierende über umfangreiche Kenntnisse fortgeschrittener algorithmischer Methoden, insbesondere aus dem Bereich der Linearen Optimierung. Darüber hinaus wissen sie um die Bedeutung von Approximationsalgorithmen für die Lösung NP-vollständiger Probleme. Sie kennen verschiedene Techniken, um approximative Lösungen für Probleme aus dem Bereich der kombinatorischen Optimierung zu gewinnen und können diese Techniken selbstständig auf neue Probleme anwenden, die in einer wissenschaftlichen und/oder beruflichen Anwendung auftreten.",
    "teaching_methods": "Das Modul besteht aus einer Vorlesung und einer begleitenden Übung. Die Inhalte der Vorlesung werden im Vortrag und durch Präsentation vermittelt. Studierende werden insbesondere durch die Lösung von Übungsblättern zur inhaltlichen Auseinandersetzung mit den Themen angeregt. Die Lösung der Übungsaufgaben wird in der Übungsveranstaltung besprochen. Zusätzlich erhalten die Studenten durch die Korrektur der Übungsblätter eine individuelle Rückmeldung über ihren Lernerfolg.",
    "media": "Folien, Tafelarbeit, Übungsblätter",
    "literature": "Thomas H. Cormen, Charles E. Leiserson, Ron L. Rivest, Clifford Stein:\nIntroduction to Algorithms\nMcGraw-Hill, 1990\nJon Kleinberg, Eva Tardos:\nAlgorithm Design\nAddison-Wesley, 2005\nDavid P. Williamson, David B. Shmoys:\nThe Design of Approximation Algorithms\nCambridge University Press, 2011\nVijay Vazirani:\nApproximation Algorithms\nSpringer, 2001\nChristos H. Papadimitriou, Kenneth Steiglitz:\nCombinatorial Optimization: Algorithms and Complexity,\nPrentice Hall, 1982\nIN2004: Effiziente Algorithmen und Datenstrukturen II | Efficient Algorithms and Data Structures II\nTheory of Integer and Linear Programming\nAlexander Schrijver\nJohn Wiley & Sons, 1998",
    "lv_sws_lecturer": "Albers, Susanne; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nEffiziente Algorithmen und Datenstrukturen II (IN2004) (Vorlesung mit integrierten Übungen, 6\nSWS)\nAbdelwanis O, Räcke H"
  },
  {
    "module_id": "IN2005",
    "title": "Scientific Computing I",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "The examination consists of a written exam of 90 minutes in which students show that they are able to find solutions for problems arising in the field of scientific computing in a limited time. Assignments focusing on discretization methods will ensure that students are able to analyze the accuracy of a method and are able to discretize a given differential equation in space and in time. For examples of algorithms students show that they are able to analyze the performance and interpret the results. Questions test the student's knowledge of different parts of the simulation pipeline.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Students should have basic knowledge in differential calculus and linear algebra.",
    "content": "The module introduces the steps of the scientific computing simulation pipeline on selected simulation scenarios, focusing especially on aspects of modelling and discretization:\n- classification of mathematical models (discrete/continuous, deterministic/stochastic, etc.);\n- discrete models (e.g. Markov chain models)\n- modeling with ordinary differential equations for the example of population growth;\n- numerical solution of systems of ordinary differential equations;\n- modeling with partial differential equations (PDE) for the example of fluid dynamics;\n- numerical discretization methods for partial differential equations (finite elements, time stepping,\ngrids and adaptivity);\n- limitations and errors encountered in models and discretized models\n- adequacy and asymptotic behavior of models (stability, consistency, accuracy, and convergence\nof numerical methods) IN2005: Scientific Computing I | Scientific Computing I An outlook will be given on the impact that further steps of the simulation pipeline can have on the selection of modeling and discretization techniques, such as:\n- efficient sequential and parallel implementation (architectures, parallel programming, load\ndistribution, domain decomposition, parallel numerical methods);\n- visualization or results\n- embedding of simulations in larger simulation environments (coupled models, workflows for\nparameter studies and uncertainty quantification) Examples are primarily selected from societally and economically relevant simulation scenarios, such as:\n- Discrete and continuous population models (incl. spreading of diseases, traffic simulation, use of\npopulation-type models in economy)\n- Simulation of hazards (e.g. shallow water models for tsunami simulation)\n- Computational fluid dynamics (towards weather and climate simulation)",
    "learning_outcomes": "At the end of the module, participants know the steps of the scientific computing pipeline. They are able to classify and derive simple models, to analyze model behavior (e.g., critical points, asymptotic behavior), and to apply common discretization methods as well as explicit and implicit time stepping schemes to a given model. They are able to assess the adequacy and accuracy of numerical methods and underlying models according to the criteria introduced in the lectures. They can discuss typical limitations and potential errors of models and discretizations. For selected scenarios they have learned that simulation results and simulation errors can have massive societal and economic impact. In addition, students understand the impact of further parts of the simulation pipeline (such as grid generation, grid traversal, data storage, matrix assembly, parallelization, and visualization issues) on modelling and discretization.",
    "teaching_methods": "This module comprises lectures and accompanying tutorials. The contents of the lectures will be taught by talks and presentations. Students will be encouraged to study literature and to get involved with the topics in more depth. In the tutorials, concrete problems will be solved – partially in teamwork – and selected examples will be discussed.",
    "media": "Slides, whiteboard, exercise sheets",
    "literature": "- A.B. Shiflet and G.W. Shiflet: Introduction to Computational Science, Princeton University Press\n- A. Quarteroni, P. Gervasio: A Primer on Mathematical Modelling, Springer\nIN2005: Scientific Computing I | Scientific Computing I\n- Golub, Ortega: Scientific Computing: An Introduction With Parallel Computing, Academic Press,\n1993 (also previous edition: Scientific Computing: Scientific Computing and Differential Equations,\n1991)\n- Strang: Computational Science and Engineering, Cambridge University Press, 2007\n- Tveito, Langtangen, Nielsen, Cai: Elements of Scientific Computing, Texts in Computational\nScience and Engineering 7, Springer, 2010\n- Tveito, Winther: Introduction to Partial Differential Equations - A Computational Approach,\nSpringer, 1998\n- Boyce, DiPrima: Elementary Differential Equations and Boundary Value Problems, Wiley, 1992\n(5th edition)",
    "lv_sws_lecturer": "Bader, Michael Georg; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nÜbungen zu Scientific Computing 1 (IN2005) (Übung, 2 SWS)\nBader M [L], Datar C, Ravi K\nScientific Computing 1 (IN2005) (Vorlesung, 2 SWS)\nBader M [L], Datar C, Ravi K"
  },
  {
    "module_id": "IN2007",
    "title": "Complexity Theory",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 8,
    "hours_total": 240,
    "hours_self_study": 150,
    "hours_presence": 90,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer 120-minütigen Klausur erbracht. In dieser weisen Studierende anhand der gestellten Aufgaben nach, dass sie über fundamentale und weiterführende Kenntnisse im Bereich der Komplexitätstheorie verfügen. Die Studierenden weisen nach, dass sie in begrenzter Zeit komplexitätstheoretische Probleme erkennen und analysieren können sowie Wege zu einer effizienten Lösung finden.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0011 Einführung in die Theoretische Informatik, IN0015 Diskrete Strukturen, IN0007 Grundlagen:\nAlgorithmen und Datenstrukturen",
    "content": "Das Modul behandelt zunächst gründlich Turing-Maschinen. Zeit- und Platzkomplexität werden studiert. Ferner werden Schaltkreise als Berechnungsmodell untersucht. Die Komplexitätsklassen L, NL, P, NP, PSPACE, EXP, NEXP, PH werden eingeführt. Anschließend werden Vollständigkeit und fundamentale strukturelle Zusammenhänge zwischen Komplexitätsklassen hergeleitet. Weiterhin behandelt das Modul das Konzept der Alternierung, Boolesche Schaltkreise, Randomisierung und Interaktive Beweissysteme.",
    "learning_outcomes": "Die Teilnehmer des Moduls kennen die zentralen Methoden der Komplexitätstheorie. Sie wissen um Berechnungsmodelle, Komplexitätsklassen, Reduktionen, Vollständigkeit und kennen ausführlich weiterführende Konzepte wie Diagonalisierung, die Polynomialhierarchie, Platzkomplexität, Alternierung, Boolesche Schaltkreise, Randomisierung und Interaktive IN2007: Complexity Theory | Complexity Theory Beweissysteme. Des Weiteren können sie die entsprechenden Methoden und Konzepte anwenden, um neue Probleme in ihrer Komplexität zu analysieren.",
    "teaching_methods": "Das Modul besteht aus einer Vorlesung und einer begleitenden Übungsveranstaltung. Die Inhalte der Vorlesung werden im Vortrag und durch Präsentation vermittelt. Studierende werden insbesondere durch die Lösung von Übungsblättern zur inhaltlichen Auseinandersetzung mit den Themen angeregt. Die Lösung der Übungsaufgaben wird in der Übungsveranstaltung besprochen. Zusätzlich erhalten die Studenten durch die Korrektur der Übungsblätter eine individuelle Rückmeldung über ihren Lernerfolg.",
    "media": "Folien, Tafelarbeit, Übungsblätter",
    "literature": "Sanjeev Arora, Boaz Barak: Computational Complexity - A Modern Approach. Cambridge\nUniversity Press: Cambridge-New York-Melbourne, 2009.\nGiorgio Ausiello, Pierluigi Creszenzi, Giorgio Gambosi, Viggo Kann, Alberto Marchetti-Spaccamela,\nMarco Protasi: Complexity and approximation - Combinatorial optimization problems and their\napproximability properties. Springer-Verlag: Berlin-Heidelberg, 1999.\nJose L. Balcazar, Josep Diaz, Joaquim Gabarro: Structural Complexity I (and II). EATCS\nMonographs on Theoretical Computer Science, Springer-Verlag: Berlin-Heidelberg, 1995.\nChristos H. Papadimitriou: Computational Complexity. Addison-Wesley Publishing Company:\nLondon-Amsterdam-New York, 1994.\nChristos H. Papadimitriou, Kenneth Steiglitz: Combinatorial optimization: Algorithms and\ncomplexity. Prentice-Hall, Englewood Clis, NJ, 1982.\nKarl Rudiger Reischuk: Komplexitätstheorie - Band I: Grundlagen. B.G. Teubner: Stuttgart-Leipzig,\n1999.\nMichael Sipser: Introduction to the Theory of Computation. International Edition, Thomson Course\nTechnology: Australia-Canada-Mexico-Singapore-Spain-United Kingdom-United States, 2006.\nIngo Wegener: The complexity of Boolean functions. Wiley-Teubner Series in Computer Science:\nStuttgart-Chichester-New York, 1987.",
    "lv_sws_lecturer": "Albers, Susanne; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nKomplexitätstheorie (IN2007) (Vorlesung mit integrierten Übungen, 6 SWS)\nGhoshdastidar D [L], Ghoshdastidar D, Guttenberg R"
  },
  {
    "module_id": "IN2010",
    "title": "Modelling and Simulation",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 8,
    "hours_total": 240,
    "hours_self_study": 150,
    "hours_presence": 90,
    "examination_achievements": "Prüfungsart: Klausur Die Prüfungsleistung wird in Form einer Klausur von 120 Minuten erbracht. In dieser soll nachgewiesen werden, dass in begrenzter Zeit ein Problem erkannt wird und Wege zu einer Lösung gefunden werden können. Die Prüfungsfragen gehen über den gesamten Vorlesungsstoff. Die Antworten erfordern eigene Formulierungen. Darüber hinaus können kurze Rechenaufgaben gestellt werden. Prüfungsfragen weisen die Fähigkeit zur Entwicklung von formalen (mathematischen oder informatischen) Modellkonzepten für gegebene Probleme nach. Die Studierenden demonstrieren, dass sie in der Lage sind, erfolgreich Strategien zur Simulation auszuwählen und anzuwenden. Außerdem weisen sie ihr Wissen bzgl. wichtiger Modellklassen und zugehöriger Lösungsansätze für einfache Szenarien nach.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "MA0901 Lineare Algebra für Informatik, MA0902 Analysis für Informatik, IN0019 Numerisches\nProgrammieren",
    "content": "- Einführung in die mathematische Modellierung (Begriffsbildung, Anwendungsbeispiele, Herleitung\nvon Modellen, Analyse von Modellen, Klassifizierung von Modellen, Betrachtungsebenen und Hierarchie)\n- Diskrete Modellierung und Simulation (Entscheidungsmodelle: Spiele, Strategien, Wahlen;\nReihenfolgeprobleme: Scheduling; Diskrete Ereignissimulation: Verkehr in Rechensystemen; Neuronale Netze) IN2010: Modelling and Simulation | Modelling and Simulation\n- Kontinuierliche Modellbildung und Simulation (Populationsdynamik: Modelle und ihre numerische\nBehandlung; Regelungstechnik: Deterministische und Fuzzy Logic Ansätze; Verkehrsfluss: Modellierung über kontinuierliche Größen; Wärmeleitung: Modell und numerische Lösung)\n- Modellierung im Software-Entwurf (optional; grundlegende Konzepte, Beschreibungstechniken,\nMethodik)",
    "learning_outcomes": "Nach erfolgreicher Teilnahme am Modul sind die Studierenden in der Lage, für eine verbal vorgetragene Aufgabenstellung formale (mathematische oder informatische) Modellkonzepte zu entwickeln sowie zu bewerten und Strategien zur Simulation, also zur rechnergestützten Lösung dieser Modelle, auszuwählen und dann auch erfolgreich einzusetzen. Sie haben exemplarisch wichtige Modellklassen kennen gelernt und können für einfache Szenarien eigene Lösungsverfahren entwickeln.",
    "teaching_methods": "Das Modul besteht aus einer Vorlesung und einer begleitenden Übung. Die Inhalte der Vorlesung werden im Vortrag und durch Präsentationen vermittelt. Studierende sollen zum Studium der Literatur und der inhaltlichen Auseinandersetzung mit den Themen angeregt werden. In den Übungen werden teilweise in Gruppenarbeit gemeinsam konkrete Fragestellungen beantwortet und ausgesuchte Beispiele bearbeitet.",
    "media": "Folien, Tafelarbeit, Übungsblätter",
    "literature": "- Bungartz, Zimmer, Buchholz, Pflüger: Modellbildung und Simulation - eine anwendungsorientierte\nEinführung, Springer, 2009\n- Fowkes, Mahoney: Einführung in die mathematische Modellierung, Spektrum, 1996\n- Gander, Hrebicek: Solving Problems in Scientific Computing Using Maple and MATLAB, Springer,\n1997\n- Bossel: Modellbildung und Simulation, Vieweg, 1994\n- Banks et al.: Discrete Event System Simulation, Prentice Hall, 1996\n- Golub, Ortega: Scientific Computing: An Introduction with Parallel Computing, Academic Press,\n1993\n- Nauck, Klawonn, Kruse: Neuronale Netze und Fuzzy-Systeme, Vieweg, 1994",
    "lv_sws_lecturer": "Bungartz, Hans-Joachim; Prof. Dr. rer. nat. habil.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nModellbildung und Simulation (IN2010) (Vorlesung, 4 SWS)\nBungartz H [L], Newcome S, Reiz S, Seitz P\nModellbildung und Simulation (IN2010) (Vorlesung, 4 SWS)\nÜbungen zu Modellbildung und Simulation (IN2010) (Übung, 2 SWS)\nBungartz H [L], Newcome S, Reiz S, Seitz P"
  },
  {
    "module_id": "IN2011",
    "title": "Parallele Algorithmen",
    "level": "Bachelor/Master",
    "language": "Deutsch/Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 8,
    "hours_total": 240,
    "hours_self_study": 150,
    "hours_presence": 90,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer Klausur von 120 Minuten erbracht. In dieser weisen Studierende anhand der gestellten Aufgaben nach, dass sie mit fundamentalen Konzepten der Parallelrechnung, mit Maschinenmodellen und mit Grundlagen paralleler Komplexitätstheorie vertraut sind. Ferner weisen die Studierenden nach, dass sie die Fähigkeit besitzen, parallele Algorithmen zu entwerfen und zu bewerten.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN2003 Effiziente Algorithmen und Datenstrukturen, IN0015 Diskrete Strukturen, IN0018 Diskrete\nWahrscheinlichkeitstheorie",
    "content": "Das Modul studiert eingehend parallele Maschinenmodelle. Es entwickelt elementare parallele Algorithmen. Ferner stellt es fortgeschrittene Algorithmen und Methoden für Routing und Sortieren vor.",
    "learning_outcomes": "Die Teilnehmer des Moduls beherrschen die fundamentale Konzepte der Parallelrechnung. Sie kennen Maschinenmodelle, beherrschen die Grundlagen paralleler Komplexitätstheorie und können parallele Algorithmen entwerfen und bewerten.",
    "teaching_methods": "Das Modul besteht aus einer Vorlesung und einer begleitenden Übungsveranstaltung. Die Inhalte der Vorlesung werden im Vortrag und durch Präsentation vermittelt. Studierende werden insbesondere durch die Lösung von Übungsblättern zur inhaltlichen Auseinandersetzung mit den IN2011: Parallele Algorithmen | Parallel Algorithms Themen angeregt. Die Lösung der Übungsaufgaben wird in der Übungsveranstaltung besprochen. Zusätzlich erhalten die Studenten durch die Korrektur der Übungsblätter eine individuelle Rückmeldung über ihren Lernerfolg.",
    "media": "Folien, Tafelarbeit, Übungsblätter",
    "literature": "F. Thomson Leighton: Introduction to Parallel Algorithms and Architectures: Arrays, Trees,\nHypercubes. Morgan Kaufman Publishers 1992.\nJoseph JáJá: Parallel Algorithms. Addison-Wesley Publishing Company 1992",
    "lv_sws_lecturer": "Albers, Susanne; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2015",
    "title": "Image Synthesis",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "The exam takes the form of written 75 minutes test. The students demonstrate that they can answer questions concerning the physical laws underlying photorealistic image synthesis, as well as the mathematical and algorithmic foundations of the rendering process. They demonstrate the ability to apply the discussed concepts and methods, such as the GPU-based techniques, precomputed radiance transfer, and image-based approaches, to derive solutions for specific problems in image synthesis. Small tasks using public domain rendering tools assess the ability to apply suitable rendering techniques and let the students become familiar with common rendering options.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0038 Real-time Computer Graphics or IN2017 Computer Graphics",
    "content": "Programmable graphics pipeline, graphics APIs and shader programming, multi-pass techniques, shadow techniques, ambient occlusion, hardware tessellation and displacement mapping, global illumination techniques (ray-tracing, radiosity, photon tracing), light volumes, image formats and image processing, filtering, HDRI, compositing and after effects.",
    "learning_outcomes": "After successful completion of the module, the students have gained advanced knowledge concerning the image synthesis process, including the simulation of local and global illumination effects as well as typical image and compositing operations. The students know the methods which are used in computer games, animation films, and virtual reality scenarios to simulate and render realistic illumination effects. They can analyse and categorize availaible techniques in terms IN2015: Image Synthesis | Image Synthesis of quality and efficiency, and they can model and develop new approaches considering specific requirements. The students are familiar with the functionality of commonly used image synthesis tools, they can evaluate available tools based on their functionality, and they can apply these tools to create own renderings of given models and scenes.",
    "teaching_methods": "The modul consists of the lecture and an accompanying practical exercise. In the lecture, the lecturer conveys to the students the area-specific knowledge, points towards relevant articles and encourages the students to read and put into relation the presented approaches, and gives examples demonstrating the application of these approaches. In the practical exercises, state-of- the-art tools for image synthesis are demonstrated online. The students are introduced to these tools so that they can use them on their own. The students are supposed to apply some of the tools for the synthesis of images of given models and scenes.",
    "media": "Powerpoint course slides, white board exercises, online tutorials and demonstrations",
    "literature": "Akenine-Möller, Haines: Real-time Rendering, AK Peters; Watt, Watt: Computer Graphics,\nAddison-Wesley; Glassner: Principles of digital image synthesis, Morgan Kaufman",
    "lv_sws_lecturer": "Westermann, Rüdiger; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nImage Synthesis - Realtime-Techniques and global Illumination (IN2015) (Vorlesung, 4 SWS)\nWestermann R [L], Weitz S, Westermann R"
  },
  {
    "module_id": "IN2018",
    "title": "Augmented Reality",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 105,
    "hours_presence": 75,
    "examination_achievements": "The examination takes the form of a 90-minute written examination. Half of this refers to theoretical concepts, and the other half to abstracted (generalized) characteristics and experiences with the tools and practices used or developed in the exercises and homework. developed in the exercises and homework. The questions will be asked in English; they can be answered in German or English. No lecture notes are permitted during the exam; a calculator and a dictionary (English mother tongue) may be used as aids. Knowledge questions test familiarity with the basic concepts of augmented reality (related to the theoretical and overview sections). Short programming tasks, questions on short program examples, and questions on programming concepts test the ability to handle an AR system and to understand and expand small systems (related to the practical exercise part). Successfully completing of programming tasks is assessed as a graded project as a voluntary mid-term achievement. The tasks are distributed throughout the semester. The points achieved are converted into a grade according to the maximum number of points. If the calculation of 1/3 voluntary mid-term performance and 2/3 of the exam grade results in an improvement, this is accepted as the module grade.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0001 Introduction to Informatics, IN0006 Introduction to Software Engineering, IN0007\nFundamentals of Algorithms and Data Structures, MA0901 Linear Algebra for Informatics, Basic\nmathematical and programming skills.\nIN2018: Augmented Reality | Augmented Reality",
    "content": "Foundations of Augmented Reality\n- Geometric transformations (homogeneous matrices, projective geometry, scene graph)\n- Three-dimensional information presentation (OpenGL, 3D APIs)\n- Head-mounted displays and other display devices\n- Physical foundations of several tracking devices\n- Mathematical foundations of optical tracking, sensor fusion and device calibration\n- Concepts: augmented reality in comparison with mixed reality, ubiquitous computing, etc.",
    "learning_outcomes": "At the end of the module students are able to describe and analyze the underlying mathematical and programming aspects (tracking and rendering) of AR systems, and they can extend them towards own, further-reaching solutions. They can also evaluate existing input and output devices regarding their suitability for special application scenarios.",
    "teaching_methods": "Lecture, exercise, problems for individual study. The assignments are provided on a weekly basis via the teaching portal. They are discussed in the next exercise class, and a solution is presented. Work on the assignments and participation in the exercise class are voluntary. They serve as a means for students to deepen and test their acquired knowledge – as a self-monitoring aid to prepare for the written exam. In the second half of the semester, students can participated in a team project (final project) in which they can apply and discuss the learned concepts and methods in a freely selectable application context. Successful presentation of a demonstrator yields a bonus.",
    "media": "Powerpoint slides, films, books, assignment sheets, demonstrations",
    "literature": "Excerpts from books and papers from conference proceedings and journals.\nMost relevant texts\n- D. Schmalstieg and T. Höllerer: Augmented Reality – Principles and Practice. Pearson Education\nInc., 2016.\n- The OpenGl Programming Guide - The Redbook.\n- R. Laganiere: OpenCV 2 - Computer Vision Applications Programming Cookbook, Packt\nPublishing open source, 2011.\n- R. Szeliski: Computer Vision - Algorithms and Applications, Springer Verlag, 2011.\n- R.Hartley and A.Zisserman: Multiple View Geometry in Computer Vision; Cambridge University\nPress, 2004.\n- D.Ballard and C.Brown: Computer Vision.\n- R.Tsai: A Versatile Camera Calibration Technique for High Accuracy 3D Machine Vision.\nIN2018: Augmented Reality | Augmented Reality\n- G. Klein and D. Murray: Parallel Tracking and Mapping for Small AR Workspaces, International\nSymposium on Mixed and Augmented Reality (ISMAR) 2007.\n- J.Rolland, L.Davis, Y. Baillot: A Survey of Tracking Technology for Virtual Environments; in\nFundamentals of Wearable Computers and Augmented, 2001.\n- D.Allen, G.Bishop, G.Welch: Tracking - Beyond 15 Minutes of Thought; Course 11 at Siggraph\n2001.\n- J.Rolland, H. Fuchs: Optical versus See-Through Head-Mounted Displays; in Fundamentals of\nWearable Computers and Augmented, 2001.\n- M.Tuceryan, Y.Genc, N.Navab: Single Point Active Alignment Method (SPAAM) for Optical See-\nThrough HMD Calibration; in Presence: Teleoperators and Virtual Environments, 11(3), 2002.\n- P.Milgram, Colquhoun: A Taxonomy of Real and Virtual World Display Integration; in Proc.\nInternational Symposium of Mixed Reality (ISMR 1999).\n- M.Weiser: The Computer for the Twenty-First Century; Scientific American, 1991.\nFurther, continuously updated references to the newest publications, as well as links to online\nversions of many literature sources can be found in the slides of the lectures and on the teaching\nwebpages of G. Klinker, http://campar.in.tum.de/Main/GudrunKlinker.",
    "lv_sws_lecturer": "Plecher, David; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nErweiterte Realität (IN2018) (Vorlesung mit integrierten Übungen, 5 SWS)\nKlinker G [L], Weber N"
  },
  {
    "module_id": "IN2022",
    "title": "Informatikanwendungen in der Medizin II",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Prüfungsart: schriftliche Klausur. Die Prüfungsleistung wird in Form einer 90-minütigen schriftlichen Klausur erbracht. Hilfsmittel sind nicht zugelassen. Wissensfragen überprüfen das Verständnis der Grundlagen, Unterschiede und Einsatzgebiete medizinischer Bildgebungsmodalitäten sowie Methoden der medizinischen Bildverarbeitung und der computergestützten Chirurgie. Anhand kleiner Fallstudien wird zudem überprüft, ob die Teilnehmer und Teilnehmerinnen selbständig in der Lage sind für eine konkrete Anwendung die richtige Bildgebungsmodalität bzw. die richtige Methode auszuwählen.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN2021 Informatikanwendungen in der Medizin, Bachelor in Informatik, in einem\nnaturwissenschaftlichen oder ingenieurwissenschaftlichen Fach.\nDer Besuch von Modul IN2021 (Informatikanwendungen in der Medizin I) ist von Vorteil aber nicht\nzwingend erforderlich.",
    "content": "Folgende Inhalte werden beispielhaft behandelt und ggf. durch industrielle oder klinische Fallstudien von Experten lokaler Kliniken und medizintechnischer Firmen ergänzt:\n- Bildverarbeitung\n++ Bildfilterung im Ortsbereich ++ Bildfilterung im Frequenzbereich ++ Bildtransformationen IN2022: Informatikanwendungen in der Medizin II | Computer Aided Medical Procedures II\n- Bildsegmentierung\n++ Pixelbasierte Verfahren ++ Graphbasierte Verfahren und graphische Modelle ++ Variationsmethoden\n- Bildregistrierung\n++ Intensitäts- und landmarkenbasierte Verfahren ++ Registrierung von inter-/intra-Patientendaten und inter-/intra-Modalitäten ++ Graphbasierte Verfahren und graphische Modelle ++ Variationsmethoden\n- Grundlagen des maschinellen Lernens\n++ Clustering ++ Hauptkomponentenanalyse\n- Grundlagen der 3D Volumenvisualisierung\n++ Physikalische Grundlagen ++ Überblick über Renderingtechniken In den Übungen gibt es die Möglichkeit für die Teilnehmenden bei der Implementation oder Anwendung der Methoden zur Lösung von realen Problemstellungen ein tieferes Verständnis zu erlangen und praktische Erfahrung zu sammeln.",
    "learning_outcomes": "Nach der erfolgreichen Teilnahme an diesem Modul verstehen die Teilnehmerinnen und Teilnehmer die Grundlagen, Unterschiede und Anwendungsgebiete hochentwickelter Algorithmen zur Bildverarbeitung, Bildsegmentierung, Bildregistrierung und können diese auch in Python implementieren. Zudem verstehen sie die Grundlagen von Algorithmen des maschinellen Lernens sowie von Methoden zur 3D Volumendarstellung. Die Teilnehmerinnen und Teilnehmer sind des Weiteren in der Lage anspruchsvolle Aufgabenstellungen im Bereich der computerunterstützten Diagnose und Intervention zu verstehen und Lösungsansätze mit Hilfe der behandelten Algorithmen zu erarbeiten.",
    "teaching_methods": "Vorlesung, Tutorübung, Aufgaben zum Selbststudium. Gastvorlesungen werden zum Teil von Expertinnen und Experten lokaler Kliniken und medizinischer Firmen durchgeführt um den Bezug der bearbeiteten Thema zur klinischen Anwendung sicher zu stellen. Die Aufgaben werden wöchentlich über das Lehrportal zur Verfügung gestellt und in der darauffolgenden Tutorübung besprochen (Musterlösung). Die Lösung der Aufgaben sowie die Teilnahme an der Tutorübung ist freiwillig. Beides dient nur zur vertiefenden Wissensvermittlung und zur Selbstkontrolle der Studierenden – als Hilfestellung zur Vorbereitung auf die Klausur.",
    "media": "Folienpräsentation, Tafelanschrieb\nIN2022: Informatikanwendungen in der Medizin II | Computer Aided Medical Procedures II",
    "literature": "[Peters2000] Terry M. Peters: Image-guided surgery: From X-rays to Virtual Reality. Comput\nMethods Biomech Biomed Engin, 4(1):27-57, 2000\n[MICCAI] Various Proceedings of MICCAI (International Society and Conference Series on Medical\nImage Computing and Computer-Assisted Intervention)\n[TMI] Various IEEE Transactions on Medical Imaging",
    "lv_sws_lecturer": "Navab, Nassir; Prof. Ph.D.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nInformatikanwendungen in der Medizin II (IN2022) (Vorlesung mit integrierten Übungen, 4 SWS)\nNavab N [L], Faghihroohi S, Eck U, De Benetti F, Tomczak A"
  },
  {
    "module_id": "IN2025",
    "title": "Simulation und Animation",
    "level": "Bachelor/Master",
    "language": "Deutsch/Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 4,
    "hours_total": 120,
    "hours_self_study": 75,
    "hours_presence": 45,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer Klausur erbracht. In dieser soll nachgewiesen werden, dass in begrenzter Zeit ein Problem erkannt wird und Wege zu einer Lösung gefunden werden können.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Bachelor Informatik, Semester 1 bis 4",
    "content": "Industrial animation process, character animation (keyframing, inverse kinematic, ragdolls), rigid body motion (kinematics, collision detection, collision response), soft body simulation (mass-spring systems, linear elasticity, finite-elements), fluid simulation (wave equation, shallow water equation, Navier-Stokes equations, discretization), visualization techniques for volumetric phenomena",
    "learning_outcomes": "Teilnehmer verstehen die grundlegenden (physikalischen) Modelle und die mathematischen Beschreibungen und Lösungsverfahren zur computer-unterstützten Simulation von Charakteranimationen, Starr- und Weichkörpern, und Fluiden. Die Teilnehmer sind in der Lage, die im bereich der Computergraphik zum Einsatz kommenden Techniken in Bezug auf Realismus und Komplexität zu analysieren und differenzieren.",
    "teaching_methods": "Vorlesungsfolien, Tafelanschrieb, Online-Tutorien, Online-Demonstrationen von kommerziellen und OpenAccess Animations- und Simulationssystemen IN2025: Simulation und Animation | Simulation and Animation",
    "media": "Vorlesungsfolien, Tafelanschrieb",
    "literature": "- Parent: Computer Animation: Algorithms and Techniques, Morgan Kaufmann\n- Griebel, Dornseifer, Neunhoeffer: Numerical Simulation in Fluid Dynamics: A Practical\nIntroduction, Soc for Industrial & Applied Math\n- Watt, Watt: Advanced Animation and Rendering Techniques, Addison Wesley",
    "lv_sws_lecturer": "Westermann, Rüdiger; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2026",
    "title": "Visual Data Analytics",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "The exam takes the form of a written test of 75 minutes. Questions allow to assess acquaintance with concepts and algorithms of scientific visualization and visual data analysis, and the application domains where visualization methods are used.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "None.",
    "content": "Visualization pipeline (data acquisition, filtering, display), information visualization vs. scientific visualization, grids and grid construction (Delaunay triangulation), interpolation in grids (inverse distance weighting, radial basis functions), discretization aspects, visualization of scalar fields (color coding, iso-contours and iso-surfaces, volume rendering, vector field visualization (particle- based visualization, line integral convolution, topological approaches), terrain rendering including adaptive meshing techniques and hierarchical data representations using quadtree and octrees.",
    "learning_outcomes": "After successful completion of the module, the students have gained advanced knowledge concerning the visualization pipeline, ranging from data acquisition to the final image of the data. This includes knowledge about the application specific data representations, data interpolation and approximation techniques for discrete data sets, data filtering techniques like convolution, as well as the final mapping stage to generate a renderable representation from the data. The students know the common methods which are used in information visualization to graphically depict abstract data, and in scientific visualization to graphically depict 2D and 3D scalar and vector fields, including isocontouring, direct volume rendering, flow visualization, and terrain IN2026: Visual Data Analytics | Visual Data Analytics rendering. They can analyze and categorize available techniques in terms of quality, efficiency, and suitability for a particular data type, and they can model and develop new approaches considering application-specific requirements. In the practical exercises the student learn about the functionality of commonly used visualization tools, they can evaluate available tools based on their functionality, and they can apply these tools to create own visualizations of given data sets.",
    "teaching_methods": "The module consists of the lecture and an accompanying practical exercise. In the lecture, the lecturer conveys to the students the area-specific knowledge, points towards relevant articles and encourages the students to read and put into relation the presented approaches, and gives examples demonstrating the application of these approaches. In the practical exercises, state- of-the-art tools for scientific visualization are demonstrated online. The students are introduced to these tools so that they can use them on their own. The students are supposed to apply some of the tools for the visualization of 3D data sets from a number of different application domains. They learn to differentiate common visualization techniques regarding the data modalities they are suited for. Small tasks using public domain visualization tools assess the ability to apply suitable visualization techniques to specific kinds of data and let the students become familiar with common visualization options.",
    "media": "Powerpoint course slides, white board exercises, online tutorials and demonstrations",
    "literature": "Schumann, Müller: Visualisierung - Grundlagen und allgemeine Methoden, Springer Verlag\nC. Hansen, C. Johnson (Ed.): The handbook of Visualization, Academic Press",
    "lv_sws_lecturer": "Westermann, Rüdiger; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nVisual Data Analytics (IN2026, IN8019) (Vorlesung mit integrierten Übungen, 4 SWS)\nKehrer J, Weitz S, Westermann R"
  },
  {
    "module_id": "IN2028",
    "title": "Business Analytics and Machine Learning",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer 90-minütigen Klausur erbracht. In dieser wird durch das Lösen von Problemstellungen nachgewiesen, dass die Studierenden die Funktionsweise verschiedener Methoden und deren Annahmen verstanden haben. Die Teilnehmer zeigen in den Aufgaben, dass sie die Ergebnisse verschiedener statistischer Verfahren interpretieren und auf Modellgüte prüfen können. Die Beantwortung erfordert zudem das selbstständige Konstruieren von analytischen Lösungswegen mit Hilfe der im Modul erfassten Verfahren.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "MA0901 Lineare Algebra für Informatik, MA0902 Analysis für Informatik, IN0018 Diskrete\nWahrscheinlichkeitstheorie oder MA9712 Statistik",
    "content": "Regression Analysis, Regression Diagnostics, Generalized Linear Models, Naïve Bayes, Decision Tree Classifiers, Data Preparation, Causal Inference, Model Selection, Ensemble Methods, Clustering, High-Dimensional Problems, Neural Networks, Convex Optimization",
    "learning_outcomes": "Nach der Teilnahme an dem Modul kennen Studierende verbreitete Verfahren für Klassifikation, numerische Vorhersage und Clustering. Sie kennen die Annahmen verschiedener Verfahren und verstehen deren Funktionsweise und ausgewählte wirtschaftswissenschaftliche Einsatzgebiete. Teilnehmer können Datensätze mit der Programmiersprache R analysieren und die Ergebnisse der Analysen interpretieren. IN2028: Business Analytics and Machine Learning | Business Analytics and Machine Learning",
    "teaching_methods": "Das Lehrformat besteht aus einer Vorlesung und einer inhaltlich begleitenden Übung. In der Vorlesung trägt der Dozent den Inhalt und Teile der entsprechenden Literatur vor. Die Studierenden werden somit mit Methoden aus der Statistik und dem maschinellen Lernen vertraut gemacht und lernen ihre Anwendungen zu unterscheiden. In der Übung bearbeiten die Studierenden in betreuter Einzelarbeit Übungsaufgaben und werten die entsprechenden Verfahren aus. Zudem bearbeiten die Teilnehmer in Gruppenarbeit Problemstellungen und deren Lösungsfindung anhand von unterschiedlichen Datensätzen. Dadurch lernen die Studierenden ihre eigenen, auf Daten basierenden, Lösungsansätze zu entwerfen. Dabei üben die Teilnehmer auch ihre technischen Fähigkeiten mit Hilfe von Programmierumgebungen wie R oder Python.",
    "media": "Skriptum, Übungsblätter und E-Learning Plattform",
    "literature": "- Trevor Hastie, Jerome Friedman, Robert Tibshirani: Elements of Statistical Learning, Springer.\n- Ian Witten, Eibe Frank, Mark Hall, Christopher Pal: Data Mining: Practical Machine Learning\nTools and Techniques, Morgan Kauffman.\n- James H. Stock and Mark W. Watson: Introduction to Econometrics, Pearson Education.\n- Gareth James, Daniela Witten, Trevor Hastie, Robert Tibshirani: An Introduction to Statistical\nLearning, Springer.",
    "lv_sws_lecturer": "Bichler, Martin; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nBusiness Analytics and Machine Learning (IN2028) (Vorlesung, 2 SWS)\nBichler M, Etesami S\nÜbungen zu Business Analytics and Machine Learning (IN2028) (Übung, 2 SWS)\nBichler M [L], Boschko D, Durmann J, Ewert M, Knörr J"
  },
  {
    "module_id": "IN2030",
    "title": "Data Mining und Knowledge Discovery",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 3,
    "hours_total": 90,
    "hours_self_study": 60,
    "hours_presence": 30,
    "examination_achievements": "The exam takes the form of a written 60 minutes test. Questions allow to assess the acquaintance with the different types of data, relations and algorithms of data mining, and to assess the ability to select, apply, and evaluate suitable data mining methods (correlation, regression, forecasting, classification, clustering).",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Basic mathematics",
    "content": "- data sources, characteristics, and errors\n- data preprocessing and filtering\n- data visualization\n- data projections (principal component analysis, multidimensional scaling, Sammon mapping, auto\nassociator)\n- data transformation and feature selection\n- correlation and regression\n- forecasting\n- classification (Bayes, discriminance, support vector machine, nearest neighbor, learning vector\nquantization, decision trees)\n- clustering (sequential, protype based, fuzzy, relational, heuristic)",
    "learning_outcomes": "On successful completion of the module, students IN2030: Data Mining und Knowledge Discovery | Data Mining and Knowledge Discovery\n- understand the different types of data and relations;\n- understand, apply, and evaluate data preparation, analysis, and visualization methods;\n- understand, apply, and evaluate linear and nonlinear correlation, regression and forecasting\nmethods;\n- are able to compare classification and clustering, and to understand, apply, and evaluate the\ncorresponding methods;\n- are able to select, apply, and evaluate suitable data mining methods for given applications.\nThe main didactic goal is to introduce students to a variety of methods and provide them with the basic notions necessary to extend their knowledge by accessing the literature on their own. The work that the students must invest to achieve this goal corresponds the 3 credits assigned to the module.",
    "teaching_methods": "The module consists of a lecture. The lecture content is communicated via lectures and presentations. The students shall be motivated to study the literature, to work on exercise problems, and to become familiar with the content.",
    "media": "Lecture notes, slides, board",
    "literature": "- Runkler: Data Analytics, Springer\n- Tan, Steinbach, Kumar: Introduction to Data Mining. Addison Wesley\n- Dunham: Data Mining - Introductory and Advanced Topics. Prentice Hall.\n- Theodoridis, Koutroumbas: Pattern Recognition. Academic Press",
    "lv_sws_lecturer": "Esparza Estaun, Francisco Javier; Prof.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nData Mining und Knowledge Discovery (IN2030) (Vorlesung, 2 SWS)\nRunkler T"
  },
  {
    "module_id": "IN2031",
    "title": "Einsatz und Realisierung von Datenbanksystemen",
    "level": "Bachelor/Master",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 105,
    "hours_presence": 75,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer Klausur erbracht; die Prüfungsdauer beträgt 90 Minuten. Wissensfragen überprüfen die Vertrautheit mit Komponenten moderner Datenbanksysteme; Programmieraufgaben überprüfen die Fähigkeit, fortgeschrittene Algorithmen und Datenstrukturen der Datenbankkomponenten zu implementieren und kritisch einzuschätzen; kleine Szenarien mit konkreten Architekturen und Anwendungen, welche mit Hilfe der erlernten Methoden umgesetzt werden müssen, überprüfen die Fähigkeit, konkrete Teillösungen zu entwickeln. Wissensfragen überprüfen Kenntnisse und Charakteristika der verschiedenen Einsatzgebiete von Datenbanksystemen. Typische kleine, konkrete Einsatzszenarien, welche mit Hilfe der erlernten Methoden umgesetzt werden müssen, überprüfen die Fähigkeit, konkrete Teillösungen zu entwickeln.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0008 Grundlagen: Datenbanken, IN0007 Grundlagen: Algorithmen und Datenstrukturen",
    "content": "Implementierung von Datenbanksystemen\n- Transaktionsverwaltung\n- Fehlerbehandlung (Recovery)\n- Mehrbenutzersynchronisation\n- Physische Datenorganisation\n- Anfragebearbeitung (logische und physische Optimierung von Anfragen, Kostenmodelle)\nEinsatz von Datenbanksystemen IN2031: Einsatz und Realisierung von Datenbanksystemen | Application and Implementation of Database Systems\n- Verteilte Datenbanken\n- Betriebliche Anwendungen (OLTP, OLAP)\n- XML und Datenbanksysteme\n- Leistungsbewertung\n- Web Services",
    "learning_outcomes": "Teilnehmer beherrschen die Komponenten moderner Datenbanksysteme sowie die unterschiedlichen Einsatzgebiete moderner Datenbanksysteme im Detail, sie können die zugrundeliegenden Algorithmen und Datenstrukturen implementieren und kritisch einschätzen sowie bei realistischen Szenarien konkrete Einsatzmöglichkeiten skizzieren und kritisch bewerten. Sie sind in der Lage diese für unterschiedliche Randbedingungen weiter zu entwickeln.",
    "teaching_methods": "Das Modul wird als Vorlesung mit begleitender Übungsveranstaltung angeboten. In der Vorlesung werden die Inhalte im Vortrag durch anschauliche Beispiele sowie durch Diskussion mit den Studierenden vermittelt. Die Vorlesung soll den Studierenden dabei auch als Motivation zur eigenständigen inhaltlichen Auseinandersetzung mit den Themen sowie zum Studium der Literatur dienen. Jeweils passend zu den Vorlesungsinhalten werden in den Übungsveranstaltungen Aufgabenblätter angeboten, die die Studierenden zur selbstständigen Kontrolle sowie zur Vertiefung der gelernten Methoden und Konzepte nutzen sollen. Nachdem dies anfangs durch Anleitung passiert, wird dies im Laufe des Semesters immer mehr selbstständig einzeln und zum Teil auch in Kleingruppen vertieft. Web-Schnittstellen zum Selbststudium und aktivem Austesten von SQL, XQuery und Datalog werden in die Vorlesung und die Übung eingebunden.",
    "media": "Vorlesung mit animierten Folien, Web-Schnittstellen für unterschiedliche\nDatenbankanfragesprachen",
    "literature": "- Alfons Kemper, André Eickler: Datenbanksysteme. Eine Einführung. 10., aktualisierte und\nerweiterte Auflage, Oldenbourg Verlag, 2015\n- A. Kemper, M. Wimmer: Übungsbuch: Datenbanksysteme. 3. Auflage Oldenbourg Verlag, 2012\n- A. Silberschatz, H. F. Korth, S. Sudarshan: Database System Concepts. Sixth Edition, McGraw-\nHill, 2010\n- T. Härder, E. Rahm: Datenbanksysteme - Konzepte und Techniken der Implementierung. 2.\nAuflage, Springer Verlag, 2001\n- J. Gray, A. Reuter: Transaction Processing: Concepts and Techniques. Morgan Kaufmann, 1993",
    "lv_sws_lecturer": "Kemper, Alfons; Prof. Dr.\nIN2031: Einsatz und Realisierung von Datenbanksystemen | Application and Implementation of Database Systems\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nÜbungen zu Einsatz und Realisierung von Datenbanksystemen (IN2031) (Übung, 2 SWS)\nKemper A, Bandle M, Jungmair M, Rey A\nEinsatz und Realisierung von Datenbanksystemen (IN2031) (Vorlesung, 3 SWS)\nKemper A, Bandle M, Jungmair M, Rey A"
  },
  {
    "module_id": "IN2041",
    "title": "Automata and Formal Languages",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 8,
    "hours_total": 240,
    "hours_self_study": 150,
    "hours_presence": 90,
    "examination_achievements": "Students are assessed by means of a written 120 minutes exam consisting of a list of exercises. Some exercises test if the students are able to construct finite automata for different languages, directly or with the help of composition operations. Other exercises test if the student knows and can apply and combine the algorithms to move between logical and automata-theoretic descriptions. Other exercises test if students can select the right automata-theoretic technique to solve problems related to verification and pattern-matching.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0011 Introduction to Theory of Computation",
    "content": "The module is divided into two parts. The first part deepens and expands the study of finite automata initiated in IN0011 (Introduction to theoretical computer science), while the second introduces automata on infinite words. In both parts automata are seen as a data structure for the manipulation of (possibly infinite) sets and relations. The module shows how to implement Boolean operations and joins for different automata classes (nondeterministic and deterministic automata, binary decision diagrams, Büchi automata). It also introduces the connection between automata and logic. The algorithms are applied to a variety of problems, ranging from pattern-matching to program verification and solution of Diophantine equations.",
    "learning_outcomes": "On successful completion of the module, students will be able to\n- use finite automata as a data structure for representation of finite and infinite sets;\nIN2041: Automata and Formal Languages | Automata and Formal Languages\n- understand and determine the computational complexity of different operations for different\nclasses of automata;\n- move to and fro logical and automata-theoretic descriptions;\n- apply automata to problems in pattern matching and formal verification.",
    "teaching_methods": "The module consists of lectures and tutorials. During the lectures students are asked to solve small exercises online. Students also received weekly assignments, whose solution is discussed in the tutorials.",
    "media": "Slide show, blackboard, tool presentations, written assignments.",
    "literature": "Javier Esparza: Automata Theory --- An algorithmic approach. Lecture notes, 2012.\nJohn E. Hopcroft, Rajeev Motwani, Jeffrey D. Ullman; Introduction to Automata Theory, Languages\nand Computation; Addison-Wesley Longman, 3rd edition, 2006.\nJoerg Flum, Erich Graedel, Thomas Wilke (eds.); Logic and Automata: History and Perspectives,\nVolume 2; Amsterdam University Press, 2008.\nDominique Perrin, Jean-Eric Pin; Infinite Words: Automata, Semigroups, Logic and Games;\nAcademic Press, 2004.",
    "lv_sws_lecturer": "Esparza Estaun, Francisco Javier; Prof.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nAutomaten und formale Sprachen (IN2041) (Vorlesung, 4 SWS)\nEsparza Estaun F\nÜbung zu Automaten und formale Sprachen (IN2041) (Übung, 2 SWS)\nEsparza Estaun F [L], Czerner P, Esparza Estaun F, Guttenberg R"
  },
  {
    "module_id": "IN2042",
    "title": "Automaten und formale Sprachen II",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Unregelmäßig",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Die Studierenden werden mittels einer schriftlichen Prüfung von 75 Minuten bewertet. Ein Teil der Prüfungsaufgaben überprüft, ob der Studierende die behandelten Operationen auf Automaten korrekt berechnen kann. Ein weiterer Teil der Aufgaben überprüft, ob der Studierende dazu in der Lage ist, einen passenden Automaten für eine gegeben Sprache mittels der in der Vorlesung beschriebenen Verfahren zu erzeugen. Schließlich wird noch überprüft, ob der Studierende die richtigen automatentheoretischen Techniken auswählen kann, um Probleme aus anderen Themenbereichen zu lösen.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0007 Grundlagen: Algorithmen und Datenstrukturen, IN0011 Einführung in die Theoretische\nInformatik, IN2052 Automata and Formal Languages",
    "content": "The course deals with advanced topics in automata theory. Possible contents are:\n- Tree automata: tree languages, regular expressions, logics, tree transducers\n- Weighted automata: finite and pushdown weighted automata, logics\n- Automata for infinite-state verification: pushdown systems, well-structured systems",
    "learning_outcomes": "Nach erfolgreicher Teilnahme ist der Studierende dazu befähigt:\n- zu erklären, warum Automaten, über die klassichen Anwendungen hinaus, interessant sind und\nwelche Anwendung diese haben, IN2042: Automaten und formale Sprachen II | Automata and Formal Languages II\n- das zu einer gegebenen Sprache passende Automatenmodelle auszuwählen und den\nentsprechenden Automaten zu berechnen,\n- verschiedene Operationen auf Automaten durchzuführen und ihrer Laufzeitkomplexität\nabzuschätzen,\n- automatentheoretische Techniken auf Problem aus Bereichen wie Textanalyse,\nProgrammverifikation oder -analyse anzuwenden.",
    "teaching_methods": "The module consists of lectures and tutorials. During the lectures students are asked to solve small exercises online. Students also received weekly assignments, whose solution is discussed in the tutorials.",
    "media": "Slide show, blackboard, tool presentations, written assignments.",
    "literature": "- Joerg Flum, Erich Graedel, Thomas Wilke (eds.); Logic and Automata: History and Perspectives,\nVolume 2; Amsterdam University Press, 2008.\n- H. Comon and M. Dauchet and R. Gilleron and C. Löding, F. Jacquemard, D. Lugiez, S. Tison,\nM. Tommasi; Tree Automata Techniques and Applications, Available on: http://www.grappa.univ-\nlille3.fr/tata, 2007.\n- Manfred Droste, Werner Kuich, Heiko Vogler, Handbook of Weighted Automata; Springer, 2009.\n- Dominique Perrin, Jean-Eric Pin; Infinite Words: Automata, Semigroups, Logic and Games;\nAcademic Press, 2004.\n- Christel Baier, Boudewijn R. Haverkort, Holger Hermanns, Joost-Pieter Katoen , Markus Siegle;\nValidation of Stochastic Systems: A Guide to Current Research; Springer, 2008.",
    "lv_sws_lecturer": "Esparza Estaun, Francisco Javier; Prof.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2048",
    "title": "Gleichungslogik und Lambda-Kalkül",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Unregelmäßig",
    "credits": 8,
    "hours_total": 240,
    "hours_self_study": 150,
    "hours_presence": 90,
    "examination_achievements": "The exam takes the form of a 120 minutes written test. In the exam, questions are designed to assess the student's grasp of the syntax, semantics and proof systems for equational logic and rewriting, and his ability to analyze abstract and concrete rewrite systems for termination and confluence. Moreover the exam will assess the student's ability to program in the untyped lambda- calculus and to infer the types of untyped lambda-terms.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0003 Introduction to Informatics 2, IN0015 Discrete Structures, IN0011 Introduction to Theory of\nComputation, Basic familiarity with propositional logic (boolean algebra), functional programming,\ndiscrete mathematics, computability",
    "content": "The following foundational concepts are covered: abstract reduction systemes; termination and confluence; signatures, terms, substitutions; rules of equational logic; semantics: algebra, validity, term algebra; correctness and completeness of equational logic; term rewriting: equivalence of term rewriting and equational logic; unification; termination proofs; confluence: critical pairs, Knuth- Bendix completion, confluence of orthogonal systems; untyped lambda calculus: lambda terms, beta and eta reduction and their confluence; lambda calculus as a programming language; typed lambda calculus: types, typing rules, let-polymorphism, Curry-Howard isomorphism.",
    "learning_outcomes": "After the successful completion of this module, students will be able to\n- prove confluence and termination of abstract reduction systems\nIN2048: Gleichungslogik und Lambda-Kalkül | Equational Logic and Lambda Calculus\n- prove equalities by rewriting and by equational logic,\n- define the semantics of equational logic and to use it to disprove equalities,\n- prove confluence and termination of simple rewrite systems,\n- prove basic properties of lambda-calculus like confluence or termination,\n- express computable functions as untyped lambda-terms,\n- infer the type of an untyped lambda-term,\n- convert between typed lambda-terms and proofs.",
    "teaching_methods": "The module consists of lectures and tutorials. In the lectures, the material is presented by the teacher, in dialogue with the students. During the tutorials, the students work on given exercises either individually or in small groups with help from the tutors. Exercises are primarily pen and paper based but may also involve computer-based components.",
    "media": "Lecture notes, slides, blackboard, online exercises and homework assignments",
    "literature": "Baader, Nipkow. Term Rewriting and all that. Cambridge University Press. 1998.\nHindley, Seldin. Lambda-Calculus and Combinators: An Introduction.\nCambridge University Press, 2008.",
    "lv_sws_lecturer": "Nipkow, Tobias; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2049",
    "title": "Logik",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 8,
    "hours_total": 240,
    "hours_self_study": 150,
    "hours_presence": 90,
    "examination_achievements": "In the written 120 minutes exam, questions are designed to assess the student's grasp of the relationships between syntax, semantics and proof systems, both in terms of abstract concepts and in terms of small concrete proofs in deductive systems or with the help of algorithmic decision or semi-decision procedures like resolution. They will also be required to prove or apply basic meta-theoretic results characterising particular logical systems.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0015 Discrete Structures, IN0011 Introduction to Theory of Computation, IN0003 Introduction to\nInformatics 2, basic knowledge of propositional logic (boolean algebra) and discrete mathematics",
    "content": "In the context of propositional and predicate logic the following basic notions are covered:\n- Syntax and semantics\n- Proof system and proof search\n- Soundness and completeness\n- Decidability\n- Expressiveness\nPossible further topics (non exhaustive):\n- Proof systems\n- Automated theorem proving\n- Verification\n- Decision procedures\n- Prolog\nIN2049: Logik | Logic\n- Data base theory\n- Higher-order logic\n- Set theory\n- Constructive logic\n- Fuzzy logic.",
    "learning_outcomes": "The students understand the fundamental difference between syntax and semantics. In particular, they are able to perform proofs in a deductive system and can prove the soundness and completeness of that system w.r.t. a semantics. They understand the limitations of logic and the relationship between logic and computability. In particular they can prove the undecidability of some basic problem like validity of formulas. They can formalize problems in informatics or mathematics in logic and can solve them algorithmically using decision or semi-decision procedures like resolution.",
    "teaching_methods": "The module consists of lectures and tutorials. In the lectures, the material is presented by the teacher, in dialogue with the students. During the tutorials, the students work on given exercises either individually or in small groups with help from the tutors. Exercises are primarily pen and paper based but may also involve computer-based components.",
    "media": "Lecture notes, slides, blackboard, online exercises and homework assignments",
    "literature": "- Ebbinghaus, Flum, Thomas. Einführung in die mathematische Logik (English: Mathematical\nLogic).\n- Herbert Enderton. A Mathematical Introduction to Logic.\n- Melvin Fitting. First-Order Logic and Automated Theorem Proving.\n- Jean Gallier. Logic for Computer Science.\n- John Harrison. Handbook of Practical Logic and Automated Reasoning.\n- Uwe Schöning. Logik für Informatiker (English: Logic for Computer Scientists).\n- A. Troelstra and H. Schwichtenberg. Basic Proof Theory.",
    "lv_sws_lecturer": "Nipkow, Tobias; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2050",
    "title": "Model Checking",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Unregelmäßig",
    "credits": 8,
    "hours_total": 240,
    "hours_self_study": 150,
    "hours_presence": 90,
    "examination_achievements": "Students are assessed by means of a written exam (120 minutes) consisting of a list of exercises. Some exercises test the ability of the student to model small toy examples of hardware and software systems. Other exercises test if the student is able to formalize specifications described in natural language. Further exercises test if the students can select the most adequate technique for the state-explosion problem in a given system and apply it.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0007 Fundamentals of Algorithms and Data Structures, IN0011 Introduction to Theory of\nComputation, IN0015 Discrete Structures",
    "content": "The course teaches the fundamentals of Model Chekcing. Topics include:\n- Representation of hardware and software systems using formal models of computations, e.g.,\ntransition systems, pushdown systems, Kripke structures, finite and infinite state automata.\n- Representation of specifications using formal logics and automata, e.g., linear and branching time\ntemporal logics, automata on finite and infinite.\n- Decidability and complexity of various classes of formal models and specifications, e.g.,\ncomplexity of finite state model checking for linear and branching time logics.\n- Techniques for palliating the state-explosion problem e.g., binary decision diagrams, partial-order\nreduction, abstraction.\n- Industrial application of model checking, e.g., discovery of concurrency bugs, verification of\nsystems software.\n- Practical experience in applying model checking tools, e.g., Spin, Blast, CBMC.\nIN2050: Model Checking | Model Checking",
    "learning_outcomes": "Successful participation enables students to\n- explain the role of model checking for ensuring hardware and software quality\n- give formal models of simple hardware and software systems\n- write formal specifications of simple safety and liveness properties using temporal logic\n- explain algorithms for checking if a program satisfies a given specification and apply them to\nsmall examples\n- understand and explain techniques for palliating the state-explosion problem",
    "teaching_methods": "The module consists of lectures and tutorials. During the lectures students are asked to solve small exercises online. Students also received weekly assignments, whose solution is discussed in the tutorials.",
    "media": "Slide show, blackboard, tool presentations, written assignments.",
    "literature": "- Clarke, Grumberg, Peled: Model Checking, MIT Press, 1999\n- Baier, Katoen, Larsen: Principles of Model Checking, MIT Press, 2008\n- Emerson: Temporal and Modal Logic, Chapter 16 in \"Handbook of Theoretical Computer\nScience\", vol. B, Elsevier, 1991\n- Holzmann: The SPIN Model Checker, Addison-Wesley, 2003",
    "lv_sws_lecturer": "Esparza Estaun, Francisco Javier; Prof.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2052",
    "title": "Petrinetze",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Unregelmäßig",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer Klausur von 75 Minuten erbracht. In dieser weisen die Studierenden nach, dass sie drei Arten von Aufgaben lösen können. Modellierungsaufgaben testen die Fähigkeit der Studierenden, einfache Petrinetze zu entwerfen, die eine gegebene Funktionalität haben oder eine gewisse Menge an Eigenschaften erfüllen. Analyseaufgaben testen, ob die Studierenden die in dem Kurs vermittelten Techniken anwenden können, um zu entscheiden, ob ein gegebenes Petrinetz eine Eigenschaft erfüllt. Verständnisaufgaben testen, ob die Studierenden das zugrunde liegende Prinzip einer Technik verstanden haben, typischerweise dadurch, dass sie eine Variante davon entwerfen oder entscheiden, ob eine gegebene Variante korrekt ist.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "MA0901 Lineare Algebra für Informatik, IN0011 Einführung in die Theoretische Informatik",
    "content": "Petrinetze sind ein formales Modell für die Beschreibung und Analyse von nebenläufigen Systemen wie verteilten Algorithmen, Kommunikationsprotokollen, Fertigungssystemen, Geschäftsprozessen oder asynchronen Schaltkreisen. Die Stärken von Petrinetzen sind eine einfache, klare Notation mit einer präzisen Semantik und eine Fülle an vorhandenen Techniken zur Analyse und Verifikation. Das Modul ist eine Einführung in die Theorie von Petrinetzen. Es stellt mehrere Varianten von Petrinetzen und ihre relevantesten Analysetechniken vor: Erreichbarkeits- und Überdeckbarkeitsgraphen, lineare Invarianten, Strukturtheorie und Entfaltungen. Die Techniken werden auch durch Softwaretools veranschaulicht. IN2052: Petrinetze | Petri Nets",
    "learning_outcomes": "Nach erfolgreicher Teilnahme an diesem Modul sind die Studierenden dazu in der Lage,\n- einfache nebenläufige Systeme mit Petrinetzen zu modellieren;\n- kleine Petrinetze von Hand zu analysieren;\n- automatische Analysetechniken und Softwaretools zur Analyse von größeren Netzen\nauszuwählen;\n- die Analyseergebnisse zu nutzen, um das Verhalten der nebenläufigen Systemen zu evaluieren.",
    "teaching_methods": "Das Modul besteht aus einer Vorlesung und einer begleitenden Übung. Die Inhalte der Vorlesung werden im Vortrag und durch Präsentation vermittelt. Studierende werden durch kleine, im Laufe der Vorträge gestellte Aufgaben, sowie durch die Lösung von Übungsblättern zur inhaltlichen Auseinandersetzung mit den Themen angeregt. Die Lösung der Übungsaufgaben wird in der Übung besprochen.",
    "media": "Folienpräsentation, Tafelanschrieb, Toolpräsentation, Übungsblätter.",
    "literature": "Murata: Petri nets: Properties, analysis and applications. Proceedings of the IEEE, 1989\nDesel, Esparza: Free Choice Petri Nets. Cambridge University Press, 1995.\nEsparza, Heljanko: Unfoldings: A Partial-Order Approach to Model Checking. Springer, 2008.\nReisig: Elements of Distributed Algorithms - Modeling and Analysis with Petri Nets. Springer, 1998.",
    "lv_sws_lecturer": "Esparza Estaun, Francisco Javier; Prof.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nPetrinetze (IN2052) (Vorlesung mit integrierten Übungen, 4 SWS)\nEsparza Estaun F [L], Esparza Estaun F, Guttenberg R"
  },
  {
    "module_id": "IN2055",
    "title": "Semantics",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 8,
    "hours_total": 240,
    "hours_self_study": 150,
    "hours_presence": 90,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer Klausur von 120 Minuten erbracht. Wissensfragen überprüfen die Vertrautheit mit Konzepten der Semantik, Konstruktionsaufgaben überprüfen die Fähigkeit, selbst Semantiken für einzelne Sprachkonstrukte zu definieren, und Beweisaufgaben überprüfen die Fähigkeit, Aussagen über einzelne Programme oder ganze Semantiken oder auch über semantische Korrektheit von Werkzeugen logisch zu verifizieren.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0003 Einführung in die Informatik 2, IN0011 Einführung in die Theoretische Informatik, IN0001\nEinführung in die Informatik 1, Grundkenntnisse in diskreter Mathematik und imperativer und\nfunktionaler Programmierung.",
    "content": "Es werden folgende Kernthemen der Semantik von Programmiersprachen behandelt: Operationale und axiomatische Semantik und ihre Beziehung zu einander. Grundlegende induktive Definitionsprinzipien und Beweismethoden. Grundlegende Spracheigenschaften wie Typsicherheit. Anwendungen auf Werkzeuge wie Compiler und Programmanalysatoren. Programmverifikation mit axiomatischer Semantik. Je nach Ausprägung dient eine einfache imperative und/oder funktionale Sprache als Basis. Optionale weitere Themen (beispielhaft):\n- Denotationale Semantik\n- Semantik von Prozeduren, Arrays und Zeigern\n- Semantik objektorientierter Sprachen\nIN2055: Semantics | Semantics",
    "learning_outcomes": "Nach der erfolgreichen Teilnahme an diesem Modul verstehen die Teilnehmer die wesentlichen Konzepte der Semantik von Programmiersprachen auf einem wissenschaftlichen Niveau. Die Teilnehmer haben ein vertieftes Verständnis von mindestens einer der drei wichtigsten Techniken zur Definition der Semantik von Programmiersprachen: operational, denotational und axiomatisch. Insbesondere haben die Studenten folgende Fähigkeiten: Sie können\n- Semantiken lesen und deren logische Konsequenzen verstehen;\n- die Semantik einzelner Sprachkonstrukte selbst definieren;\n- Eigenschaften sowohl einzelner Programme als auch von Semantiken logisch herleiten;\n- Werkzeuge wie Compiler und Programmanalysatoren bezüglich einer Sprachsemantik\nverifizieren.",
    "teaching_methods": "In der Vorlesung werden die Inhalte vorgestellt und im Dialog mit den Studenten erläutert. In den begleitenden Übungen werden mit Hilfe von Aufgaben die angestrebten Lernergebnisse an konkreten Beispielen eingeübt, entweder individuell oder in Kleingruppen, und mit Hilfe des Tutors. Soweit möglich können sowohl Programmier- als auch Beweisaufgaben computergestützt bearbeitet werden.",
    "media": "Folienpräsentation, Tafelanschrieb, Animationen, online Übungs- und Hausaufgaben, online\nDiskussionsforum.",
    "literature": "Tobias Nipkow, Gerwin Klein: Concrete Semantics. Springer, 2014.\nHanne Riis Nielson, Flemming Nielson: Semantics with Applications: An Appetizer. Springer, 2007.\nGlynn Winskel. The Formal Semantics of Programming Languages. MIT Press, 1993.",
    "lv_sws_lecturer": "Nipkow, Tobias; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nSemantik (IN2055) (Vorlesung mit integrierten Übungen, 6 SWS)\nNipkow T, Huch F"
  },
  {
    "module_id": "IN2064",
    "title": "Machine Learning",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 8,
    "hours_total": 240,
    "hours_self_study": 150,
    "hours_presence": 90,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer Klausur von 120 Minuten erbracht. In dieser soll nachgewiesen werden, dass für spezifische Probleme geeignete Lernalgorithmen ausgewählt werden können und die probabilistischen Grundlagen verstanden wurden.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "MA0901 Lineare Algebra für Informatik, MA0902 Analysis für Informatik, IN0018 Diskrete\nWahrscheinlichkeitstheorie",
    "content": "Wahrscheinlichkeitstheorie; kNN & k-means; lineare Methoden; Bayes-Regel, MLE-Schätzer, MAP-Schätzer, Erwartungs-Maximierung, nichtlineare neuronale Netze und Fehlerpropagierung, Mixturmodelle, Stützvektormaschinen, stochastische Suche, unüberwachtes Lernen",
    "learning_outcomes": "Nach dem Bestehen des Moduls verstehen die Teilnehmer und Teilnehmerinnen die probabilistischen Grundlagen des maschinellen Lernens und verfügen über Kenntnisse zu essentiellen Lernalgorithmen; sie sind in der Lage, bei gegebener Problemstellung geeignete Algorithmen auszuwählen, zu beschreiben und herzuleiten.",
    "teaching_methods": "Flipped Classroom Vorlesung zu den Themen: probability theory; kNN; multi-variate gaussian; linear regression and classification; kernels; constrained optimisation; SVM; GP; neural network; unsupervised learning; expectation maximiation; learning theory. Übungen zu den og Themen IN2064: Machine Learning | Machine Learning Hausaufgaben zum Selbststudium zu den og Themen",
    "media": "Folien; Videos",
    "literature": "Christopher M. Bishop. Pattern Recognition and Machine Learning. Springer, Berlin, New York,\n2006.\nDavid J. C. MacKay. Information theory, inference, and learning algorithms. Cambridge Univ.\nPress, 2008.\nKevin Murphy. Machine Learning: a Probabilistic Perspective. MIT Press. 2012.",
    "lv_sws_lecturer": "Günnemann, Stephan; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nMaschinelles Lernen (IN2064) (Vorlesung mit integrierten Übungen, 6 SWS)\nGünnemann S [L], Günnemann S, Fuchsgruber D, Geisler S, Gosch L, Guerranti F, Kollovieh M,\nLüdke D"
  },
  {
    "module_id": "IN2079",
    "title": "IT und Unternehmensberatung",
    "level": "Bachelor/Master",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 3,
    "hours_total": 90,
    "hours_self_study": 60,
    "hours_presence": 30,
    "examination_achievements": "Die Prüfungsleistung wird hauptsächlich durch das Bearbeiten von Fallstudien in Gruppen und deren Präsentation erbracht. Die Ergebnisse der Gruppenarbeit werden jeweils in Form einer Präsentation der Ergebnisse der Fallstudie dokumentiert und bewertet. Zudem wird eine der aufbereiteten Fallstudien vor allen Studierenden präsentiert (15-25 Minuten) und in die finale Bewertung einbezogen. Zur erfolgreichen Bearbeitung der Fallstudien müssen die Studierenden in der Lage sein adäquate Lösungsansätze für typische Probleme der praktischen Umsetzung der IT-Beratung entwerfen zu können. Dies erfordert vor allem die Fähigkeit die grundsätzlichen strategischen Entscheidungen im IT-Management und deren Implikationen beurteilen zu können.",
    "repetition": "",
    "recommended_prerequisites": "IN0006 Einführung in die Softwaretechnik,\nIN0008 Grundlagen: Datenbanken,\nBachelor Informatik oder\nBachelor Wirtschaftsinformatik",
    "content": "Das Modul verschafft den Studierenden einen Überblick über die grundsätzlichen Strukturen und aktuellen Problemstellungen der IT-Beratung. Konzepte wie z.B. IT-Strategie, IT-Governance, IT- Organisation und Prozesse werden vorgestellt. Ferner führt das Modul die Studierenden in das IT- Controlling, IT-Kosten- und IT-Wertemanagement ein. Alle Themen werden anschaulich anhand praxisrelevanten Fallbeispielen erläutert. IN2079: IT und Unternehmensberatung | IT-Consulting",
    "learning_outcomes": "Nach der Teilnahme an dem Modul sind die Studierenden in der Lage IT-Beratungsprozesse inhaltlich und in ihren Wechselbeziehungen zu analysieren. Sie können die grundsätzlichen strategischen Entscheidungen im IT-Management und deren Implikationen bewerten. Die Teilnehmer verstehen typische Probleme der praktischen Umsetzung der IT-Beratung, wie z.B. die Definition einer IT-Strategie oder die erfolgreiche IT-Organisation, und können adäquate Lösungsansätze entwickeln und anderen gegenüber rechtfertigen.",
    "teaching_methods": "Das Lehrformat besteht aus einem Seminar, in dem externe Experten aus der IT-Beratung Inhalt und Teile der entsprechenden Literatur interaktiv vortragen und Anwendungsbeispiele aus der Praxis präsentieren. Die Studierenden werden somit mit den grundsätzlichen Methoden der IT- Beratung vertraut gemacht und lernen ihre Anwendungen zu unterscheiden. Zudem bearbeiten die Teilnehmer in Gruppenarbeit aktuelle Probleme bei der praktischen Umsetzung der IT-Beratung und deren Lösungsfindung anhand von Fallstudien. Darauf basierend erfolgt das Vorbereiten und Durchführen von Präsentationen.",
    "media": "Die externen Experten benutzen (PowerPoint) Folien im Seminar und stellen diese anschließend\nzusammen mit weiterführender Literatur den Studierenden über eine Elearning Plattform zur\nVerfügung. Die Studierenden haben die Möglichkeit über diese Platform aktiv zu kommunizieren\nund Fragen zu stellen. Die Studierenden fassen die Ergebnisse, der in Gruppen bearbeiteten\nFallstudien, am PC zusammen und präsentieren diese mit (PowerPoint) Folien.",
    "literature": "Die Literatur des Moduls besteht aus aktuellen Fallstudien und Folien aus der Praxis der Beratung.",
    "lv_sws_lecturer": "Bichler, Martin; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nIT und Unternehmensberatung (IN2079) (Seminar, 2 SWS)\nBichler M, Durmann J, Kohring N, Pieroth F"
  },
  {
    "module_id": "IN2080",
    "title": "Modellierung verteilter Systeme",
    "level": "Bachelor/Master",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 4,
    "hours_total": 120,
    "hours_self_study": 75,
    "hours_presence": 45,
    "examination_achievements": "90-minütige Klausur, die die erwarteten Lernergebnisse und erworbenen Kompetenzen prüft. Die Studierenden weisen nach, dass sie formale Spezifikationen nebenläufiger Systeme erstellen können und am Beispiel, dass sie über Kenntnis von und Verständnis wesentlicher Spezifikationstechniken und Programmierparadigmen für nebenläufige Systeme verfügen. Sie weisen nach, dass sie Beweise bzw. Widerlegungen mathematischer Zusammenhänge in diesen Gebieten erstellen und formale Spezifikationen nebenläufiger Systeme anfertigen können.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0001 Einführung in die Informatik 1, IN0007 Grundlagen: Algorithmen und Datenstrukturen,\nIN0003 Einführung in die Informatik 2, IN2078 Grundlagen der Programm- und Systementwicklung",
    "content": "Fast alle Rechner und Softwaresysteme sind verteilt und vernetzt bzw. laufen in irgendeiner Form vernetzt ab. Ein große Zahl dieser Systeme sind nicht nur untereinander verteilt und vernetzt, sondern sind auch mit physikalischen und technischen Prozessen verbunden und weisen dementsprechend vielfältige Benutzungsschnittstellen auf. Für die systematische Entwicklung moderner Softwaresysteme sind Themen wie Nebenläufigkeit, Vernetzung, Interaktion und Koordination von Systemen somit zentral. Die Modellierung und systematische Behandlung derartiger Systeme bringt eine Vielzahl von Fragestellungen, Phänomenen und Schwierigkeiten, die deutlich über die Behandlung sequentieller, nichtinteraktiver Systeme hinausgehen. Die Vorlesung präsentiert grundsätzliche Konzepte und Modelle für verteilte Systeme sowie Möglichkeiten, diese zu beschreiben, zu spezifizieren, zu strukturieren, ihre Eigenschaften zu analysieren und schließlich auch zu verifizieren. Die Inhalte der Vorlesung behandeln speziell IN2080: Modellierung verteilter Systeme | Modelling of Distributed Systems Fragen und Ansätze der Modellierung verteilter Systeme, der gängigen Modelle und ihrer Theorien, Strukturen und Zusammenhänge. Es werden folgende Inhalte vermittelt:\n- Nebenläufige, verteilte, kooperierende Systeme: Grundbegriffe und wesentliche Eigenschaften\n- Systeme als Zustandsmaschinen\n- Funktionale Beschreibung von Systemkomponenten\n- Struktur- und Verteilungssicht\n- Prozesse als Abläufe verteilter Systeme\n- Verfeinerung von Systemen\n- Nachrichtensynchrone Systeme",
    "learning_outcomes": "Teilnehmer kennen die wesentlichen Grundbegriffe zu Methoden der Spezifikation, Modularisierung, Abstraktion, Verfeinerung und Verifikation nebenläufiger, verteilter kooperierender Systeme. Sie wissen um die Bedeutung sowohl der Anforderungsdefinition (Spezifikation) als auch der Korrektheitsbeweise (Verifikation) von Implementierungen. Sie beherrschen fundamentale Techniken und Methoden und sind in der Lage, eine Vielzahl existierender Modellierungs- und Beschreibungstechniken zielgerichtet einzusetzen und gegeneinander abzugrenzen.",
    "teaching_methods": "Vorlesung, Übung, Aufgaben zum Selbststudium",
    "media": "",
    "literature": "- K.R. Apt, E.-R. Olderog. Verification of Sequential and Concurrent Programs. Springer, 1991.\n- M. Broy. Towards a Logical Basis of Software Engineering. In: Calculational System Design. IOS-\nPress, 1999.\n- D. Gries. The Science of Programming, Springer, 1987.\n- D. Harel. StateCharts: A Visual Formalism for Complex Systems. Science of Computer\nProgramming, 8:231-274, 1987.\n- C.A.R. Hoare. Communicating Sequential Processes. Prentice-Hall, 1985.\n- L. Lamport. The Temporal Logic of Actions. ACM Transactions on Programming Languages and\nSystems, 3(16):872-923, 1994.\n- N. Lynch, M. Tuttle. An Introduction to Input/Output automata. CWIQuarterly, 2(3):219-246, 1989.\n- Z. Manna, A. Pnueli. A Temporal Logic of Reactive Systems and Concurrent Systems. Springer,\n1992.\n- R. Milner. Communication and Concurrency. Prentice-Hall, 1989.",
    "lv_sws_lecturer": "Pretschner, Alexander; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nIN2080: Modellierung verteilter Systeme | Modelling of Distributed Systems"
  },
  {
    "module_id": "IN2085",
    "title": "Software Engineering für betriebliche Anwendungen - Bachelorkurs",
    "level": "Bachelor",
    "language": "Deutsch/Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Prüfungsart: Klausur (90 Minuten) Die Modulprüfung besteht aus einer schriftlichen Klausur, in der die Studierenden Konzepte und Methoden in den verschiedenen Phasen des Software-Engineering erklären und zur Lösung kleiner in der Praxis auftretende Probleme ohne Hilfsmittel anwenden. Darüber hinaus prüft die Klausur die Fähigkeit der Studierenden, anhand von Modellierungsaufgaben fachliche Anforderungen zu analysieren, zu bewerten und formal zu skizzieren.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0006 Einführung in die Softwaretechnik",
    "content": "Inhalte umfassen:\n- Charakterisierung betrieblicher Informationssysteme\n- Requirements-Engineering für betriebliche Anwendungen\n- Persistenz: Konzepte, Werkzeuge, Technologien und Frameworks\n- Verteilung in Informationssystemen: Konzepte, Middleware und Architekturen\n- Mehrsprachigkeit und Internationalisierung\n- Standardsoftware vs. Individualsoftware\n- Customizing und Konfigurationsmanagement\n- Weiterführende Programmierparadigmen und -techniken\nIN2085: Software Engineering für betriebliche Anwendungen - Bachelorkurs | Software Engineering for Business Applications - Bachelor's Course",
    "learning_outcomes": "Nach der erfolgreichen Teilnahme an dem Modul sind die Studierenden in der Lage, die bei der Analyse, dem Entwurf und der Realisierung betrieblicher Anwendungen auftretenden \"domänenspezifischen\" Problemstellungen (Persistenz, Verteilung, Customizing, Mehrsprachigkeit, Betrieb, Wartung, Konfigurationsmanagement) zu verstehen und zu bewerten. Weiterhin können die Studenten diese Probleme durch in der Praxis bewährte Methoden und Technologien unter der Verwendung von Individual- und Standardsoftware adressieren sowie Vor- und Nachteile der verfügbaren Methoden fundiert darstellen. Außerdem sind die Studierenden nach der Teilnahme an dem Modul in der Lage, eigenständig die erlernten Konzepte beim Programmieren von betrieblichen Anwendungen praktisch anzuwenden.",
    "teaching_methods": "Mit Hilfe einer Folien- oder Tafelpräsentation stellt die Vorlesung die Grundbegriffe und Techniken des Software Engineerings betrieblicher Anwendungen vor und erläutert sie an Beispielen. In den begleitenden Übungen wird anhand geeigneter Aufgaben das Verständnis der Inhalte der Vorlesung vertieft und die Anwendung der verschiedenen Techniken anhand konkreter Technologien, Beispiele und Übungsaufgaben geübt.",
    "media": "Vortrag mit digitalen Folien, Übungsblätter, Aufgaben zum Selbststudium, Java\nProgrammierungstools",
    "literature": "Hitz, M.; Kappel, G.; Kapsammer, E.; Retschitzegger, W.: UML @ Work. dpunkt.Verlag, 3. Auflage,\n2005. ISBN 3- 89864- 261- 5.\nIhns , O.; Heldt, S.; Koschek, H.; Ehm J.: EJB 3.1 professionell: Grundlagen- und Expertenwissen\nzu Enterprise JavaBeans 3.1 - inkl. JPA 2.0, 2011, dpunkt Verlag.\nReese, Richard (2011): EJB 3.1 Cookbook. ISBN: 9781849682381\nAndrew Lee Rubinger, Bill Burke, Richard Monson-Haefel (2010): Enterprise JavaBeans 3.1,\nO'Reilly.\nOestereich, Bernd (2012): Analyse und Design mit der UML 2.5. Oldenburg, http://\nwww.oldenbourg-verlag.de/wissenschaftsverlag/analyse-und-design-uml-25/9783486716672.",
    "lv_sws_lecturer": "Matthes, Florian; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nÜbungen zu Software Engineering für betriebliche Anwendungen - Bachelorkurs (IN2085) (Übung,\n2 SWS)\nMatthes F [L], Dhaini M, Machner N, Vladika J\nSoftware Engineering für betriebliche Anwendungen - Bachelorkurs (IN2085) (Vorlesung, 2 SWS)\nMatthes F [L], Matthes F, Vladika J, Dhaini M, Machner N\nIN2085: Software Engineering für betriebliche Anwendungen - Bachelorkurs | Software Engineering for Business\nApplications - Bachelor's Course"
  },
  {
    "module_id": "IN2087",
    "title": "Software Engineering for Business Applications - Master's Course: Web Application Engineering",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 8,
    "hours_total": 240,
    "hours_self_study": 180,
    "hours_presence": 60,
    "examination_achievements": "Prüfungsart: Projektarbeit Die Leistung der Studierenden wird auf der Grundlage mehrerer Arbeitsergebnisse und deren Präsentation im Rahmen einer Projektarbeit mit drei Meilensteinen bewertet. 1. Zunächst erarbeiten die Studierenden eine onlinebasierte Geschäftsidee und entwickeln diese zu einem Geschäftsmodell weiter. Dabei muss eine entsprechende Projektplanung und Aufgabenverteilung vorgenommen und begründet werden. Darüber hinaus strukturieren und bewerten die Studierenden ihre Geschäftsidee mit Methoden wie dem Business Model Canvas und dem Value Proposition Canvas. Abschließend werden die Ergebnisse präsentiert. (10%) 2. Nachdem das Geschäftsmodell entwickelt wurde, werden vier konkrete Anwendungsfälle abgeleitet. Außerdem müssen geeignete Muster für das Design der Webanwendung ausgewählt und in konkreten Mockups angewendet werden. Die technische Architektur soll mit UML- Diagrammen dokumentiert werden. Die Ergebnisse werden präsentiert. (15%) 3. Basierend auf den Mockups und den technischen Konzepten entwickeln die Studierenden einen Prototyp der Webanwendung, der alle definierten Use Cases enthält. Moderne WebFrameworks, wie sie in der Vorlesung besprochen wurden, werden in die Anwendung integriert, die sowohl Frontend- als auch Backend-Aspekte umfasst. Die abschließende Bewertung umfasst die Entwicklung des endgültigen Prototyps und die Präsentation der Ergebnisse. Darüber hinaus müssen die Studierenden Fragen zu ihrer Webanwendung und den zugrunde liegenden theoretischen Konzepten beantworten. Die Studierenden müssen auf eine gute Teamarbeit und Teamkommunikation achten. (75%) Arbeitsaufwand: IN2087: Software Engineering for Business Applications - Master's Course: Web Application Engineering | Software Engineering for Business Applications - Master's Course: Web Application Engineering Die Entwicklung einer modernen Webanwendung stellt den größten Aufwand in diesem Modul dar. Dabei müssen sich die Studierenden das notwendige Wissen zur Bewältigung dieser Aufgabe aneignen. Der Lernfortschritt wird durch Tutorien und Feedback-Termine mit Mentoren unterstützt. Zusätzlicher Arbeitsaufwand entsteht durch das Erstellen der Abgaben und Präsentationen.",
    "repetition": "",
    "recommended_prerequisites": "Kenntnisse und Fertigkeiten auf Bachelor-Niveau (Informatik/Wirtschaftsinformatik) in Software\nEngineering, Programmierung und Datenbanken.",
    "content": "1. Web Site Genres\n-- Business Models in the Web\n-- Web 2.0 and Social Software\n-- Anything as a Service (XaaS)\n2. Web Site Design\n-- Key Issues of Customer-Centered Web Design\n-- An Overview of Web Design Patterns\n-- Knowing Your Customers\n-- Involving Customers with Iterative Design\n-- Processes for Developing Customer-Centered Sites\n-- Additional Viewpoints and Aspects\n3. Patterns for Web Site Design\n-- Explaining your Value Proposition\n-- Creating a Navigation Framework\n-- Basic and Advanced E-Commerce\n-- Designing Effective Page Layouts\n-- Making Site Search Fast and Effective\n-- Making Navigation Easy\n-- Speeding Up Web Sites\n-- Supporting a Wide Range of Devices (Responsive design)\n-- Integrating Multiple Touchpoints (Mobile apps, progressive web apps, and hybrid apps)\n-- Integrating Independently Developed Web Services, Content, and Processes\n4. Fundamental Concepts of Single-Page Web Applications\n-- HTML Concepts and Evolution\n-- CSS Concepts and their Link to HTML\n-- JavaScript Basics\n-- SVG and Canvas\n-- Web Components\n-- Single-Page Applications\n-- Component-based Frameworks\n5. Developing Single-Page Applications with a Specific Web Application Framework IN2087: Software Engineering for Business Applications - Master's Course: Web Application Engineering | Software Engineering for Business Applications - Master's Course: Web Application Engineering\n-- Web Application Framework Comparison\n-- Basic Concepts of the chosen Framework\n-- State Management\n-- Navigation & Routing\n-- Client-Server Communication\n-- Consuming RESTful Service\n6. Building REST-enabled Back-End Service\n-- Target Architecture and Development Environment\n-- Event-Driven Architecture and Asynchronous I/O Operations\n-- Creating REST Interfaces\n-- Using Document-Oriented Database Storage\n-- Enabling User Authentication on the Web Service\n7. Advanced Topics in Web Application Engineering\n-- Real-Time Web Applications\n-- Virtual DOM\n-- Hybrid Web Applications\n-- Other Web Frameworks\n-- Traditional Web Stacks, Server-Side Rendering\n8. High Performance Web Applications\n-- Database Options for Web Applications\n-- Scaling Web Applications",
    "learning_outcomes": "Nach der erfolgreichen Teilnahme an dem Modul verfügen Studierende über die notwendige Kompetenz, Web Anwendung eigenständig zu konzipieren, zu planen und umzusetzen. Studierende sind nach der Teilnahme an dem Modul in der Lage, Geschäftsmodelle im Web zu identifizieren und die zugrundeliegenden Konzepte zu erklären, Muster für die Gestaltung von Web Anwendungen auszuwählen und anzuwenden. Darüber hinaus sind Studierende in der Lage, nutzerzentrierte iterative Vorgehensmodelle zu erklären, zu bewerten und im Team anzuwenden. Aktuelle webbasierte Technologien und Integrationstechniken können Studierende erklären, für die Implementierung eigener Webanwendungen auswählen und erfolgreich einsetzen. Das umfasst sowohl endgerätespezifische als auch serverseitige Aspekte. Studierende sind nach erfolgreicher Teilnahme in der Lage, moderne Web Applikationen mit Hilfe von aktuellen Entwicklungsframeworks zu implementieren. Sie besitzen grundlegende Kenntnisse, diese Frameworks mit anderen zu vergleichen und die Vor- bzw. Nachteile zu beschreiben. Zuletzt besitzen Studierende die Fähigkeit das Ergebnis aus Web-Entwicklungsprojekten vor einem Fachpublikum zu präsentieren.",
    "teaching_methods": "Vorlesung (mit eingebetteten Tutorien zur verwendeten Technologie), durch Tutor betreute Projektarbeit in Kleingruppen (max. 4 Personen) mit Projektauftrag und Präsentation der Projektarbeit. IN2087: Software Engineering for Business Applications - Master's Course: Web Application Engineering | Software Engineering for Business Applications - Master's Course: Web Application Engineering",
    "media": "Vortrag mit digitalen Folien und Systemdemonstration",
    "literature": "- Axel Rauschmayer: Exploring ES6, Ecmanauten, http://exploringjs.com/es6/\n- Axel Rauschmayer: Setting Up ES6, Ecmanauten, https://leanpub.com/setting-up-es6/\n- Alexander Osterwalder, Yves Pigneur: Business model generation: A Handbook for Visionaries,\nGame Changes, and Challenges, John Wiley & Sons 2010\n- D. Roam: The Back of the Napkin: Solving Problems and Selling Ideas with Pictures, Portfolio\nHardcover, 2012\n- Steve Krug: Don't make me think! Web Usability: Das intuitive Web, New Riders Press; 2 edition,\n2005\n- Robert Hoekman: Designing the Obvious. A Commonsense Approach to Web Application\nDesign, New Riders Press; 1 edition, 2006\n- David Flanagan: JavaScript: The Definitive Guide, O’Reilly Media, 2011\n- Doublas Crockford :JavaScript, http://javascript.crockford.com/\n- React Official Tutorial, ReactJS.org, https://reactjs.org/tutorial/tutorial.html\n- Eve Porcello : React.js Essential Training, Lynda.com, 2017, https://www.lynda.com/React-js-\ntutorials/React-js-Essential-Training/496905-2.html (kostenloser Zugang for TUM Studenten)\n- Express - Web Framework for Node.js, http://expressjs.com/\n- Cal Henderson: Building Scalable Web Sites, O´Reilly; 2006\n- Eric Vliest, Danny Ayers, Erik Bruchez, Joe Fawcett, Alessandro Vernet: Web 2.0 Programming,\nWiley Publishing, 2007",
    "lv_sws_lecturer": "Matthes, Florian; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nSoftware Engineering für betriebliche Anwendungen - Masterkurs: Web Application Engineering\n(IN2087) (Vorlesung mit integrierten Übungen, 4 SWS)\nMatthes F [L], Matthes F, Machner N, Wardas O, Öz B, Dhaini M, Hoops F, Klymenko A,\nMeisenbacher S, Schopf T, Tobisch F, Vladika J"
  },
  {
    "module_id": "IN2088",
    "title": "Softwarearchitekturen",
    "level": "Bachelor/Master",
    "language": "Deutsch/Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 3,
    "hours_total": 90,
    "hours_self_study": 60,
    "hours_presence": 30,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer Klausur erbracht. In dieser soll nachgewiesen werden, dass in begrenzter Zeit ein Problem erkannt wird und Wege zu einer Lösung gefunden werden können.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "",
    "content": "- Beschreibung von Softwarearchitekturen\n- Konstruktion von Softwarearchitekturen\n- Wiederverwendung von Softwarearchitekturen\n- Evolution von Softwarearchitekturen und Refaktorisierung\n- Architekturen von verteilten Systemen\n- Modellgetriebene Softwareentwicklung\n- Aktuelle Trends",
    "learning_outcomes": "Nach der Teilnahme an den Modulveranstaltungen verstehen die Studierenden die Bedeutung der Architektur eines Softwaresystems für den erfolgreichen Verlauf eines Entwicklungsprojekts. Sie kennen Techniken die zur Beschreibung, Konstruktion, Wiederverwendung und Evolution von Softwarearchitekturen angewendet werden. Sie verstehen Architekturen die zur Entwicklung von verteilten Systemen eingesetzt werden, sowie aktuelle Trends der Modellierung von Softwarearchitektur als Teil modellgetriebener Softwareentwicklung und die Bedeutung der Softwarearchitektur für Softwarewiederverwendung. IN2088: Softwarearchitekturen | Software Architectures",
    "teaching_methods": "Vorlesung",
    "media": "Vortrag mit digitalen Folien, optionale Vorlesungsaufzeichnung",
    "literature": "[RH06] Reussner, R., Hasselbring, W.: Handbuch der Software-Architektur. dpunkt.verlag, 2006\n[So10] Sommerville, Ian. Software Engineering, 9th Edition, Boston: Addison-Wesley, 2010.",
    "lv_sws_lecturer": "Matthes, Florian; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2098",
    "title": "Mobile verteilte Systeme",
    "level": "Bachelor/Master",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer Klausur von 90 Minuten erbracht. In dieser soll nachgewiesen werden, dass in begrenzter Zeit ein Problemstellungen der Grundlagen der Mobilen verteilten Systeme nebst der drahtlosen Kommunikation und den mobilen Betriebssystemen erkannt werden und Wege zu einer Lösung gefunden werden können.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0009 Grundlagen: Betriebssysteme und Systemsoftware, IN0010 Grundlagen: Rechnernetze\nund Verteilte Systeme",
    "content": "Mobilität, Drahtlose Kommunikation, Mobile Betriebssysteme, Gesamtarchitekturen, Konzepte, Mechanismen, Verfahren und deren Bewertung",
    "learning_outcomes": "Die Studierenden kennen die Grundlagen der mobilen verteilten Systeme (MVS). Sie sind in der Lage, die Grundlagen, Probleme und Lösungen der MVS zu verstehen und die aktuellen Entwicklungen einzuschätzen. Sie sind zudem in die Lage, die erworben Grundlagenkenntnisse direkt auf neue Entwicklungen im Bereich der drahtlosen Kommunikation (inklusive ihrer Protokolle) und dem Bereich der mobilen Betriebssysteme (inklusive wichtiger Apps) anzuwenden. IN2098: Mobile verteilte Systeme | Mobile Distributed Systems",
    "teaching_methods": "Vorlesung (Vorstellung und Diskussion der Grundlagen), Übung mit Präsentationen (Anwendung der Grundlage auf verschiedenartige Beispiele), Aufgaben zum Selbststudium (Lösen von gängigen Fragestellungen)",
    "media": "Unterlagen (Vorlesungsfolien (roter Faden), Stichwortsammlung) via moodle",
    "literature": "Schiller, Jochen. Mobilkommunikation, 2. Auflage, Pearson Studium, 2003.\nRoth, Jörg. Mobile Computing, Grundlagen, Technik, Konzepte, 2. Auflage, dpunkt.verlag, 2005.\nWalke, Bernhard. Mobilfunknetze und ihre Protokolle 1, Grundlagen, GSM, UMTS und andere\nzellulare\nMobilfunknetze, 3. Auflage, Teubner, 2001.",
    "lv_sws_lecturer": "Baumgarten, Uwe; Prof. Dr. rer. nat. habil.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2103",
    "title": "Challenges for the CIO (Berufsfeldspezialisierung CIO)",
    "level": "Master",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 3,
    "hours_total": 90,
    "hours_self_study": 60,
    "hours_presence": 30,
    "examination_achievements": "Prüfungsart: Wissenschaftliche Ausarbeitung Die Prüfungsleistung wird in Form einer wissenschaftlichen Ausarbeitung erbracht und wird durch eine Präsentation derselben ergänzt. Hinzu kommt die aktive Teilnahme bei der Diskussion der Präsentationen anderer Studierender. Im Rahmen der wissenschaftlichen Ausarbeitung soll nachgewiesen werden, dass die Studierenden die wichtigsten Fakten sowie die Stärken und Schwächen der IT-Themen verstanden haben. Im Rahmen der dazugehörigen Präsentation soll gezeigt werden, dass die Studierenden die IT-Themen effektiv präsentieren können.",
    "repetition": "",
    "recommended_prerequisites": "keine",
    "content": "- Ausarbeitung von aktuellen Themen und Herausforderungen für einen CIO in einem bestimmten\nUnternehmenskontext\n- Erstellung eines wissenschaftlichen Berichtes zu einem dieser Themen\n- Erstellung einer Handlungsempfehlung für einen Entscheidungsträger mit Hilfe einer\nManagement Summary\n- Präsentation der Ausarbeitung\n- Austausch und Diskussion mit zahlreichen IT-Verantwortlichen aus Unternehmen",
    "learning_outcomes": "Nach der Teilnahme an dem Modul verstehen die Studierenden das Berufsbild des Chief Information Officers (Aufgaben, Ziele, Zuständigkeiten, organisatorische Verankerung in IN2103: Challenges for the CIO (Berufsfeldspezialisierung CIO) | Challenges for the CIO Unternehmen, aufbau- und ablauforganisationale Aspekte) in unterschiedlichen Branchen. Zudem sind ihnen ausgewählte aktuelle Themen und Herausforderungen der CIOs bekannt. Sie sind in der Lage, ausgewählte Methoden und Ansätze des Informationsmanagements auf diese aktuellen Herausforderungen anzuwenden. Zudem fördert das Modul die Fähigkeit der Studenten, aktuelle IT-Themen zu analysieren und über deren effektive Kommunikation nachzudenken. Nach der Teilnahme sind die Studenten außerdem mit (Kommunikations-)Fähigkeiten ausgestattet, die es ihnen ermöglicht in einem professionellen IT-Umfeld erfolgreich zu sein.",
    "teaching_methods": "Seminar, Vortrag",
    "media": "Flipchart und PowerPoint",
    "literature": "Krcmar, H. (2015): Informationsmanagement. 6., überarb. Aufl., Springer, Berlin [u.a.] 2015.\nDaum, M.; Häberle, O.; Lischka, I.; Krcmar, H. (2004): The chief information officer in Germany?\nSome empirical findings. In: Proceedings of 12th ECIS in Turku.\nInfo AG (2012): IT-Perspektiven 2020.\nhttp://blog.qsc.de/wp-content/uploads/2011/09/INFO-AG_IT-Perspektiven-2020_final-\nEinzelseiten.pdf\nCapgemini (2013): Studie IT-Trends 2013. http://www.de.capgemini.com/resource-file-access/\nresource/pdf/capgemini-studie_it-trends_2013.pdf\nCapgemini (2015): Studie IT-Trends 2015 - Kompakt.\nhttp://www.de.capgemini.com/resource-file-access/resource/pdf/infografik-it-trends-studie-2015.pdf\nWirtschaftswoche (2013): Wie Unternehmen ihre IT verändern wollen. http://www.wiwo.de/\nunternehmen/it/digitale-revolution-der-wirtschaft/trends-2013-wie-unternehmen-ihre-it-veraendern-\nwollen/7807800.html\nKohli, R. (2007): Innovating to create IT-based new business opportunities at united parcel service.\nIn: MISQE Vol.6 No.4.\nPeppard, J.; Ward, J.; Daniel, E. (2007): Managing the Realization of Business Benefits from IT\nInvestments. In: MISQE Vol.6 No.",
    "lv_sws_lecturer": "Rinderle-Ma, Stefanie; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2104",
    "title": "CIO Planspiel",
    "level": "Master",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 8,
    "hours_total": 240,
    "hours_self_study": 180,
    "hours_presence": 60,
    "examination_achievements": "Prüfungsart: Präsentation Im CIO-Planspiel schlüpfen die Studierenden in die Rolle des CFO (Chief Financial Officer), CMO (Chief Marketing Office), COO (Chief Operations Officer) und CIO (Chief Information Officer), um eine Bank zu führen und managen. Die Prüfungsleistung wird in Form von Präsentationen sowie in dazugehörigen schriftlichen Ausarbeitungen erbracht. Dazu werden in Teams wirtschaftliche Themen (Vision und Strategie, Balanced Scorecard, Projektportfoliomanagement; Human Resources Management; Unternehmensbewertung) sowie ITIL Themen (z. B. Service Portfolio Management, Demand Management, Financial Management) ausgearbeitet. Hinzu kommt die aktive Teilnahme bei der Diskussion der Präsentationen anderer Studierender. Die Prüfungsform soll nachweisen, dass Studierende in der Lage sind, Themen selbstständig zu erarbeiten und anderen Studierenden zu kommunizieren.",
    "repetition": "",
    "recommended_prerequisites": "keine",
    "content": "Profil, Aufgabenbereiche und Managementaspekte des CIO, CFO, CMO und COO; Zusammenhang zwischen IT und Unternehmensstrategie; Vision und Strategie einer Bank; das Instrument der Balanced Scorecard innerhalb einer Bank; Projektportfoliomanagement; Human Resources Management; Unternehmensbewertung; verschiedene ITIL-Themen (z. B. Service Portfolio Management, Demand Management, Financial Management, ...) IN2104: CIO Planspiel | CIO Business Game",
    "learning_outcomes": "Im CIO-Planspiel schlüpfen die Studierenden in die Rolle des CFO (Chief Financial Officer), CMO (Chief Marketing Office), COO (Chief Operations Officer) und CIO (Chief Information Officer), um eine Bank zu führen und managen. Mit dem Modul CIO-Planspiel sollen mehrere Lernergebnisse bei den Studierenden angestrebt werden. Nach der Teilnahme an dem CIO-Planspiel sind die Studierenden in der Lage:\n- zu verstehen, wie das Management einer Bank funktioniert,\n- strategisch zu denken und Entscheidungen zu treffen,\n- Wechselwirkungen zwischen Kennzahlen und Unternehmensbereichen zu analysieren,\n- Entscheidungen zur Unternehmensführung aus Sicht des CFO, CMO und COO, jedoch\ninsbesondere aus Sicht des CIO (Chief Information Officer) zu verstehen und zu bewerten,\n- selbstständig Themengebiete (z. B. Unternehmensbewertung, ITIL Service Management) zu\nerarbeiten und vor Mitstudierenden zu präsentieren.",
    "teaching_methods": "Praktikum",
    "media": "PowerPoint, Folien, Moodle",
    "literature": "Krcmar, H. (2015): Informationsmanagement. 6. Aufl., Springer, Berlin [u.a.] 2015.\nKrcmar, H., Utesch, M. (2011): Planen und Entscheiden: Das Planspiel Go4C. 1., Auflage,\nNorderstedt 2011.;\nPorter, M. E. (2011): Wettbewerbsstrategien. 11. Auflage, Frankfurt/Main 2011.;\nv. Rosenstiel, L.; Regnet, E.; Domsch, M. E. (2009): Führung von Mitarbeitern. 6., überarbeitete\nAuflage, Stuttgart 2009.;\nCopeland, T. E.; Weston, J. F.; Shastri, K. (2010): Finanzierungstheorie. 4., aktualisierte Auflage,\nMünchen 2010.",
    "lv_sws_lecturer": "Rinderle-Ma, Stefanie; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2105",
    "title": "Geschäftsprozesstechnologien und -management",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer 90-minütigen Klausur erbracht. Die Prüfungsform soll sicherstellen, dass die Studierenden Begriffe, Herausforderungen und Konzepte von Geschäftsprozesstechnologien verstanden haben und anwenden können. Daher besteht die Klausur aus einem Frageteil sowie einem Anwendungsteil. Der Anwendungsteil bezieht sich auf die in den Übungen vertieften Themen wie Process Mining Algorithmen und die Modellierung von Prozess Choreographien.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Bachelor\nIN0021 Einführung in die Wirtschaftsinformatik",
    "content": "Die Lehrveranstaltung beschäftigt sich mit fortschrittlichen Aspekten des Geschäftsprozessmanagements mit besonderem Blick auf grundlegende Technologien und aktuelle Forschungsthemen. Ausgehend von der prozessorientierten Entwicklung von Anwendungen werden die folgenden Themen behandelt:\n- Ressourcenverwaltung und Arbeitslistenmanagement\n- Logging und Monitoring von Geschäftsprozessen\n- Einführung in Process Mining\n- Geschäftsprozesse und Compliance\n- Anpassung von Prozessinstanzen zur Laufzeit und Evolution von Prozessen\n- Modellierung und Korrektheitsaspekte von Prozessnetzwerken/Prozesschoreographien\nIN2105: Geschäftsprozesstechnologien und -management | Business Process Technologies and Management",
    "learning_outcomes": "Nach erfolgreicher Teilnahme an dem Modul sind die Studierenden mit den verschiedenen Perspektiven von Geschäftsprozessen (Kontrollfluss, Datenfluss, Ressourcen) vertraut und können diese sowohl modellieren also auch in einer prozessorientierten Anwendung umsetzen. Die Studierenden verstehen die Bedeutung der Überwachung von und der Datensammlung während der Prozesslaufzeit. Die Studierenden können grundlegende Algorithmen des Process Mining basierend auf den während der Ausführung gesammelten Prozessdaten anwenden und die Ergebnisse interpretieren. Weiterhin sind die Studierenden mit den grundlegenden Begriffen der Korrektheit und Compliance von Prozessen vertraut und verstehen, welche Seiteneffekte bei den Änderungen von Prozessen zu kontrollieren sind. Schließlich sind die Studierenden in der Lage, partnerübergreifende Prozesse (so genannte Prozess Choreographien) zu modellieren.",
    "teaching_methods": "Das Lehrformat setzt sich aus Vorlesung und inhaltlich abgestimmter Übung zusammen. Dabei trägt der/die DozentIn in der Vorlesung den Inhalt vor. Es werden zusätzlich Videos des Lehrinhalts auf der Webseite zur Vorlesung zur Verfügung gestellt. Die Videos dienen zur Wiederholung und vertieften Einprägung der präsentierten Inhalte und können auch im Sinne eines „flipped classrooms“ eingesetzt werden. Die Vorlesungsinhalte setzen sich aus Theorie zu prozessorientierten Technologien und Geschäftsprozessmanagement sowie deren Illustration auf Basis praktischer Beispiele aus Realweltanwendungen und -projekten zusammen. Der Grund hierfür ist, dass Studierende sich mit prozessorientierten Problemstellungen konzeptionell auseinandersetzen und diese in ihrem Anwendungskontext verstehen. Der Übungsteil besteht aus vertiefenden Aufgaben zum Theorieteil der Vorlesung sowie Implementierungsaufgaben. Die Übungen werden einzeln bearbeitet. Der Übungsteil dient dem Verstehen und Anwenden der vermittelten Konzepte und soll darüber hinaus den Studierenden einen Überblick über die bestehende Toollandschaft geben. Weiterhin lernen die Studierenden das Paradigma prozessorientierte Anwendungsentwicklung kennen und sollen den Einsatz solcher Anwendungen für verschiedene Problemstellungen beurteilen können.",
    "media": "Folien, Videos, Übungsaufgaben",
    "literature": "- M. Weske: Business Process Management - Concepts, Languages, Architectures, Third Edition.\nSpringer 2019, ISBN 978-3-662-59431-5\n- W. Grossmann, S. Rinderle-Ma: Fundamentals of Business Intelligence. Data-Centric Systems\nand Applications, Springer 2015, ISBN 978-3-662-46530-1\n- M. Reichert, B. Weber: Enabling Flexibility in Process-Aware Information Systems - Challenges,\nMethods, Technologies. Springer 2012, ISBN 978-3-642-30408-8\n- Wil M. P. van der Aalst: Process Mining - Data Science in Action, Second Edition. Springer 2016,\nISBN 978-3-662-49850-7\n- Zusätzlich wird am Ende jeder Vorlesung relevante Literatur zur Verfügung gestellt.\nIN2105: Geschäftsprozesstechnologien und -management | Business Process Technologies and Management",
    "lv_sws_lecturer": "Rinderle-Ma, Stefanie; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nBusiness Process Technologies and Management (IN2105) (Vorlesung mit integrierten Übungen, 4\nSWS)\nRinderle-Ma S [L], Mangler J, Rinderle-Ma S"
  },
  {
    "module_id": "IN2111",
    "title": "3D User Interfaces",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 105,
    "hours_presence": 75,
    "examination_achievements": "The exam takes the form of a 90-minute written test. Half of the exam focuses on theoretical concepts, and the other half covers tools and approaches that were learned and used in the exercises and assignments (practical part). Questions are posed in English; answers can be given also in German. No lecture notes are permitted during the exam; a calculator and a dictionary (English mother tongue) may be used as aids. Questions allow for the assessment of acquaintance with principal concepts of three-dimensional user interfaces (w.r.t. to theoretical part and overview part). Short programming tasks and questions about program examples and three-dimensional user interfaces, as well as programming concepts, assess the ability to work with three-dimensional user interfaces and the ability to understand and extend small systems (w.r.t. the practical part). Successfully completing of programming tasks is assessed as a graded project as a voluntary mid-term achievement. The tasks are distributed throughout the semester. The points achieved are converted into a grade according to the maximum number of points. If the calculation of 1/3 voluntary mid-term performance and 2/3 of the exam grade results in an improvement, this is accepted as the module grade.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0001 Introduction to Informatics, IN0006 Introduction to Software Engineering, IN0007\nFundamentals of Algorithms and Data Structures, MA0901 Linear Algebra for Informatics\nIN2111: 3D User Interfaces | 3D User Interfaces",
    "content": "Detaillierte Behandlung von Konzepten der dreidimensionalen In-depth coverage of concepts of three-dimensional human computer interaction\n- Current input and output devices\n- Interaction techniques: selection, manipulation, travel, wayfinding, system control\n- Evaluation of 3D user interfaces\n- Future 3D user interfaces",
    "learning_outcomes": "Students receive in-detail knowledge on the advance conception and implementation of 3D user interfaces in interactive, immersive computer applications. At the end of the module they can analyze current concepts of three-dimensional interaction regarding their requirements on input and output devices and with respect to their functionality and usability. Furthermore, they can create and implement novel interaction concepts.",
    "teaching_methods": "Lecture, exercise, problems for individual study. The assignments are provided on a weekly basis via the teaching portal. They are discussed in the next exercise class, and a solution is presented. Work on the assignments and participation in the exercise class are voluntary. They serve as a means for students to deepen and test their acquired knowledge – as a self-monitoring aid to prepare for the written exam. In the second half of the semester, students can participate in a team project (final project) in which they can apply and discuss the learned concepts and methods in a freely selectable application context. The successful creation and presentation of a demonstrator as a final project is rewarded with a bonus.",
    "media": "Powerpoint slides, films, books, assignment sheets, demonstrations",
    "literature": "The lecture is based on:\n- 3D User Interfaces - Theory and Practice by: D. Bowman, E. Kruijff, J. Laviola Jr., and I.\nPoupyrev. Addison-Wesley Pearson Education, 2004. ISBN 0-201-758-67-9.\nFurther reading:\n- Human-Computer Interation in the New Millenium by: J. Caroll (Ed.). Addison-Wesley Pearson\nEducation, 2001. ISBN 0-201-70447-1.\n- Usability Engineering by: J. Nielson. Morgan Kaufmann, 1993. ISBN 0-12-518406-9.\n- The Design of Everyday Things by: D. Norman. Basic Books, 2002. ISBN 0-465-06710-7.\nFurther, continuously updated references to the latest publications, as well as links to online\nversions of many sources of literature can be found in the lecture slides and via the Moodle portal\nof the course.\nIN2111: 3D User Interfaces | 3D User Interfaces",
    "lv_sws_lecturer": "Plecher, David; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nDreidimensionale Nutzerschnittstellen (IN2111) (Vorlesung mit integrierten Übungen, 5 SWS)\nKlinker G [L], Plecher D, Liedtke S"
  },
  {
    "module_id": "IN2112",
    "title": "2D grafische Nutzerschnittstellen für Desktop-basierte und mobile Computeranwendungen",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Unregelmäßig",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 105,
    "hours_presence": 75,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer Klausur erbracht. Diese bezieht sich jeweils zur Hälfte auf Vorlesungsstoff (theoretischer Teil) und auf die erlernten Werkzeuge, Praktiken und Konzepte aus den Übungen und Hausaufgaben (praktischer Teil). Die Fragen werden in Englisch gestellt; sie können in Deutsch oder Englisch beantwortet werden. Es wird zu Beginn der Veranstaltung festgelegt, ob und ggf. welche Hilfsmittel (Unterlagen, Rechner etc) bei der Prüfung zugelassen sind. Wissensfragen überprüfen die Vertrautheit mit prinzipiellen Konzepten 2D grafischer Nutzerschnittstellen (bezogen auf den theoretischen und den Überblicksteil). Kurze Programmieraufgaben, Fragen zu kurzen Programmbeispielen und Fragen zu Programmierkonzepten überprüfen die Fähigkeit, mit 2D Nutzerschnittstellen umgehen und kleine Systeme verstehen und erweitern zu können (bezogen auf den praktischen Übungsteil). Die erfolgreiche Bearbeitung eines Abschlussprojektes kann als Bonus in die Bewertung der Abschlussprüfung einfließen. Diesbezügliche Details werden jeweils zu Beginn der Veranstaltung festgelegt.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0001 Einführung in die Informatik 1, IN0002 Praktikum: Grundlagen der Programmierung,\nMathematische und programmiertechnischen Grundkenntnisse",
    "content": "Grundlegende Konzepte in den Bereichen IN2112: 2D grafische Nutzerschnittstellen für Desktop-basierte und mobile Computeranwendungen | 2D graphical User Interfaces for Desktop-based and Mobile Computer Applications\n- Theorien, Prinzipien und Regeln\n- Benutzbarkeit von Mensch-Maschine Schnittstellen, Evaluationen\n- Interaktionsstile: Direkte Interaktion, Menus etc\n- Interaktionsgeräte: Desktop, mobil, multitouch\n- Designprozesse für Nutzerschnittstellen\n- Entwicklungs Tools",
    "learning_outcomes": "Nach erfolgreicher Teilnahme am Modul können die Studierenden die zugrundeliegenden Konzepte zweidimensionaler Interaktionsschnittstellen für mobile und desktop-basierte Computeranwendungen nutzen, analysieren und darauf aufbauend eigenständige Interaktionsstile entwickeln.",
    "teaching_methods": "Vorlesung, Übung, Aufgaben zum Selbststudium, Teamprojekt",
    "media": "Powerpointfolien, Filme, Bücher, Übungsblätter, Beispieldemonstrationen",
    "literature": "Die Vorlesung basiert auf dem Buch:\n- Designing the User Interface: Strategies for Effective Human-Computer Interaction (5. ed.) by:\nBen Shneiderman and Catherine Plaisant. Pearson International Edition. Addison-Wesley Pearson\nEducation, 2009. ISBN: 0321537351, http://www.pearsonhighered.com/dtui5einfo/\nHintergrundliteratur:\n- Human-Computer Interaction in the New Millenium by: John M. Caroll (ed.). Addison Wesley\nPearson Education, 2001. http://www.aw.com/cseng/. ISBN 0-201-70447-1\n- Usability Engineering by: Jakob Nielsen. Morgan Kaufmann, 1993. ISBN 0-12-518406-9\n- The Design of Everyday Things by: Donald A. Norman. Basic Books, 2002. ISBN 0-465-06710-7.\n- Doing Psychology Experiments by: David W. Martin. Cengage Learning Services, 2007. ISBN\n0495115770\nFür die Übungen:\n- Android Development : http://developer.android.com",
    "lv_sws_lecturer": "Klinker, Gudrun Johanna; Prof. i.R.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2114",
    "title": "Automotive Software - Methoden und Technologien",
    "level": "Bachelor/Master",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Eine 75-minütige Klausur, die die erwarteten Lernergebnisse und erworbenen Kompetenzen prüft. Nachgewiesen werden sollen Kenntnis und Verständnis der verschiedenen Arten automotiver Software und ihrer Charakteristika sowie die Konsequenzen für Entwicklung und Test. Belegt werden sollen außerdem Kenntnis und Verständnis einschlägiger Entwicklungsprozesse und Werkzeuge sowie die Fähigkeit zur kritischen Einordnung.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0006 Einführung in die Softwaretechnik,\nKenntnisse in Java und/oder C sind Voraussetzung für die Übung.",
    "content": "Im Fahrzeug nimmt die strategische Bedeutung von Software rapide zu. In der Vorlesung werden drei unterschiedliche Softwaredomänen im Fahrzeug vorgestellt: Infotainment, Karosserie/Komfort, Fahrerassistenz und Sicherheits-Elektronik. Zu jeder Domäne werden in einer Vorlesung die Anforderungen und Besonderheiten, sowie die theoretischen Grundlagen vermittelt. Nach den drei Softwaredomänen werden drei Querschnittsthemen zentral adressiert: Entwicklungsprozess, Architektur und Qualitätssicherung\n- Einleitung und Überblick \"Software und Software Engineering im Automotive Kontext\"\n- \"Embedded Systems\" Anwendung Karosserie und Komfort Elektronik\n- \"Echtzeit und Regelungstechnik\" Anwendung in Sicherheitselektronik und Fahrwerksregelung\n- \"Embedded Java\" Anwendung in Infotainement\n- \"Sensorik / Aktuatorik\" Anwendung Fahrerassistenzsysteme\n- \"Entwicklungsprozess I\" Anforderungen, logische Architektur\nIN2114: Automotive Software - Methoden und Technologien | Automotive Software - Methods and Technology\n- \"Entwicklungsprozess II\" von der logischen Architektur zum integrierten System\n- Modellbasieierte Entwicklung: embedded Middleware\n- Tools und Ausführungsmodelle: ASCET, Rose RT, MATLAB\n- Test und Qualitätssicherung\n- Software im Produktlebenszyklus\n- Herausforderungen der Zukunft\nIn der Übung sind 3 spezielle Programmieraufgaben zu lösen. Die Vorlesung kann parallel mit IN2084 \"Prozesse und Methoden beim Testen von Software\" gehört werden.",
    "learning_outcomes": "Nach der Teilnahme an dem Modul sind die Studierenden in der Lage, einfache eingebettete Systeme in der automotive Domäne zu entwickeln. Sie können die verschiedenen Anwendungsgebiete von Software im Automobil differenzieren und verstehen die Unterschiede sowie die Konsequenzen für die Entwicklung. Sie kennen zentrale Bestandteile einschlägiger Entwicklungsprozesse sowie typische Werkzeuge und können diese beurteilen.",
    "teaching_methods": "Vorlesung; praktische Übungen zur Entwicklung eingebetteter Systeme im Bereich automotive Software.",
    "media": "Folien in der Vorlesung, durch Tutoren angeleitete Implementierung in den Übungen.",
    "literature": "T. Schäuffele, J. Zurawka. Automotive Software Engineering - Grundlagen, Prozesse, Methoden\nund Werkzeuge.",
    "lv_sws_lecturer": "Pretschner, Alexander; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2115",
    "title": "Netzwerkalgorithmen",
    "level": "Bachelor/Master",
    "language": "Deutsch/Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Unregelmäßig",
    "credits": 8,
    "hours_total": 240,
    "hours_self_study": 150,
    "hours_presence": 90,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer Klausur erbracht. In dieser soll nachgewiesen werden, dass in begrenzter Zeit ein Problem erkannt wird und Wege zu einer Lösung gefunden werden können.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN2003 Effiziente Algorithmen und Datenstrukturen, Kenntnisse in diskreter Mathematik",
    "content": "- Modelle für verteilte Algorithmen und Datenstrukturen\n- Netzwerktheorie\n- Routing und Scheduling\n- Hashing und Caching\n- Das kontinuierlich-diskrete Prinzip\n- Zentral gesteuerte logische Netzwerke\n- Dezentrale logische Netzwerke\n- Anycasting und multicasting\n- Suchen und sortieren\n- Selbst-stabilisierende logische Netzwerke\n- Selbst-erhaltende logische Netzwerke\n- Logische Netzwerke für drahtlose Netze\n- Logische Netzwerke für Configware\nIN2115: Netzwerkalgorithmen | Network Algorithms",
    "learning_outcomes": "Teilnehmer beherrschen fundamentale Konzepte im Gebiet der Netzwerkalgorithmen. Sie sind in der Lage, grundsätzliche Netzwerke und Netzwerkparameter zu klassifizieren, und können Algorithmen für Overlaynetzwerke und verteilte Anwendungen über diese Netzwerke anwenden.",
    "teaching_methods": "Vorlesung, Übung, Hausaufgaben",
    "media": "Folien, Tafelarbeit, Übungsblätter",
    "literature": "F. Thomson Leighton:\nIntroduction to Parallel Algorithms and Architectures: Arrays, Trees, Hypercubes.\nMorgan Kaufman Publishers 1992\nJoseph JáJá:\nParallel Algorithms.\nAddison-Wesley Publishing Company 1992\nsowie aktuelle Forschungsarbeiten",
    "lv_sws_lecturer": "Mayr, Ernst; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2118",
    "title": "Database Systems on Modern CPU Architectures",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 105,
    "hours_presence": 75,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer Klausur ohne Hilfsmittel erbracht, in der; die Prüfungsdauer beträgt 90 Minuten. Wissensfragen überprüfen die Vertrautheit mit der Interaktion von Datenbanksystemen/- algorithmen mit modernen Rechnerarchitekturen. Transferaufgaben überprüfen die Vertrautheit mit der Entwicklung von Interna von Datenbanksystemen für moderne Rechnerarchitekturen. Kleine Szenarien überprüfen die Fähigkeit, Interna des Datenbanksystems für den gewinnbringenden Einsatz moderner Rechnerarchitekturen zu modifizieren.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0004 Einführung in die Rechnerarchitektur, IN0008 Grundlagen: Datenbanken, Bachelor\n(empfohlen)",
    "content": "- Architektur moderner CPUs und die Speicherhierarchie\n- Cache-Speicher, TLB, assoziative Speicher\n- Sprungvorhersage in CPUs\n- Sequentieller und randomisierter Speicherzugriff\n- Speicherzugriffsmuster bei der Anfrageauswertung in RDBMS\n- Tupelspeicherung in relationalen DBMS (RDBMS)\n- Vertikal fragmentierte RDBMS und Anfrageauswertung\n- Cache-bewusste Datenbank-Algorithmen (z.B. Joins, Sortierung)\n- Hauptspeicherdatenbanksysteme\n- Kompression zur Datendurchsatzsteigerung\nIN2118: Database Systems on Modern CPU Architectures | Database Systems on Modern CPU Architectures",
    "learning_outcomes": "Die Studierenden\n- verstehen die Interaktion von Datenbanksystemen/-algorithmen und modernen\nRechnerarchitekturen (hier: CPU, Cache, Primärspeicher) und\n- lernen, wie die Interna von Datenbanksystemen zu entwickeln bzw. zu modifizieren sind, um die\nEigenschaften dieser Rechnerarchitekturen mit Gewinn nutzen zu können.",
    "teaching_methods": "Das Modul wird als Vorlesung mit begleitender Übungsveranstaltung angeboten. In der Vorlesung werden die Inhalte im Vortrag durch anschauliche Beispiele sowie durch Diskussion mit den Studierenden vermittelt. Die Vorlesung soll den Studierenden dabei auch als Motivation zur eigenständigen inhaltlichen Auseinandersetzung mit den Themen sowie zum Studium der Literatur dienen. Jeweils passend zu den Vorlesungsinhalten werden in den Übungsveranstaltungen Aufgabenblätter angeboten, die die Studierenden zur selbstständigen Kontrolle sowie zur Vertiefung der gelernten Methoden und Konzepte nutzen sollen. Die Arbeit daran erfolgt selbstständig in Kleingruppen. Diese Kleingruppen bearbeiten auch Programmieraufgaben, später kleine Projekte, die abgegeben, kommentiert und bewertet sowie in der Übungsveranstaltung diskutiert werden.",
    "media": "Vorlesung mit animierten Folien",
    "literature": "- John L. Hennessy & David A. Patterson. Computer Architecture: A Quantitative Approach. 4th\nEdition, Morgan Kaufmann, 2007\n- Theo Härder, Erhard Rahm. Datenbanksysteme: Konzepte und Techniken der Implementierung.\nSpringer, Berlin; 2nd ed.\n- Hector Garcia-Molina, Jeff Ullman, Jennifer Widom. Database Systems: The Complete Book\n- D. E. Knuth. The Art of Computer Programming Volume III",
    "lv_sws_lecturer": "Neumann, Thomas; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nDatenbanksysteme und moderne CPU-Architekturen (IN2118) (Vorlesung mit integrierten\nÜbungen, 5 SWS)\nNeumann T, Lehner S, Riedl A"
  },
  {
    "module_id": "IN2124",
    "title": "Basic Mathematical Methods for Imaging and Visualization",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Prüfungsart: schriftliche Klausur Die Prüfungsleistung wird in Form einer 75-minütigen schriftlichen Klausur erbracht, in der die Studierenden anhand der gestellten Aufgaben nachweisen, dass sie über Kenntnisse der grundlegenden mathematischen Methoden verfügen, und diese erfolgreich bei der Lösung von einfachen, abstrakten mathematischen Problemstellungen anwenden können. Ferner demonstrieren die Studierenden beim Lösen von Aufgaben mit Bezug zu konkreten Anwendungen in Image Processing und Computer Vision, dass sie Anwendungsprobleme mathematisch formulieren können, ihre mathematischen Eigenschaften analysieren können, und mit geeigneten Methoden lösen können.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0015 Diskrete Strukturen, IN0018 Diskrete Wahrscheinlichkeitstheorie, IN0019 Numerisches\nProgrammieren, MA0901 Lineare Algebra für Informatik, MA0902 Analysis für Informatik",
    "content": "Grundlegende, oft angewandte Techniken werden in der Vorlesung präsentiert und anhand von Anwendungen aus Image Processing und Computer Vision demonstriert. Dieselben mathematischen Methoden kommen aber auch in anderen Ingenieurs-Disziplinen wie Künstliche Intelligenz, Machine Learning, Computergrafik, Robotik etc. zum Einsatz. Folgende Inhalte werden beispielhaft behandelt:\n- Lineare Algebra\nIN2124: Basic Mathematical Methods for Imaging and Visualization | Basic Mathematical Methods for Imaging and Visualization ++ Vektorräume und Basen ++ Lineare Abbildungen und Matrizen ++ Lineare Gleichungssysteme, Lösen von linearen Gleichungssystemen ++ Methode der kleinsten Quadrate ++ Eigenwertprobleme und Singulärwertzerlegung\n- Analysis\n++ Metrische Räume und Topologie ++ Konvergenz, Kompaktheit ++ Stetigkeit und Differenzierbarkeit im Mehrdimensionalen, Taylor-Entwicklung\n- Optimierung\n++ Existenz und Eindeutigkeit von Minimierern, Identifikation von Minimierern ++ Gradientenabstieg, Conjugate Gradient ++ Newton-Verfahren, Fixpunktiterationen\n- Wahrscheinlichkeitstheorie\n++ Wahrscheinlichkeitsräume, Zufallsvariablen ++ Erwartungswert und bedingte Erwartung ++ Schätzer, Expectation Maximization Methode In den Übungen gibt es die Möglichkeit für die Teilnehmer bei der Implementation oder Anwendung der Methoden zur Lösung von realen Problemstellungen ein tieferes Verständnis zu erlangen und praktische Erfahrung zu sammeln.",
    "learning_outcomes": "Nach der erfolgreichen Teilnahme an diesem Modul verstehen die Teilnehmer die grundlegenden mathematischen Techniken und Methoden. Sie sind dann in der Lage, reale Aufgabenstellungen im Gebiet Imaging und Visualisierung zu formulieren sowie Methoden für die Problemlösung auszuwählen, zu optimieren und zu bewerten. Sie können diese Techniken und Methoden auch auf andere Ingenieurs-Disziplinen wie Künstliche Intelligenz, Machine Learning, Computergrafik, Robotik, etc. anwenden.",
    "teaching_methods": "Das Modul besteht aus einer Vorlesung und einer begleitenden Übungsveranstaltung. Die Inhalte der Vorlesung werden im Vortrag und durch Präsentation mit Tafelanschrieb vermittelt. Studierende werden insbesondere durch die Lösung von Übungsblättern zur inhaltlichen Auseinandersetzung mit den Themen und ihren Anwendungen angeregt. Die Lösung der Übungsaufgaben wird in der Übungsveranstaltung besprochen.",
    "media": "Folienpräsentation, Tafelanschrieb",
    "literature": "MATLAB\n- Cleve Moler, first chapter of Numerical Computing with MATLAB, SIAM Linear Algebra\n- Yousef Saad, Iterative Methods for Sparse Linear Systems, SIAM\nIN2124: Basic Mathematical Methods for Imaging and Visualization | Basic Mathematical Methods for Imaging and\nVisualization\n- Lloyd N. Trefethen and David Bau, Numerical Linear Algebra, SIAM\n- Gilbert Strang, Introduction to Linear Algebra, Wellesley-Cambridge Press Analysis\n- Walter Rudin, Real and Complex Analysis, McGraw-Hill Optimization\n- Ake Björck, Numerical Methods for Least Squares Problems, SIAM\n- Jonathan Shewchuk, An Introduction to the Conjugate Gradient Method Without the Agonizing\nPain\n- Uri Ascher, A first course in numerical methods, SIAM Probability Theory\n- Heinz Bauer, Measure and Integration Theory, deGruyter\n- Sheldon Ross, Introduction to probability and statistics for engineers and scientists, Elsevier\nPDEs\n- Lloyd Nick Trefethen , Finite Difference and Spectral Methods for Ordinary and Partial Differential\nEquations\n- Cleve Moler, chapter 11 of Numerical Computing with MATLAB, SIAM",
    "lv_sws_lecturer": "Navab, Nassir; Prof. Ph.D.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2128",
    "title": "Entwicklungspraktikum Unternehmenssoftware",
    "level": "Master",
    "language": "Deutsch/Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester/Sommersemester",
    "credits": 10,
    "hours_total": 300,
    "hours_self_study": 210,
    "hours_presence": 90,
    "examination_achievements": "Prüfungsart: Projektarbeit Die Prüfungsleistung wird in Form von Hausaufgaben und einer Gruppenaufgabe erbracht. In den Hausaufgaben wird den Teilnehmenden der Umgang mit Entwicklungswerkzeugen und Unternehmensanwendungen näher gebracht. Durch die Bearbeitung der Hausaufgabe soll nachgewiesen werden, dass die Teilnehmer die Architektur moderner Unternehmenssoftware verstehen und technologische und wirtschaftliche Anforderungen an eigene Lösungsvorschläge ableiten können. Im Rahmen einer Projektaufgabe sollen die Teilnehmenden zeigen, dass sie eine komplexere Aufgabenstellung auf Basis der erlernten Hausaufgabe im Team bearbeiten können. Insbesondere weisen die Teilnehmenden nach, dass sie eigene Lösungsvorschläge auf Basis der identifizierten Anforderungen erarbeiten und diese mit aktuellen Entwicklungswerkzeugen implementieren können. Die Modulnote setzt sich aus der Bewertung der Hausaufgaben und der Projektaufgabe zusammen.",
    "repetition": "Folgesemester",
    "recommended_prerequisites": "IN0006 Einführung in die Softwaretechnik, IN0008 Grundlagen: Datenbanken, IN2085 Software\nEngineering für betriebliche Anwendungen - Bachelorkurs, IN2088 Softwarearchitekturen, IN9012\nEnterprise Information Systems vorteilhaft",
    "content": "Das Modul besteht aus einem theoretischen und einem praktischen Teil. Im theoretischen Teil werden Konzepte und domänen-spezifische Besonderheiten der Unternehmensanwendungen IN2128: Entwicklungspraktikum Unternehmenssoftware | Practical Course Enterprise Software erläutert und gängige Entwicklungswerkzeuge aus der Informatik vorgestellt. Dabei werden Architekturen, die zugrundeliegenden Geschäftsprozesse sowie methodische Grundlagen erläutert. Zudem werden im praktischen Teil die einzelnen Lerninhalte durch Programmierübungen und weitere eigenständige Ausarbeitungen vertieft. Hierbei stehen das Umsetzen der vermittelten Konzepte auf andere Aufgabenstellungen sowie die selbstständige Aneignung zusätzlicher Konzepte zur Lösung der Aufgabenstellung im Mittelpunkt. Dies beinhaltet u.a. das Identifizieren von Problemen, das Erarbeiten von Anforderungen, sowie die Implementierung und Evaluierung eigener Lösungen. Die Studenten trainieren das eigenständige Arbeiten und die kritische Reflexion eigener Ergebnisse, sowie die Präsentation der Ideen, Konzepte und Ergebnisse in verschiedenen praxisnahen Formen.",
    "learning_outcomes": "Nach der Modulteilnahme sind die Teilnehmenden in der Lage, die Architektur moderner Unternehmenssoftware zu verstehen und eigene Erweiterungen zu modellieren und zu programmieren. Sie können technologische und wirtschaftliche Anforderungen hinsichtlich ihrer Umsetzbarkeit in Unternehmenssoftware bewerten sowie eigene Lösungsvorschläge erarbeiten. Zudem können Sie aktuelle Entwicklungswerkzeuge für den Entwurf, die Implementierung und die Analyse von eigenen Applikationen bedienen. Die Teilnehmden sind in der Lage, die Bearbeitung einer komplexen Aufgabenstellung im Team durchzuführen.",
    "teaching_methods": "Praktikum",
    "media": "Folien, Übungsaufgabensammlung, Flipchartanschriften, Web-basiertes Nachrichtenforum",
    "literature": "Krcmar, H. (2010): Informationsmanagement. 5., neu überarb. und erw. Aufl., Springer, Berlin [u.a.]\n2010.\nKeller, H., Krüger, S. (2006): ABAP Objects: ABAP-Programmierung mit SAP NetWeaver. 3., neu\nüberarb. und erw. Aufl., SAP Press, Bonn 2006.\nAndres Bauer, Holger Günzel (2006): Data Warehouse Systeme - Architektur, Entwicklung,\nAnwendung, 2. neu überarb. und erw. Aufl., dpunkt Verlag, Heidelberg, 2006.",
    "lv_sws_lecturer": "Rinderle-Ma, Stefanie; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nPraktikum: Systems Programming (IN0012, IN2106, IN2128) (Praktikum, 6 SWS)\nBhatotia P [L], Bhatotia P, Chen J, Giortamis E, Meignan--Masson I, Okelmann P, Reimers S,\nThalheim J\nIN2128: Entwicklungspraktikum Unternehmenssoftware | Practical Course Enterprise Software\nPraktikum - Agile Project Management (IN0012, IN2106, IN2128, IN4206) (Praktikum, 6 SWS)\nKrusche S [L], Krusche S, Linhuber M\nPraktikum - iPraktikum, iOS Praktikum (IN0012, IN2106, IN2175, IN2128, IN4049) (Praktikum, 6\nSWS)\nKrusche S [L], Krusche S, Linhuber M, Sölch M\nAdvanced Practical Course - There and Back Again - Foundations and Applications of Process\n(Re-)Discovery with Petri Nets and Process Trees (IN2106, IN2128) (Praktikum, 6 SWS)\nRinderle-Ma S [L], Benzin J, Mangler J\nMaster-Praktikum - Sustainable Process Automation: Humans, Software and the Mediator Pattern\n(IN2128, IN2106, IN4303) (Praktikum, 6 SWS)\nRinderle-Ma S [L], Ehrendorfer M, Mangler J\nMaster-Praktikum - Supportive Process Automation and Worker Assistance (IN2128, IN2106)\n(Praktikum, 6 SWS)\nRinderle-Ma S [L], Ehrendorfer M, Mangler J\nAdvanced Practical Course - Run-Time Data Visualization for Business Processes (IN2106,\nIN2128) (Praktikum, 6 SWS)\nRinderle-Ma S [L], Ehrendorfer M, Mangler J\nPractical Course - JavaScript Technology (IN0012, IN2106, IN2175, IN2128) (Praktikum, 6 SWS)\nRost B [L], Yachdav G\nMaster-Praktikum - Enterprise Software Engineering am Beispiel von SAP (IN2128, IN2106,\nIN212801) (Praktikum, 6 SWS)\nWittges H [L], Fleischle A, Landler P\nMaster-Praktikum - Enterprise Software Engineering am Beispiel von SAP (IN2128, IN2106,\nIN212801) (Praktikum, 6 SWS)\nWittges H [L], Fleischle A, Landler P, Wittges H\nMaster-Praktikum - Entwicklung innovativer Services am Beispiel von SAP Technologien (IN2128,\nIN2106, IN212802) (Praktikum, 6 SWS)\nWittges H [L], Fuchs S, Haug K, Wittges H, Wolf N"
  },
  {
    "module_id": "IN2129",
    "title": "Entwicklungspraktikum Software Engineering für betriebliche Informationssysteme",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 10,
    "hours_total": 300,
    "hours_self_study": 210,
    "hours_presence": 90,
    "examination_achievements": "Prüfungsart: Projektarbeit Die Modulprüfung besteht aus einer Projektarbeit, in der die Studierenden in kleinen Gruppen eine innovative Webanwendung realisieren. Das Resultat wird anhand der Kriterien Entwurf, Programmiertechnik, Verwendung von UI Bibliotheken, Datenbankgestaltung und der Begründung der Auswahl der jeweiligen Technologien bewertet. Des Weiteren wird im Rahmen der Projektarbeit die Teamfähigkeit der einzelnen Studierenden beurteilt. Das Ergebnis der Applikation wird anschließend vor einem Publikum präsentiert, was ebenfalls in die Benotung miteinfließt. 1. Erste Präsentation (15-20 Minuten): 12,5% 2. Finale Präsentation (15-20 Minuten): 12,5% 3. Finale Applikation (Softwareapplikation): 75%",
    "repetition": "",
    "recommended_prerequisites": "IN2087 Software Engineering für betriebliche Anwendungen - Masterkurs",
    "content": "Die Studenten realisieren in kleinen Gruppen eine innovative Web-Anwendung mittlerer Komplexität in JavaScript, CSS, HTML, o.ä. Dabei benutzen sie für Web-Anwendungen zweckhafte Bibliotheken und Frameworks zur Web-Visualisierung, Realisierung der Anwendungslogik und persistenten Datenhaltung. IN2129: Entwicklungspraktikum Software Engineering für betriebliche Informationssysteme | Practical Course Software Engineering for Business Information Systems Es werden die Phasen Anforderungsanalyse und Entwurf mit Hilfe von UML durchlaufen. Die Studenten sind für das Projekt- und Qualitätsmanagement selbst verantwortlich. Die regelmäßige Präsentation des Projektfortschritts ist Bestandteil des Projekts.",
    "learning_outcomes": "Die Studierenden sind nach der Teilnahme an dem Modul in der Lage, im Team Methoden der objektorientierten Analyse und des objektorientierten Entwurfs in der Entwicklung einer Web- Anwendung anzuwenden. Studierende besitzen nach der Teilnahme die notwendige Kompetenz Web-Anwendungen mit aktuellen Programmiersprachen und Werkzeugen (Bibliotheken, Web- Frameworks und Datenbanken) kompetent umsetzen. Zudem sind die Studierenden in der Lage die Konzepte, Techniken und Werkzeuge zur kundenorientierten Entwicklung innovativer Web- Anwendungen zu bewerten und können diese bei der Erstellung eines entsprechenden Systems anwenden. Darüber hinaus verfügen die Studierenden nach der Teilnahme an dem Modul die Fähigkeit, eine Systemrealisierung im Team durchzuführen und die Ergebnisse zu präsentieren.",
    "teaching_methods": "Praktikum: Die Studierenden entwickeln die Web Applikation in einem iterativen und inkrementellen Prozess. Das Projektziel wird von Industriepartnern oder wissenschaftlichen Mitarbeitern vorgegeben. Ein wissenschaftlicher Betreuer übernimmt die Rolle des Coaches und steht für technische und organisatorische Fragen zur Verfügung. In regelmäßigen Terminen werden die Zwischenergebnisse des Projektes dem Industriepartner oder wissenschaftlichen Mitarbeiter als Project Owner vorgestellt.",
    "media": "Folienpräsentation, Standard Software Engineering Tools (IDE, configuration management, build\nmanagement, ...)",
    "literature": "[Os10] A. Osterwalder, Y. Pigneur: Busines Model Generation: A Handbook for Visionaries, Game\nChanges, and Challenges, John Wiley & Sons, 2010\n[Ro09] D. Roam: The Back of the Napkin: Solving Problems and Selling Ideas with Pictures,\nPortfolio Hardcover, 2009\n[Duy07] D. K. Van Duyne, J. A. Landay, J. I. Hong: The design of sites, Prentice Hall Professional,\n2007\n[Kru05] S. Krug: Don't make me think! Web Usability: Das intuitive Web, New Riders Press, 2005\n[Hoe06] R. Hoekman: Designing the Obvious. A Commonsense Approach to Web Application\nDesign, New Riders Press, 2006\n[Ba03] P. Baldi, P. Frasconi, P. Smyth: Modeling the Internet and the Web, Wiley, 2003\n[Me06] E. Mendes, N. Mosley: Web Engineering, Springer, 2006\n[Ja04] S. Jablonski, I. Petrov, C. Meiler, U. Mayer: Guide to Web Application and Platform\nArchitectures, Springer, 2004\nIN2129: Entwicklungspraktikum Software Engineering für betriebliche Informationssysteme | Practical Course Software\nEngineering for Business Information Systems",
    "lv_sws_lecturer": "Matthes, Florian; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nEntwicklungspraktikum Software Engineering für betriebliche Informationssysteme (IN2106,\nIN2129) (Praktikum, 6 SWS)\nMatthes F [L], Matthes F, Hoops F, Machner N, Philipp P, Schneider P, Afzal A, Dhaini M, Kuhn P,\nMeisenbacher S, Öz B, Poelman W, Schopf T, Vladika J, Wardas O\nEntwicklungspraktikum Software Engineering für betriebliche Informationssysteme (IN2106,\nIN2129) (Praktikum, 6 SWS)\nMatthes F [L], Matthes F, Hoops F, Machner N, Philipp P, Schneider P, Afzal A, Dhaini M, Kuhn P,\nMeisenbacher S, Öz B, Poelman W, Schopf T, Vladika J, Wardas O"
  },
  {
    "module_id": "IN2130",
    "title": "Entwicklungspraktikum Realisierung prozessorientierter Anwendungen",
    "level": "Master",
    "language": "Deutsch/Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester/Sommersemester",
    "credits": 10,
    "hours_total": 300,
    "hours_self_study": 210,
    "hours_presence": 90,
    "examination_achievements": "Prüfungsart: Projektarbeit Die Prüfungsleistung wird in Form eines prozessorientierten Anwendungsentwicklungsprojekts mit Meilensteinen und deren Präsentationen erbracht. Die durch die Meilensteine abgegrenzten Projektphasen werden auf Basis von Übungsblättern aufeinander aufbauend formuliert. Entlang dieser Übungsblätter wird die zu entwickelnden prozessorientierte Anwendung sukzessive realisiert und jeweils präsentiert. Die prozessorientierte Anwendungsentwicklung fußt auf dem Entwurf mittels der Standardnotation Business Process Modeling and Notation und der Umsetzung in einer Open Source Process Engine. Die Umsetzung umfasst dabei auch die Entwicklung und den prozessorientierten Aufruf von Web Services. Die Aufgabenstellungen für das Entwicklungsprojekt können generisch sein (z.B. Entwicklung einer Arbeitslistenkomponente) oder ein konkretes Anwendungsszenario realisieren (z.B. Umsetzung eines Produktionsablaufs). Durch die Prüfungsform wird das Verständnis der Studierenden darüber nachgewiesen, (a) was prozessorientierte Anwendungsentwicklung bedeutet, (b) welche Vorteile eine solche Herangehensweise birgt, (c) welche Herausforderungen in der Praxis bezüglich prozessorientierter Anwendungsentwicklung herrschen und (d) wie Fortschritte in einem prozessorientierten Entwicklungsprojekt unterschiedlichen Stakeholdern präsentiert werden können. Insgesamt setzt sich die Modulnote aus der Bewertung der prototypisch entwickelten prozessorientierten Anwendung (75%) sowie der Bewertung der Präsentationen (25%) zusammen.",
    "repetition": "Folgesemester\nIN2130: Entwicklungspraktikum Realisierung prozessorientierter Anwendungen | Practical Course Realization of\nProcess-oriented Applications",
    "recommended_prerequisites": "IN0006 Einführung in die Softwaretechnik, IN0008 Grundlagen: Datenbanken, IN2085 Software\nEngineering für betriebliche Anwendungen - Bachelorkurs, IN2088 Softwarearchitekturen",
    "content": "Das Modul führt zunächst die Grundlagen der prozessorientierten Anwendungsentwicklung ein, insbesondere zum Entwurf, Verifikation, Implementierung und Ausführung von Prozessen. Weiterhin werden Realweltbeispiele aus verschiedenen Anwendungsdomänen gezeigt. Dieser motivierende Grundlagenteil wird dann im Projektteil von den Studierenden praktisch umgesetzt und vertieft und zwar durch Prozessmodellierung in BPMN, Programmierung von Web Services, Programmierung von Stand-alone Tools zur Prozessverifikation und Prozesstransformation (z.B. auf Basis von Petrinetzen), Verwendung einer Process Engine (hauptsächlich (cpee.org), Verwendung von Standards wie OPC-UA, XES, und Techniken aus der XML-Familie. Programmiersprachen sind frei wählbar. Der Projektteil erweitert dabei die Grundlagen insbesondere auch in Richtung weiterführender Konzepte prozessorientierter Anwendungen, etwa Arbeitslistenkonzepte und in Richtung von Anforderungen aus Anwendungsdomänen, etwa die Anbindung von Cobots und Sensoren in der Produktion. Die Studierenden gewinnen somit theoretische Einblicke und vor allem praktische Erfahrung mit prozessorientiertem Entwurf und Entwicklung in eigenständiger Weise. Dies beinhaltet auch die Präsentation der Projektergebnisse.",
    "learning_outcomes": "Nach der Modulteilnahme sind die Studierenden in der Lage: # Prozesslogik in Form von BPMN zu beschreiben. # Ausführbarkeit von Prozesslogik zu verifizieren. # Prozesslogik mit Hilfe einer Open Source Process Engine ausführbar zu machen. # Eine Einbindung von menschlichen und Computing Ressourcen praktisch umzusetzen. # Message Correlation Patterns für asynchrone Kommunikation mit/zwischen prozessgestützten Systemen praktisch anzuwenden. # BPMN-basierte Prozessmodell zu parsen und zu transformieren. # Granularitätsüberlegungen bei der Umsetzung von konkreten Szenarien, z.B. im Manufacturing Umfeld mit Sensoren, Werkzeugmaschinen und Robotern, selbstständig anzustellen und umzusetzen. # Ihr Entwicklungsprojekt in verschiedenen Meilensteinen gegliedert unterschiedlichen Stakeholdern zu präsentieren.",
    "teaching_methods": "Praktikum, in dem die Studierenden in betreuter Einzelarbeit programmiertechnische Problemstellungen beim Entwurf prozessorientierter Applikationen in Form von Milestones bearbeiten. Dazu gehört das praktische Erlernen wie sich das prozessorientierte Paradigma von klassischer Applikationsentwicklung unterscheidet, wie das prozessorientierte Paradigma eine modularisierte Software-entwicklung unterstützen kann und welche Auswirkungen auf Performance und Umsetzung zu erwarten sind. IN2130: Entwicklungspraktikum Realisierung prozessorientierter Anwendungen | Practical Course Realization of Process-oriented Applications Im Rahmen des Praktikums sollen die Studierenden außerdem die Schnittstelle des prozessorientierten Paradigmas zur klassischen Datenanalyse explorieren und visualisieren sowie Analysen basierend auf annotierten Prozessmodellen entwickeln.",
    "media": "Videos, Folien, Projektbeschreibung, Webseite mit Forum, Screen-Sharing",
    "literature": "# Mathias Weske: Business Process Management - Concepts, Languages, Architectures, Third\nEdition. Springer 2019, ISBN 978-3-662-59431-5, pp. 1-417\n# www.bpmn.org\n# https://cpee.org/\n# Jürgen Mangler, Florian Pauker, Stefanie Rinderle-Ma, Matthias Ehrendorfer: centurio.work -\nIndustry 4.0 integration assessment and evolution. BPM (Industry Forum) 2019: 106-117\n# Juergen Mangler, Stefanie Rinderle-Ma: CPEE - Cloud Process Execution Engine. BPM (Demos)\n2014: 51",
    "lv_sws_lecturer": "Rinderle-Ma, Stefanie; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nAdvanced Practical Course - Message Correlation and Inter-Instance/Process Communication in\nProcess Aware Information Systems (IN2106, IN2130) (Praktikum, 6 SWS)\nRinderle-Ma S [L], Ehrendorfer M, Mangler J\nMaster Praktikum: Approaching Information System Challenges with Natural Language Processing\n(IN2106, IN2130) (Praktikum, 6 SWS)\nRinderle-Ma S [L], Sai C"
  },
  {
    "module_id": "IN2131",
    "title": "Entwicklungspraktikum Internetbasierte Geschäftssysteme",
    "level": "Master",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester/Sommersemester",
    "credits": 10,
    "hours_total": 300,
    "hours_self_study": 210,
    "hours_presence": 90,
    "examination_achievements": "Prüfungsart: Projektarbeit Die Studierenden werden im Rahmen der Prüfungsleistung Übungsblätter bearbeiten, welche dann Gegenstand einer mündlichen Prüfung sind. Die Prüfungsform weist nach, dass die Studierenden in der Lage sind, kleinere internetbasierte Informationssysteme zu entwerfen und zu entwicklen. Zudem schreiben die Teilnehmer eine Klausur bzw. beantworten mündliche Prüfungsfragen, in denen nachgewiesen wird, dass die Studierenden verbreitete Architekturen und Techniken zum Entwurf und zur Implementierung internetbasierter Informationssysteme kennen. Das Beantworten der Problem- und Fragestellungen erfordert eigene Formulierungen.",
    "repetition": "Folgesemester",
    "recommended_prerequisites": "IN0008 Grundlagen: Datenbanken, IN2085 Software Engineering für betriebliche Anwendungen\n- Bachelorkurs, IN0006 Einführung in die Softwaretechnik, Java oder andere objektorientierten\nProgrammiersprache, Prinzip dynamischer Serverkomponenten oder Web-Anwen",
    "content": "Java Programmierung ObjektorienMertes Design-Web Anwendungen & Java APIs- Lösung von OpMmierungsproblemen mit Gurobi",
    "learning_outcomes": "Nach der Teilnahme an dem Modul sind die Teilnehmer in der Lage Architekturen und Techniken zum Entwurf und zur Implementierung internetbasierter Informationssysteme zu bewerten. Zudem IN2131: Entwicklungspraktikum Internetbasierte Geschäftssysteme | Computer Lab Internet-Based Information Systems können sie Grundlagen solcher Systeme unter Verwendung etablierter Standards und Werkzeuge selbstständig entwickeln.",
    "teaching_methods": "Das Lehrformat ist ein Praktikum, in dem die Studierenden in betreuter Einzelarbeit programmiertechnische Problemstellungen beim Entwurf internetbasierter Informationssysteme und deren Lösungsfindung anhand von Übungsaufgaben bearbeiten. Darüber hinaus lernen die Studierenden in Gruppenarbeit ihre eigenen simplen Lösungsansätze (Anwendungen) zu entwerfen und das konstruktive Kritisieren der eigenen Arbeit und der Arbeit anderer. Hier üben die Teilnehmer vor allem ihre programmiertechnischen Fähigkeiten am PC mit Hilfe diverser Java Anwendungen und Gurobi.",
    "media": "Übungsblätter, PowerPoint, PC\nund E-Learning Plattform",
    "literature": "Slides and online-sources for relevant standards. Java in a Nutshell, David Flanagan O´Reilly\nNovember 2002 ISBN 978-3-89721-752-2. Java Web Services: Up and Running Martin Kalin O\n´Reilly Februar 2009 ISBN 978-0-596-52112-7.",
    "lv_sws_lecturer": "Bichler, Martin; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2140",
    "title": "Fortgeschrittene Konzepte verteilter Datenbanken - Programming Database Web Applications",
    "level": "Master",
    "language": "Deutsch/Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 4,
    "hours_total": 120,
    "hours_self_study": 75,
    "hours_presence": 45,
    "examination_achievements": "Prüfungsart: Projektarbeit Im Rahmen einer Projektarbeit werden die gewonnen theoretischen Erkenntnisse praktisch umgesetzt. Dafür wird in einem selbständig geleiteten Projekt eine eigenständige Webapplikation entwickelt. Die Leistung der Studierenden wird durch die Bewertung von vier Teilleistungen und deren Präsentationen bewertet. Die Teilleistungen sind wie folgt definiert: 1. Zunächst entwickeln die Studierenden in Teams eine neue Geschäftsidee. Diese muss sich von bestehenden Konzepten deutlich abgrenzen lassen. Dazu gehört eine Analyse des bestehenden Marktes, um die Umsetzbarkeit und die Rentabilität der Geschäftsidee rechtfertigen zu können. Hierbei muss eine geeignete Projektplanung und Aufgabenverteilung durchgeführt und begründet werden. Anschließend wird das erarbeitete Geschäftsmodell präsentiert. (18%) 2. Nach dem Finden der Geschäftsidee müssen geeignete Methoden für die Umsetzung geplant werden und erste Artefakte (UML-Diagramm, Projekt Ablauf Datagramm, Mock-Ups) entwickelt werden. Hierbei sollte auf ein nutzerzentriertes iteratives Vorgehensmodell geachtet werden. (14%) 3. Auf Basis des Mock-Ups wird ein früher Prototyp der Webapplikation entwickelt. Dabei sollten aktuelle Technologien für die Umsetzung der 3 Schichten (Client, Server, Datenbank) verwendet werden. Die Auswahl so wie die Aufteilung der Verantwortlichkeiten ist zu rechtfertigen. (16%) 4. Im letzten Schritt wird die finale Version vor einer breiten Zuhörerschaft präsentiert. Hierzu muss in einem Vortrag das gesamte Projekt (von der Idee, über die Umsetzung bis zur Lösung) präsentiert werden. Eine Demonstration der Prototypen ist Teil der Präsentation. Die Funktionalität der entwickelten Software ist ein wesentlicher Teil dieser Leistung. Jedes Teammitglied muss präsentieren und in der Lage sein architekturbezogenes Fragen zu jedem Teil des Projektes zu beantworten. Die Studierenden müssen zudem bei der Entwicklung auf gute Projektarbeit und Teamkommunikation achten. (52%) IN2140: Fortgeschrittene Konzepte verteilter Datenbanken - Programming Database Web Applications | Advanced Concepts of Distributed Databases - Programming Database Web Applications Die Studierenden präsentieren 3 mal jeweils in 20 Minuten: zu Anfang ihre Projektidee, gegen Semestermitte ihre Technische Architektur, am Ende das fertige System.",
    "repetition": "Folgesemester",
    "recommended_prerequisites": "- IN0001: Einführung in die Informatik 1\n- IN0006: Einführung in die Softwaretechnik\n- IN0008: Grundlagen: Datenbanken",
    "content": "Für eine Webapplikation läuft die Benutzerschnittstelle auf einem Web Browser und Web Services werden für den Ablauf benötigt. Webapplikationen haben gewöhnlich drei Schichten: Client, Server und Datenbank. Dieser Kurs behandelt Programmiertechnologien für Webapplikationen in allen drei Schichten.\n- Client: JavaScript, VBScript, Flash, OpenLaszlo\n- Server: Java (Struts, Spring MVC, JSF), Ruby, PHP, Python, Perl\n- Datenbank: O/R mapping, SQL, XQuery\nDiese Technologien sind häufig entweder opportunistisch und unterstützen die schnelle Entwicklung und häufige Freigabe von neuen Versionen oder sie sind systematisch und unterstützen ein sorgfältiges Design und längere Freigabezyklen.",
    "learning_outcomes": "Nach der erfolgreichen Teilnahme an diesem Modul verfügen Studierende über die notwendige Kompetenz, Webapplikationen eigenständig zu konzipieren, zu planen und umzusetzen. Des Weiteren sind sie nach der Teilnahme an dem Modul in der Lage Geschäftsmodelle im Web zu identifizieren. Sie kennen die drei Schichten einer Webapplikation (Client, Server, Datenbank) sowie die grundsätzliche Funktionsweise jeder einzelnen Schicht. Sie verfügen über eine tiefe und detaillierte Wissensbasis, welche ihnen erlaubt in anderen Konzepten dieselben Technologien zu identifizieren und zu erklären. Darüber hinaus sind die Studierenden in der Lage, nutzerzentrierte iterative Vorgehensmodelle zu erklären, zu bewerten und im Team anzuwenden.",
    "teaching_methods": "Vorlesung + Projekt",
    "media": "Digitale Folien\nIN2140: Fortgeschrittene Konzepte verteilter Datenbanken - Programming Database Web Applications | Advanced\nConcepts of Distributed Databases - Programming Database Web Applications",
    "literature": "- Bauer, G.: Architekturen für Web-Anwendungen: Eine Praxisbezogene Konstruktions-Systematik\n(ISBN: 3834805157)\n- Zillgens, Ch.: Responsive Webdesign: Reaktionsfähige Websites gestalten und umsetzen (ISBN:\n3446430156)\n- Saternos, C.: Client-Server Web Apps with JavaScript and Java (ISBN: 1449369332)\n- Purewal, S.: Learning Web App Development (978-1-4493-7019-0)\n- Manuale online",
    "lv_sws_lecturer": "Kemper, Alfons; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nFortgeschrittene Konzepte verteilter Datenbanken - Programming Database Web Applications\n(IN2140) (Projekt, 2 SWS)\nKemper A, Reif M\nFortgeschrittene Konzepte verteilter Datenbanken - Programming Database Web Applications\n(IN2140) (Vorlesung, 1 SWS)\nKemper A, Reif M"
  },
  {
    "module_id": "IN2141",
    "title": "Scientific Computing II",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "The examination consists of a written exam of 105 minutes in which students show that they are able to find solutions for problems arising in the field of scientific computing in a limited time. By questions on code snippets and given algorithms the participant’s knowledge on iterative methods in general and their implementation is examined. Small example problems test the capability to apply an iterative method to a given problem. The ability to evaluate the eligibility of a certain method is tested by example problems. Questions on performance features of given methods might also arise in this context and test the corresponding knowledge. The understanding of different steps of the simulation pipeline is examined by various tasks such as modelling a given problem, discretizing a given method or questions on numerical properties. Tasks which are used in the context of Molecular Dynamics require a deeper understanding of these steps.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Students should have basic knowledge in differential calculus and linear algebra. Knowledge in\nnumerical programming and scientific computing is recommended – e.g., from modules Scientific\nComputing I (IN2005), Modelling and Simulation (IN2010), Numerical Programming (IN0019)",
    "content": "The module introduces key steps of the scientific computing simulation pipeline on selected simulation scenarios, focusing especially on aspects of iterative solvers and efficient algorithmic treatment of numerical schemes. In terms of application areas, the module focuses on computational fluid dynamics and on particle simulations in scientific computing: Particular topics are:\n- sparse linear systems arising in discretized PDE systems (e.g. computational fluid dynamics)\nIN2141: Scientific Computing II | Scientific Computing II\n- multigrid methods (multigrid schemes, smoothers, impact of grid transfer operations and coarse\ngrid discretization)\n- Krylov subspace methods (steepest descent, conjugate gradients)\n- preconditioning techniques (hierarchical basis preconditioning)\n- convergence properties and asymptotic performance analysis of solvers; possible errors and\nsources of inefficiencies in solver components\n- Modelling in molecular dynamics simulation\n- time stepping schemes for particle simulations\n- efficient implementation of all-to-all interaction (e.g. Linked Cell, Verlet lists, Barnes-Hut and Fast\nMultipole algorithm) including parallelization aspects",
    "learning_outcomes": "At the end of the module, students are familiar with typical problems arising in the algorithmic treatment and implementation stages of the numerical simulation pipeline. For large, sparse linear systems arising from the discretization of (systems of) partial differential equations, they know the main classes of iterative solvers. They can evaluate the range of application of such methods in standard scenarios and they remember their basic performance features. Students can apply these methods to a given problem and implement them in code. They are aware of restrictions and possible errors arising in certain application scenarios. Students understand the typical steps of the simulation pipeline for particle-based simulations, from modeling over discretization and numerics to implementation and visualization. For the scenario Molecular Dynamics, they have detailed knowledge of these steps and are able to design and realize suitable simulation software. They can apply efficient algorithms to calculate pairwise forces between particles.",
    "teaching_methods": "This module comprises lectures and accompanying tutorials. The contents of the lectures will be taught by talks and presentations. Students will be encouraged to study literature and to get involved with the topics in depth. In the tutorials, concrete problems will be solved – partially in teamwork – and selected examples will be discussed.",
    "media": "Slides, whiteboard, exercise sheets",
    "literature": "- William L. Briggs, Van Emden Henson, Steve F. McCormick. A Multigrid Tutorial. Second Edition.\nSIAM. 2000.\n- J.R. Shewchuk. An Introduction to the Conjugate Gradient Method Without the Agonizing Pain.\nEdition 1.25. 1994.\n- W. Hackbusch. Iterative Solution of Large Sparse Systems of Equations. Springer, 1993.\n- Y. Saad. Iterative Methods for sparse linear systems, SIAM 2003.\n- M. Griebel, S. Knapek, G. Zumbusch, and A. Caglar. Numerical Simulation in Molecular\nDynamics. Springer, 2007.\n- M. P. Allen and D. J. Tildesley. Computer Simulation of Liquids. Oxford University Press, 2003.\nIN2141: Scientific Computing II | Scientific Computing II\n- D. Frenkel and B. Smith. Understanding Molecular Simulation from Algorithms to Applications.\nAcademic Press (2nd ed.), 2002.\n- R. J. Sadus. Molecular Simulation of Fluids; Theory, Algorithms and Object-Orientation. Elsevier,\n1999.\n- D. Rapaport. The art of molecular dynamics simulation. Camebridge University Press, 1995.",
    "lv_sws_lecturer": "Bader, Michael Georg; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nScientific Computing II (IN2141) (Vorlesung mit integrierten Übungen, 4 SWS)\nBader M [L], Bader M, Mishra M, Schneller D"
  },
  {
    "module_id": "IN2142",
    "title": "BGCE Leading Yourself and Others",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 3,
    "hours_total": 90,
    "hours_self_study": 30,
    "hours_presence": 60,
    "examination_achievements": "Type of Assessment: laboratory assignments. Individual conversations examine the self-assessment and group conversations examine the rest of the intended learning outcomes.",
    "repetition": "",
    "recommended_prerequisites": "keine",
    "content": "- Individual definition of leadership; competence profile of successful executives\n- Determining your position: strengths and weaknesses, claim of leadership\n- Perception, assessment, communication, feedback\n- Leading individual staff members: situations of leadership, dialogs\n- Leading groups: group dynamics, resistance\n- Conflict handling\n- Giving presentations, leading meetings\n- Instruments and styles of leadership (including coaching)\n- Leadership in the case of conflicting interests of the corporation and the employees",
    "learning_outcomes": "After successful participation in this module, participants are able to apply their improved skills to leadership problems such as conflict handling and group dynamics, especially based on experience by means of feedback and reflexion. They have extended their strengths and reduced IN2142: BGCE Leading Yourself and Others | BGCE Leading Yourself and Others their shortcomings based on a realistic self-assessment. They are able to give and receive constructive feedback.",
    "teaching_methods": "The module comprises a workshop. The content is taught by talks, teamwork and case studies. The students shall be prompted to work in teams with other students, criticise others in a constructive way, and work on problems and their solutions.",
    "media": "Slides, whiteboard, flip chart, facilitation tools",
    "literature": "Will be announced by supervisor before the course starts.",
    "lv_sws_lecturer": "Bungartz, Hans-Joachim; Prof. Dr. rer. nat. habil.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nSeminar Leading Yourself and Others (IN2142) (Seminar, 4 SWS)\nNeckel T, Obersteiner M, Pieper-Wörle R, Sun S"
  },
  {
    "module_id": "IN2156",
    "title": "Numerische Programmierung (CSE)",
    "level": null,
    "language": null,
    "semester_duration": null,
    "frequency": null,
    "credits": 8,
    "hours_total": null,
    "hours_self_study": null,
    "hours_presence": null,
    "examination_achievements": "",
    "repetition": "",
    "recommended_prerequisites": "",
    "content": "",
    "learning_outcomes": "",
    "teaching_methods": "",
    "media": "",
    "literature": "",
    "lv_sws_lecturer": "IN2156: Numerische Programmierung (CSE) | Numerical Programming (CSE)\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2157",
    "title": "Grundlegende Algorithmen (CSE)",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer schriftlichen Klausur im Umfang von 90 Minuten erbracht. In dieser weisen Studierende anhand der gestellten Aufgaben nach, dass sie die Grundlagen im Bereich der Algorithmen und Datenstrukturen beherrschen. Ferner zeigen sie, dass sie in begrenzter Zeit die erworbenen Kenntnisse anwenden können, um algorithmische Probleme zu analysieren und zu lösen, zum Beispiel: Bestimmung der Komplexität von Sortierverfahren, arithmetischen Problemen oder Graph- Algorithmen mit den behandelten Komplexitätsmodellen; Bestimmung bzw. Beweis nicht-funktionaler Eigenschaften (Korrektheit, Parallelität, etc.) dieser Algorithmen; Diskussion der Eignung eines Algorithmus bei gegebenen zusätzlichen Anforderungen. Die Aufgaben erfordern eigene Formulierungen bzw. Berechnungen zur Beantwortung.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0001 Einführung in die Informatik 1",
    "content": "Das Modul bietet eine Einführung in grundlegende sequentielle und auch parallele Algorithmen, sowie eine Einführung in die Analyse von Algorithmen. Dies umfasst insbesondere folgende Themen: Grundlagen: Berechnungsmodelle, Komplexitätsmaße, Schleifeninvarianten und Induktion zum Beweis der Korrektheit von Algorithmen Sortieren: Bubble-Sort, Merge-Sort, Quick-Sort, Median-Bestimmung, untere Schranken für Sortierprobleme, paralleles Sortieren Suchen: Lineare und binäre Suche, Suchbäume (AVL-Bäume), Hashing, etc. IN2157: Grundlegende Algorithmen (CSE) | Fundamental Algorithms Arithmetische Probleme: parallel prefix computation, parallele Matrix- und Vektoroperationen Graph-Algorithmen: Graph-Traversierung, Transitive Hülle, Kürzeste Wege, Minimale Spannbäume Anhand der behandelten Algorithmen werden die Berechnungsmodelle, Komplexitätsmaße sowie Analyse- und Beweistechniken vorgestellt und eingeübt.",
    "learning_outcomes": "Die Teilnehmerinnen und Teilnehmer verstehen grundlegende Algorithmen (inkl. einfacher paralleler Algorithmen) und können sie anwenden. Sie sind in der Lage, die Komplexitäts- sowie die Parallelitätseigenschaften von moderat komplexen Algorithmen zu analysieren. Für bekannte Algorithmen können sie diese Eigenschaften mit den behandelten Methoden beweisen. Die Teilnehmenden sind ferner in der Lage, die Eignung dieser Algorithmen für ein bestimmtes Problem zu untersuchen.",
    "teaching_methods": "Das Modul umfasst Vorlesungen und begleitende Tutorübungen. In der Vorlesung werden die Inhalte präsentiert und diskutiert. Die Studierenden werden angehalten, sich mit der einschlägigen Literatur zu beschäftigen und die Inhalte selbstständig vertieft zu betrachten. In den Übungen werden konkrete Beispielprobleme gelöst (auch in Gruppenarbeit) und es werden ausgewählte zusätzliche Beispiele behandelt.",
    "media": "Folien, Tafelarbeit",
    "literature": "- Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein. Introduction to\nAlgorithms. 2. Auflage, MIT Press, Cambridge, MA, 2001.\n- Jon Kleinberg, Eva Tardos. Algorithm Design. Pearson Education, Boston, MA, 2005.\n- Russell L. Shackelford , Introduction to Computing and Algorithms. Addison Wesley, 1997.\n- Robert Sedgewick, Kevin Wayne. Algorithms. 4th Edition, Pearson Education, 2011.",
    "lv_sws_lecturer": "Albers, Susanne; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nFundamental Algorithms (CSE) (IN2157) (Vorlesung, 2 SWS)\nSeidl H [L], Azeem Muqsit -, Grover K, Seidl H"
  },
  {
    "module_id": "IN2158",
    "title": "Fortgeschrittene Netzwerk- und Graph-Algorithmen",
    "level": "Bachelor/Master",
    "language": "Deutsch/Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 8,
    "hours_total": 240,
    "hours_self_study": 150,
    "hours_presence": 90,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer 120-minütigen Klausur erbracht. In dieser weisen Studierende anhand der gestellten Aufgaben nach, dass sie mit fundamentalen Konzepten der Netzwerk- und Graphenalgorithmen vertraut sind. Die Studierenden weisen nach, dass sie in begrenzter Zeit entsprechende algorithmische Probleme erkennen und analysieren können sowie Wege zu einer effizienten Lösung finden.",
    "repetition": "",
    "recommended_prerequisites": "IN0007 Grundlagen: Algorithmen und Datenstrukturen, IN2003 Effiziente Algorithmen und\nDatenstrukturen, IN2004 Effiziente Algorithmen und Datenstrukturen II",
    "content": "Das Modul bildet eine Vertiefung der aus den Vorlesungen \"Grundlagen: Algorithmen und Datenstrukturen\" und \"Effiziente Algorithmen und Datenstrukturen 1/2\" bekannten Graphenalgorithmen in Hinsicht auf neue algorithmische Methoden, Analyse und Anwendungsgebiete. Schwerpunkte des Moduls ist die Entwicklung von Zentralitätsindizes und zugehöriger Algorithmen sowie die Untersuchung der Dichte in (Teil-)Graphen. Es werden fortgeschrittene Algorithmen für Zusammenhangsprobleme und für das Assignment-Problem basierend auf der Ungarischen Methode entwickelt. Weitere optionale Themengebiete des Moduls sind die Graphfärbung, das Clustering, die Netzwerk-Statistik, der Netzwerk-Vergleich, algebraische Methoden, die spektrale Analyse sowie Robustheitsuntersuchungen. IN2158: Fortgeschrittene Netzwerk- und Graph-Algorithmen | Advanced Network and Graph Algorithms",
    "learning_outcomes": "Die Teilnehmer des Moduls sind in der Lage, spezialisierte Netzwerkprobleme bezüglich Ihrer Komplexität zu bewerten und durch Anwendung fortgeschrittener Algorithmen auf Graphen zu lösen. Dazu gehört insbesondere auch die Analyse und Bewertung typischer Eigenschaften wie Robustheit bzw. Fehleranfälligkeit komplexer Netzwerke. Weiterhin sind die Teilnehmer in die Lage, Algorithmen zur Optimierung verschiedener Netzwerkparameter zu entwickeln.",
    "teaching_methods": "Das Modul besteht aus einer Vorlesung und einer begleitenden Übungsveranstaltung. Die Inhalte der Vorlesung werden im Vortrag und durch Präsentation vermittelt. Studierende werden insbesondere durch die Lösung von Übungsblättern zur inhaltlichen Auseinandersetzung mit den Themen angeregt. Die Lösung der Übungsaufgaben wird in der Übungsveranstaltung besprochen. Zusätzlich erhalten die Studenten durch die Korrektur der Übungsblätter eine individuelle Rückmeldung über ihren Lernerfolg.",
    "media": "Folien, Tafelarbeit, Übungsblätter",
    "literature": "U. Brandes, Th. Erlebach (Eds.): Network Analysis - Methodological Foundations. Springer, 2005.",
    "lv_sws_lecturer": "Albers, Susanne; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2160",
    "title": "Randomisierte Algorithmen",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 8,
    "hours_total": 240,
    "hours_self_study": 150,
    "hours_presence": 90,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer Klausur von 120 Minuten erbracht. In dieser weisen Studierende anhand der gestellten Aufgaben nach, dass sie über fundamentale und weiterführende Kenntnisse im Bereich der randomisierten Algorithmen verfügen. Die Studierenden weisen nach, dass sie in begrenzter Zeit entsprechende algorithmische Probleme erkennen und analysieren können sowie Wege zu einer effizienten Lösung finden.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN2003 Effiziente Algorithmen und Datenstrukturen, IN0015 Diskrete Strukturen, IN0018 Diskrete\nWahrscheinlichkeitstheorie",
    "content": "Das Modul entwickelt zunächst grundlegende Ergebnisse im Bereich der randomisierten Algorithmen. Es werden der randomisierte Quicksort-Algorithmus sowie randomisierte Algorithmen für Min-Cut, Binary-Planar-Partition und die Verifikation von Matrizenmultiplikation hergeleitet. Das Modul behandelt die Konzepte von Las-Vegas und Monte-Carlo-Algorithmen und definiert verschiedene randomisierte Komplexitätsklassen. Es behandelt spieltheoretische Techniken wie Yao’s Minimax-Prinzip und wendet dieses auf die Spielbaumevaluation an. Das Modul stellt Momente vor und entwickelt elementare Ungleichungen wie die Markov- Ungleichung und die Chebyshev-Ungleichung. Diese werden eingesetzt, um das Coupon- Collector-Problem sowie die Probleme der Medianberechnung und der stabilen Heirat eingehend zu analysieren. Weiterhin entwickelt das Modul Chernoff-Schranken und analysiert mit ihrer Hilfe Routing- und Verdrahtungsprobleme. Die probabilistische Methode wird vorgestellt und auf zahlreiche Probleme angewandt. IN2160: Randomisierte Algorithmen | Randomized Algorithms Schließlich studiert das Modul randomisierte Datenstrukturen wie Treaps sowie das universelles und perfektes Hashing.",
    "learning_outcomes": "Die Teilnehmer des Moduls verfügen über gründliche Kenntnisse verschiedener Grundprinzipien randomisierter Algorithmen, zugehöriger Berechnungsmodelle, der entsprechenden mathematischen Analysen (Abschätzungen nach Markov, Chebyshev, Chernoff) sowie mehrerer paragdigmatischer Anwendungen.",
    "teaching_methods": "Das Modul besteht aus einer Vorlesung und einer begleitenden Übungsveranstaltung. Die Inhalte der Vorlesung werden im Vortrag und durch Präsentation vermittelt. Studierende werden insbesondere durch die Lösung von Übungsblättern zur inhaltlichen Auseinandersetzung mit den Themen angeregt. Die Lösung der Übungsaufgaben wird in der Übungsveranstaltung besprochen. Zusätzlich erhalten die Studenten durch die Korrektur der Übungsblätter eine individuelle Rückmeldung über ihren Lernerfolg.",
    "media": "Folien, Tafelarbeit, Übungsblätter",
    "literature": "R. Motwani, P. Raghavan: Randomized Algorithms. Cambridge University Press, 1995.\nM. Mitzenmacher, E. Upfal: Probability and Computing: Randomized Algorithms and Probabilistics\nAnalysis. Cambridge University Press 2005",
    "lv_sws_lecturer": "Albers, Susanne; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2161",
    "title": "Netzwerke für den Zahlungsverkehr",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 3,
    "hours_total": 90,
    "hours_self_study": 60,
    "hours_presence": 30,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer Klausur von 60 Minuten erbracht. In dieser soll nachgewiesen werden, dass in begrenzter Zeit ein Problem erkannt wird und Wege zu einer Lösung gefunden werden können.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "",
    "content": "Systemarchitektur (Hardware, Software) Protokollschichten und Protokolle (eg. ISO 8583) Sicherheitsarchitekturen und Sicherheitsstandards Authorisierungslösungen und Signaturen Arten von Attacken Mobile Architekturen und deren Sicherheitskonzepte (OTA Services) Anwendungen",
    "learning_outcomes": "Verstehen und Einschätzen der Grundlagen, Architektur und Sicherheit von Netzwerken für den nationalen und internationalen Zahlungsverkehr sowie deren rechtliche Rahmenbedingungen",
    "teaching_methods": "Vorlesung IN2161: Netzwerke für den Zahlungsverkehr | Networks for Monetary Transactions",
    "media": "Vorlesungsfolien",
    "literature": "Claudia Eckert, IT Sicherheit: Konzepte-Verfahren-Protokolle, Oldenburg 2007\nLienemann, TCP/IP-Praxis, Heise 2003\nLepschies, Ecommerce und Hackerschutz, Vieweg 2000\nRankl, Effing Handbuch der Chipkarten, Hanserverlag 2002\nPohlmann \"Digitale Signatur für optimale Sicherheit\", Hüthigverlag 1997\nZKA, Elektronisch cash im Umfeld von SEPA, 2006",
    "lv_sws_lecturer": "Baumgarten, Uwe; Prof. Dr. rer. nat. habil.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2168",
    "title": "Einführung in die Programmierung für Bioinformatiker",
    "level": "Bachelor",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 6,
    "hours_total": null,
    "hours_self_study": null,
    "hours_presence": 28,
    "examination_achievements": "",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0003 Einführung in die Informatik 2, IN0001 Einführung in die Informatik 1",
    "content": "- einfache Linux Kommandos\n- Shell\n- Perl\n- Java",
    "learning_outcomes": "Teilnehmer verfügen über das zur Lösung einfacher Programmieraufgaben notwendige theoretische und praktische Wissen. Kenntnisse\n- Linux:\n++ Aufbau der Linux-Dateisystemhierarchie ++ wichtige und häufig benutzte Unix-Kommandozeilenwerkzeuge ++ Aufbau von Pipes und Filtern zur Verbindung von Kommandos\n- Shell: Aufbau und Kommandos der Bash, einfache Programmierkonstrukte\n- Perl:\n++ Softwarekomponenten, Laufzeitumgebung ++ grundlegende Syntax und Programmierkonstrukte IN2168: Einführung in die Programmierung für Bioinformatiker | Practical Programming for Bioinformatics ++ typische Konstrukte ++ Aufbau regulärer Ausdrücke ++ O rganisation von Modulen ++ wichtige Zusatzmodule\n- Java\n++ Syntax und Programmierkonstrukte ++ Grundlagen der objektorientierten Programmierung ++ Ableitung von Klassen und Interfaces ++ Auto-(Un)Boxing ++ generische Klassen ++ Klassen zur Unterstützung von regulären Ausdrücken ++ Klassen für den Netzwerkzugriff\n- Grundzüge der Programmentwicklung\nFertigkeiten und Kompetenzen: Die Studenten sollen mit Hilfe der vermittelten Kenntnisse in der Lage sein, einfache gestellte Probleme analysieren zu können und einen Lösungsweg vorschlagen zu können. Dieser Lösungsweg soll dann in ein lauffähiges Programm überführt werden können. Die Beherrschung dieser Grundlagen stellt eine wichtige Voraussetzung für die erfolgreiche Teilnahme am Programmierpraktikum dar.",
    "teaching_methods": "Vorlesung",
    "media": "",
    "literature": "Wird in der Vorlesung bekanntgegeben",
    "lv_sws_lecturer": "Rost, Burkhard; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2170",
    "title": "Interdisziplinäres Projekt im Anwendungsfach Mathematik",
    "level": "Master",
    "language": "Deutsch/Englisch",
    "semester_duration": "Zweisemestrig",
    "frequency": "Wintersemester/Sommersemester",
    "credits": 16,
    "hours_total": 480,
    "hours_self_study": 330,
    "hours_presence": 150,
    "examination_achievements": "Prüfungsarten: Klausur und Projektarbeit. Die einzelnen Fragestellungen in der Klausur überprüfen die Kenntnis der grundlegenden Begriffe und Konzepte sowie die Beherrschung der Techniken aus einem Teilgebiet des Anwendungsfaches Mathematik. Dabei weisen die Studierenden nach, dass sie über das Domänenwissen verfügen, das sie dazu befähigt, sich in eine Anwendungsdomäne außerhalb der Informatik einarbeiten zu können. In der Projektarbeit (mit Dokumentation und Präsentation der Ergebnisse) weisen die Studierenden nach, dass sie das Domänenwissen, das für die Lösung der Projektfragestellung aus dem Anwendungsfach benötigt wird, im Team anwenden können. Sie können die Anforderungen zu einer Problemstellung des Anwendungsfaches in Zusammenarbeit mit Fachexperten analysieren, einen Lösungsentwurf modellieren und daraus ein System erstellen und testen. Mit der Dokumentation und Präsentation weisen Sie nach, dass sie die Ergebnisse ihrer Projektarbeit für Anwendungsexperten verständlich schriftlich und mündlich darstellen können. Zur Berechnung der Gesamtnote beträgt die Gewichtung Klausur: Projektarbeit 3:7. Die individuell gewählte Vorlesung und die ggf. begleitende Übung sowie die Projektarbeit sind zu einem Modul zusammengefasst, da sie in inhaltlichem Zusammenhang stehen, der vom Prüfungsausschuss überprüft wird. Die kompetenzorientierte Überprüfung der Lernergebnisse (die Theorie-Kenntnisse durch die Klausur und deren Anwendung als Teamarbeit im Rahmen der Projekttätigkeit) erfordert jeweils diese unterschiedlichen Prüfungsformen. Aus diesen Gründen sind beide Teilprüfungen erforderlich.",
    "repetition": "Folgesemester\nIN2170: Interdisziplinäres Projekt im Anwendungsfach Mathematik | Interdisciplinary Project within the minor subject\nMathematics",
    "recommended_prerequisites": "Das Interdisziplinäre Projekt kann eventuell auf Lernergebnisse aufbauen, die im Anwendungsfach\ndes Bachelorstudiums erworben wurden.",
    "content": "Das Interdisziplinäre Projekt umfasst den Erwerb von Domänenwissen in einem Gebiet des Anwendungsfaches Mathematik und ein Informatikprojekt zur Lösung einer Aufgabe im Bereich des Anwendungsfaches. Themensteller eines Interdisziplinären Projektes im Anwendungsfach Mathematik sind Prüfende der Fakultät für Mathematik der TUM. Die Aufgabenstellung des Projekts steht im inhaltlichen Zusammenhang mit dem erworbenen Domänenwissen, so dass ein Teil dieses Wissens bei der Zusammenarbeit mit Fachexperten zur Lösung der Projektaufgabe Verwendung findet. Das erworbene Domänenwissen wird zudem für das spätere Berufsleben benötigt. Das Interdisziplinäre Projekt schlägt damit eine Brücke von der Informatik zum Anwendungsfach.",
    "learning_outcomes": "Nach erfolgreicher Teilnahme an dem Modul sind die Studierenden in der Lage, das erworbene Domänenwissen anzuwenden (Transferleistung) und können sich dadurch in eine Anwendungsdomäne außerhalb der Informatik einarbeiten. Sie verfügen über das grundlegende Domänenwissen in einem abgegrenzten Gebiet des Anwendungsfaches Mathematik und kennen dort die wesentlichen Konzepte und Methoden. Darüber hinaus sind die Studierenden in der Lage, in einem anspruchsvollen interdisziplinären Projekt Anforderungen zu einer Problemstellung des Anwendungsfaches unter gegebenen technischen, ökonomischen und sozialen Randbedingungen zu analysieren und entsprechende Systeme mit den Mitteln der Informatik (Anforderungsanalyse, Entwurf, Implementierung, Test) im Team zu entwickeln. Sie können dabei die wichtigen Fragestellungen mit Bezug zum Anwendungsgebiet herausarbeiten und in Abstimmung mit Experten aus dem Anwendungsfach klären. Sie sind in der Lage, den im Projekt erarbeiteten Lösungsweg so aufzubereiten, dass sie ihn den Fachleuten aus dem Anwendungsfach schriftlich und mündlich präsentieren können.",
    "teaching_methods": "Das Modul besteht in der Regel aus einer Vorlesung und ggf. einer begleitenden Übung mit insgesamt 4 SWS und einer Projektarbeit mit 6 SWS. Die Vorlesung stellt die Grundbegriffe und Techniken aus einem Teilgebiet des Anwendungsfaches Mathematik vor und erläutert sie an Beispielen. In der in der Regel begleitenden Übung wird anhand geeigneter Aufgaben das Verständnis der Inhalte der Vorlesung vertieft und die Anwendung der Techniken geübt. Das Projekt löst ein Problem aus dem Anwendungsgebiet mit Mitteln der Informatik. Das Projekt wird dokumentiert und vor Fachpublikum aus dem Anwendungsgebiet präsentiert. Ein Teil des in der Vorlesung und ggf. begleitenden Übung erworbenen Domänenwissens wird verwendet, um projektbezogene Fragestellungen mit den Anwendungsexperten (Themensteller und Betreuer) zu diskutieren und zu klären. Das erworbene Domänenwissen wird zudem für die spätere berufliche Qualifikation benötigt. Die Wahl des Anwendungsgebietes, die Auswahl der Vorlesung und der ggf. begleitenden Übung und die Aufgabenstellung für das Projekt wird individuell auf gemeinsamen Antrag des Themenstellers und eines Teams von in der Regel 2 IN2170: Interdisziplinäres Projekt im Anwendungsfach Mathematik | Interdisciplinary Project within the minor subject Mathematics bis 4 Studierenden vom Prüfungsausschuss genehmigt. Dem Antrag muss eine etwa 2-seitige Projektbeschreibung mit Zeitplan, den zu bearbeitenden Meilensteinen und der Darstellung des Zusammenhangs von Vorlesung und ggf. begleitender Übung und Projektarbeit beiliegen. Die Lehr- und Lernmethoden, insbesondere Umfang und Lehrform der zur Wissensvermittlung im Anwendungsfach dienenden Lehrveranstaltungen, können dabei im Einzelfall vom oben vorgegebenen Rahmen abweichen. Das Modul erstreckt sich in der Regel über 2 Semester, wobei im ersten dieser Semester die Vorlesung mit ggf. begleitender Übung, die Prüfung dazu und erste Vorbereitungen für die Projektarbeit absolviert werden, die dann im darauf folgenden Semester abgeschlossen wird. Der Arbeitsaufwand für den Erwerb des Domänenwissens beträgt 60 Stunden für die Präsenzzeit in Vorlesung und ggf. Übung (4 SWS) und 90 Stunden Eigenstudium für die Nachbereitung und Vorbereitung auf die Prüfung. Der Arbeitsaufwand für die Projektarbeit teilt sich auf in 90 Stunden Präsenzzeit (Instruktion durch die Betreuer, Teambesprechungen im Beisein der Betreuer sowie die eigene Präsentation und die der Teammitglieder, 6 SWS) sowie 240 Stunden für das Eigenstudium (190 Stunden Entwicklung des Programmes, 35 Stunden Dokumentation, 15 Stunden Vorbereitung der Präsentation). In der Summe ergibt sich damit ein Arbeitsaufwand von 480 Stunden (16 Credits).",
    "media": "Skript bzw. Folien der Vorlesung, Aufgabenblätter der Übung, Plattform zum kooperativen\nArbeiten, Softwareentwicklungsumgebungen, anwendungsspezifische Werkzeuge",
    "literature": "Wird vom Dozenten der Vorlesung bzw. vom Betreuer der Projektarbeit bekannt gegeben.",
    "lv_sws_lecturer": "Bungartz, Hans-Joachim; Prof. Dr. rer. nat. habil.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2182",
    "title": "Praktikum Scientific Computing (CSE)",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 90,
    "hours_presence": 90,
    "examination_achievements": "Type of Assessment: exercise work. Students submit code for 4-6 exercise sheets. By this code the students show that they can implement methods and algorithms appearing in scientific computing. Furthermore, participants show via the code submissions that they take care of the reproducibility of the achieved results; they demonstrate their ability of teamwork for the code submissions handed in for the whole team. By benchmarking their implementation they show that they can apply the respective algorithms and methods. For each worksheet of about 3-6 pages, a short discussion of about 20-30 min between the supervisors and the students takes place after an assignment is submitted and corrected. On an individual basis, students explain their implementation and the theoretical background of the implementation and show their capability of analyzing and interpret the underlying methods and the according properties. The final grade is an averaged grade from the code submissions (50%) and the short discussions (50%).",
    "repetition": "",
    "recommended_prerequisites": "Basic skills in linear algebra and differential calculus.",
    "content": "The lab course gives an application-oriented introduction to the following topics using the programming language MATLAB:\n- simulation of discrete processes\nIN2182: Praktikum Scientific Computing (CSE) | Scientific Computing Lab\n- explicit and implicit single-step methods for ordinary differential equations\n- numerical methods for stationary and non-stationary partial differential equations relying on finite-\ndifference discretizations",
    "learning_outcomes": "At the end of the module, students are able to apply important methods and algorithms of numerical programming and can implement these within a numerical programming environment. They have experience with the practical use of the respective techniques and tools and are able to recognize typical properties of numerical methods. Participants are able to work in small teams to design and implement software prototype solutions for the specified tasks. They are able to discuss and assess the correctness, reproducibility and reliability of their obtained results following established best practices of the scientific and general community.",
    "teaching_methods": "This module consists of practical course and self-study time. The theoretical contents of the module will be taught by talks and presentations by the supervisors. Students will be encouraged to study literature to get involved with the topics in depth and to discuss this in small teams of 2-3 students. Specific programming problems are posed as homework exercise, so students learn how to work on respective solutions. In these assignments the students implement numerical methods and algorithms, which frequently appear in the field of scientific computing. The students work on the assignments in the small groups and get, if necessary, advice by the supervisors during the computer lab session. The participants submit their solution and get feedback. A short discussion on topics of the assignment takes place between the supervisors and the students of each group after an assignment is submitted and corrected. Overall, the joint discussion of scientific and methodological decisions plays an important role. The students should also learn to critically reflect on possible consequences and to articulate them in the group.",
    "media": "Slides, whiteboard, exercise sheets",
    "literature": "- MATLAB - The Language of Technical Computing.http://www.mathworks.com/products/matlab/\n- Boyce, DiPrima. Elementary Differential Equations and Boundary Value Problems. Wiley, 1992.\n- Michael Hanke. Short Introduction to COMSOL Multiphysics. http://www.nada.kth.se/kurser/\nkth/2D1266/femlabcrash.pdf",
    "lv_sws_lecturer": "Bungartz, Hans-Joachim; Prof. Dr. rer. nat. habil.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nCSE Primer (Scientific Computing (CSE) (IN2182) (Tutorium, 8 SWS)\nBungartz H [L], Chourdakis G\nIN2182: Praktikum Scientific Computing (CSE) | Scientific Computing Lab\nPraktikum Scientific Computing (CSE) (IN2182) (Praktikum, 6 SWS)\nBungartz H [L], Lehmberg D, Liu Weng H, Obersteiner M, Reiz S"
  },
  {
    "module_id": "IN2183",
    "title": "CSE Seminar Scientific Computing",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester/Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 120,
    "hours_presence": 30,
    "examination_achievements": "Type of Assessment: presentation. The students give a scientific presentation, for which they prepare an accompanying seminar paper. The presentation (duration typically 30-45 minutes) examines their ability to present a challenging scientific topic in an understandable and descriptive manner to their peers. The seminar paper (extent typically 8-10 pages) examines whether the participants are able to summarize and review existing scientific work and are able to write a scientific paper on a well- defined scientific topic in CSE. Seminar papers and/or presentations can be assigned to small teams of students (at most 3). In that case the individual responsibility and contribution of each student must be defined. The participation of students in the discussion of presentations and also the feedback provided to seminar papers of other students (e.g., as part of a peer-review) are also assessed. In this way, their communication and cooperation skills are evaluated. Lecturers announce at the beginning of the course how the research paper, presentation and discussion/feedback activities will be weighted to calculate the module grade.",
    "repetition": "",
    "recommended_prerequisites": "None\nIN2183: CSE Seminar Scientific Computing | CSE Seminar Course Scientific Computing",
    "content": "The lecturers determine a current research area in Computational Science and Engineering that defines the overall seminar theme and motivates the individual topics for the participating students. Seminar themes shall reflect current trends and novel developments in Computational Science and Engineering. Hence, while seminars might be repeatedly offered on the same or a similar topic, lecturers can also choose themes that are only offered once. Some examples of such seminar topics are:\n- Dynamical Systems & Scientific Computing\n- Fluid-Structure Interaction\n- Fundamentals of Wave Simulation\n- Fluid-Structure Interaction\n- Future Trends in Computing and CSE\n- High-Dimensional Methods and Problems in CSE\n- Case Studies in CSE\n- Software Engineering in Computational Intensive Applications\nA strong focus is put on acquiring and training presentation and scientific writing skills during the seminar. This includes (among others):\n• Typical structure of scientific papers and presentations (e.g., introduction, materials & methods,\nresults, …); role of these components.\n• Explaining materials & methods in papers and presentations\n• Discussing related work (with appropriate citation, etc.)\n• Presentation and discussion of results in papers and publications\n• Appropriate use of tools for scientific papers and presentations; how to include illustrative\nexamples and practical demonstrations\n• Appropriate use of media in presentations (projection, blackboard/flipchart, etc.)\nIn that context, the CSE-specific conventions, styles and habits of presenting or scientific writing shall be acquired, but also differences of such conventions between various disciplines shall be discussed.",
    "learning_outcomes": "At the end of the module, the participants are able to independently acquire knowledge and expertise on a well-defined scientific topic in CSE and to present this topic to a group of peers in written and lecture form. The students are proficient in the required scientific writing and presentation techniques. They are able to identify and select relevant scientific literature for the defined topic and work out a seminar paper that summarizes the most important aspects. They can identify key aspects that determine the reproducibility of scientific work and discuss or even demonstrate approaches that allow to reproduce respective results. They have also intensified their discipline-specific communication skills: in their peer group, they are able to discuss aspects of trustworthiness, reproducibility and impact (e.g., on science, industry IN2183: CSE Seminar Scientific Computing | CSE Seminar Course Scientific Computing or society) of methods, techniques or results presented in their talks, also comparing between different approaches to tackle problems. They can identify strengths and weaknesses in peer presentations, and are able to communicate constructive and scientifically based feedback to fellow participants.",
    "teaching_methods": "The lecturers choose a collection of appropriate topics from the designated seminar theme that together form the required methodology and cover significant research related to the seminar theme. Each participant works on one topic of this collection. For topics that are closely related, students shall collaborate with the other students who work on these topics to coordinate their individual contributions and make sure that their paper and presentation connects well to peer presentations and/or to presentations within their topical group. Participants shall also make sure that their paper and presentation integrate with the overarching seminar theme. Participants prepare their research paper and presentation individually, during the time assigned for self-study. Lecturers (and additional tutors assigned to students) support the participants during preparation in acquiring the topical and scientific skills. In particular, the students receive support in identifying and selecting study literature and discuss the material with their lecturer and tutor to get familiar with the topics. Students provide feedback on other participants’ research papers as part of a peer review process and/or as part of coordinating their presentations. Participants give their presentations in plenum sessions, which can be organized as weekly meetings or as block seminars. The content of the presentations is discussed during the plenum session. Students shall contribute to these discussions, may ask for additional explanations or clarification of specific details, e.g., but are also expected to provide feedback on presentation techniques by their peers.",
    "media": "Projector, slides, whiteboard, platform for collaborative work, application-specific tools",
    "literature": "Robert Day, “How to Write & Publish a Scientific Paper”, Greenwood Press (various editions)\nNicholas J. Higham, “Handbook of Writing for the Mathematical Sciences”, SIAM.\nJustin Zobel, “Writing for Computer Science”, Springer.\nDomain specific literature to be announced by the lecturers.",
    "lv_sws_lecturer": "Bader, Michael Georg; Prof. Dr.\nIN2183: CSE Seminar Scientific Computing | CSE Seminar Course Scientific Computing\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nM.Sc. Seminar: Modern Trends in High Performance Computing (IN218305, IN2107) (Seminar, 2\nSWS)\nBader M [L], Bader M, Liu Weng H, Narvaez Rivas S\nSeminar Course - Fundamentals of Wave Simulation - Solving Hyperbolic Systems of PDEs\n(IN2183, IN2107) (Seminar, 2 SWS)\nBader M [L], Schneller D\nMaster-Seminar - Recent Highlights in Visual Data Analytics (IN2107, IN4778) (Seminar, 2 SWS)\nBukenberger D, Neuhauser C, Weitz S, Westermann R\nSeminar Computational Aspects of Machine Learning (IN2107,IN0014, IN2183) (Seminar, 2 SWS)\nBungartz H [L], Bolager E, Burak I\nSeminar Quantum Networks (Seminar, 2 SWS)\nCebe A, Vogl T\nSeminar - Deep Learning für die Naturwissenschaften (IN0014, IN2107, IN45051) (Seminar, 2\nSWS)\nCremers D [L], Ramesh Kumar K\nMaster-Seminar: Cloud-Computing (IN2107, IN4960) (Seminar, 2 SWS)\nGerndt H [L], Gerndt H, Chadha M\nSeminar - Selected Topics in Machine Learning Research (IN2107, IN4872) (Seminar, 2 SWS)\nGünnemann S [L], Kuvshinov A, Scholten Y, Schuchardt J, Sommer J\nComputational Photonics and Nanoelectronics (Advanced Seminar) (Seminar, 2 SWS)\nJirauschek C [L], Jirauschek C ( Haider M, Rinderle M, Schreiber M, Stowasser J, Seitner L, Asirim\nÖ, Yuan Y ), Gagliardi A\nMaster-Seminar - Causality and Machine Learning (IN2107, IN4483) (Seminar, 2 SWS)\nKilbertus N [L], Manten G\nSeminar: Seminar on Efficient Programming of HPC Systems – Frameworks and Algorithms\n(IN0014, IN2107, IN4472) (Seminar, 2 SWS)\nLaure E\n(IN0014, IN2107, IN4875) Seminar Computational Social Science: Generative AI and Democracy\n(Seminar, 2 SWS)\nMatter D ( Pfeffer J )\nMaster-Seminar - Deep Learning for Medical Applications (IN2107, IN4860) (Seminar, 2 SWS)\nExercises on Computational Methods for Operator-Based Analysis (Übung, 2 SWS)\nPolifke W [L], Brokof P, Varillon G\nSeminar on Computational Methods for Operator-Based Analysis (Seminar, 2 SWS)\nPolifke W [L], Brokof P, Varillon G\nSeminar - Deep Learning in Computer Graphics (IN2107, IN0014, IN4858) (Seminar, 2 SWS)\nThürey N [L], Holl P, List B, Weitz S\nSeminar - Deep Learning in Physics (IN2107, IN0014, IN4939) (Seminar, 2 SWS)\nThürey N [L], Holzschuh B, Liu Q, Weitz S\nSeminar - Recent Trends in 3D Computer Vision (IN0014, IN2107, IN4826) (Seminar, 2 SWS)\nTombari F [L], Brasch N, Örnek E, Jung H, Li K, Tristram F, Reichard K\nSeminar Quantum Information Processing Devices (Seminar, 2 SWS)\nVogl T\nSeminar: Next Generation AI Hardware (IN0014, IN2107, IN4471) (Seminar, 2 SWS)\nWeidendorfer J ( Durillo Barrionuevo J )"
  },
  {
    "module_id": "IN2184",
    "title": "BGCE Scientific Writing",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 2,
    "hours_total": 60,
    "hours_self_study": 40,
    "hours_presence": 20,
    "examination_achievements": "Type of Assessment: laboratory assignment and research paper. The research paper realised as homework assignments examines the students' ability to compose scientific articles. The laboratory assignment assesses their capability to analyse and review peer publications with respect to scientific writing criteria.",
    "repetition": "",
    "recommended_prerequisites": "",
    "content": "The seminar covers the following topics:\n- The review and publishing process for scientific publications\n- Classification and characteristics of different scientific publications (thesis, journal article,\nproceedings paper, etc.)\n- How to structure scientific publications (introduction, materials and methods, results, discussion)\n- How to write title and abstract\n- How to write the introduction\n- Presentation of materials and methods\n- How to present and discuss results\n- Efficient tables and graphs\n- Styles and conventions for citing scientific literature\n- Language issues in scientific writing\n- Design a scientific poster\n- How to generate a CV\nIN2184: BGCE Scientific Writing | BGCE Scientific Writing",
    "learning_outcomes": "After the successful participation at the module, students are able to contribute to scientific publications and to individually compose scientific articles. They know the required scientific skills and conventions, and are able to select and apply them in practice. The participants can analyse and review peer publications with respect to scientific writing criteria.",
    "teaching_methods": "The students shall be prompted to study literature and to get familiar with the topics. They prepare and give presentations and write a term paper.",
    "media": "Slides, whiteboard, facilitation tools",
    "literature": "- Robert A. Day: How to Write & Publish a Scientific Paper, Oryx Press\n- Nicholas J. Higham: Handbook of Writing for the Mathematical Sciences, SIAM",
    "lv_sws_lecturer": "Bungartz, Hans-Joachim; Prof. Dr. rer. nat. habil.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2185",
    "title": "BGCE Research Day",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Dreisemestrig",
    "frequency": "Wintersemester/Sommersemester",
    "credits": 2,
    "hours_total": 60,
    "hours_self_study": 45,
    "hours_presence": 15,
    "examination_achievements": "Type of Assessment: presentation. The presentation examines the ability of the participants to present a challenging scientific topic by various presentation formats. Furthermore, the presentation including discussions assess the students capability to interprete, discuss, and analyse the presented interdisciplinary research according to the respective scientific practices.",
    "repetition": "",
    "recommended_prerequisites": "",
    "content": "The participants present their current research work (Master's Thesis, BGCE honours project, internships and practical work, student assistant projects) in diverse presentation formats and discuss the presented research. The seminar program is accompanied by invited presentations of senior researchers.",
    "learning_outcomes": "At the end of the module, the participants are able to independently work out and give presentations on a challenging scientific topic using various formats. They are proficient in interpreting, discussing, and analysing the presented interdisciplinary research according to the respective scientific practices. IN2185: BGCE Research Day | BGCE Research Day",
    "teaching_methods": "During the Research Day, BGCE students meet with the other BGCE students from the three programs CSE, COME and CE. The students present current work and former experience in different kinds of talks. Discussions deepen the exchange of knowledge and experience. Invited guest lecturers provide insight in current research.",
    "media": "Whiteboard, flipchart, presentation slides",
    "literature": "n.a.",
    "lv_sws_lecturer": "Bungartz, Hans-Joachim; Prof. Dr. rer. nat. habil.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2186",
    "title": "Praktikum Numerische Strömungsmechanik (CSE)",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 10,
    "hours_total": 300,
    "hours_self_study": 210,
    "hours_presence": 90,
    "examination_achievements": "Type of Assessment: exercises Students submit code according to 4-6 exercises. By this code the students show their implementation skills of computational fluid dynamics (CFD) methods. The correctness of the handed in solutions show the participants validation skills. In short discussions for each exercise, students explain their implementation and the numerical background of the implementation and show their knowledge of the underlying numerics. Further questions on the reported simulation results examine the students' ability to interprete these results. The grade for each exercise sheet is an averaged grade from the code submission (50%) and the short discussion (50%). Typically, there are 5 exercise sheets (weighting: 4*1/6 + 1* 2/6). If a different weighting will be used, the students will be informed 2 weeks before the start of the semester.",
    "repetition": "",
    "recommended_prerequisites": "Module IN2005 Introduction to Scientific Computing: Scientific Computing 1, or equivalent\nknowledge, basic software engineering knowledge",
    "content": "The lab course covers the following topics:\n- Numerical simulation of flows using the Navier-Stokes equations\n- Discretisation of space/time\nIN2186: Praktikum Numerische Strömungsmechanik (CSE) | Computational Fluid Dynamics Lab\n- Stability and convergence criteria\n- Implementational issues, efficient solver strategies",
    "learning_outcomes": "After the successful participation at the module, students are able to independently implement a code for the numerical simulation of fluid dynamics. They know the underlying fluid dynamic equations as well as basic methods of their numerical treatment. The participants are able to verify the code and the resulting simulations. They are able to visualize the simulation output with a suitable software and have the competence to interprete, document, and present the results.",
    "teaching_methods": "This module comprises a practical course. The theoretical contents of the module will be taught by talks and presentations by the supervisors. Students will be encouraged to study literature to get involved with the topics in depth. The single steps of a computational fluid dynamics (CFD) solver are posed as programming assignments. The students work on the assignments in small groups and get, if necessary, advice by the supervisors during the computer lab session. The participants submit their solution and get feedback. In a project phase at the end of the module the students work on an own topic of the field and implement it. In a short presentation they show their results to the other participants.",
    "media": "Slides, whiteboard, exercise sheets",
    "literature": "- M. Griebel, T. Dornseifer und T. Neunhoeffer: Numerical Simulation in Fluid Dynamics: A Practical\nIntroduction. Siam Monographs on Mathematical Modeling and Computation. SIAM, Philadelphia,\n1997.\n- ParaView User?s Guide (Version 1.6). http://www.paraview.org/files/v1.6/\nParaViewUsersGuide.PDF\n- ParaView Online Documentation. http://paraview.org/OnlineHelpCurrent/",
    "lv_sws_lecturer": "Bungartz, Hans-Joachim; Prof. Dr. rer. nat. habil.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2188",
    "title": "BGCE Supervised Teaching",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 4,
    "hours_total": 120,
    "hours_self_study": 75,
    "hours_presence": 45,
    "examination_achievements": "Type of Assessment: presentation. The presentation examines the students' ability to autonomously plan and perform a lesson or exercise with a given content as well as to autonomously plan and perform a lesson or exercise with a given content. The held exercise work tests the students' knowledge of the most important principles of good didactics and rhetoric.",
    "repetition": "",
    "recommended_prerequisites": "IN1503 Advanced Programming, IN2157 Grundlegende Algorithmen (CSE), IN2147\nParallele Programmierung, IN2005 Einführung in das Wissenschaftliche Rechnen, Solide\nProgrammierkenntnisse der Tutoren sind Voraussetzung",
    "content": "The module is given as a tutoring activity accompanying an introductory course in the field of computational science and engineering, for example, in \"Advanced Programming\" (IN1503) or in the \"Scientific Computing Lab\" (IN2182). Within this framework, the participants present both contents and programming or theoretical exercises. Furthermore, they discuss with the participants of the respective course the solutions of the course assignments. To understand the basic elements of the evaluation process, the participants elaborate an evaluation questionnaire employed for the internal evaluation of the tutorials and lectures, respectively. IN2188: BGCE Supervised Teaching | BGCE Supervised Teaching Various teaching techniques such as active structuring, activating elements, and usage of media are applied, trained, and analysed.",
    "learning_outcomes": "After participation in the module Supervised Teaching, students are able to autonomously plan and perform a lesson or exercise with a given content. They know the most important principles of good didactics and rhetoric and can implement them in the course. Furthermore, the participants are able to reflect their teaching on their own and together with students and colleagues.",
    "teaching_methods": "Students participating in the given tutorials are organized in groups of size 8-10 (according to their programming background, e.g.). Each course tutor leads one such group for an entire semester. The lecturer supervises the activity of each of the participants, coaching them individually in preliminary discussions (before the tutorial), in analysis and reflection meetings (after the tutorial), e.g. The tutors elaborate plans for each assignment (time, content, objectives), according to the general frame of the tutorial. Teaching methods - groupwork, brainstorming, structured discussion, and presentation - suitable to small groups, are introduced, analyzed, and trained. An evaluation questionnaire is elaborated by the group of participants and employed in the evaluation process of the tutoring activity.",
    "media": "Whiteboard, flipchart, presentation slides",
    "literature": "The relevant scientific literature is the one of the corresponding introductory modules.\nFor didactics:\n- A. Winteler, Professionell lehren und lernen - Ein Praxisbuch für Universität und Schule,\nWissenschaftliche Buchgesellschaft, 2004\n- Arthur Mattuck, The Torch or The Firehose: A Guide to Section Teaching, MIT OpenCourseWare",
    "lv_sws_lecturer": "Bungartz, Hans-Joachim; Prof. Dr. rer. nat. habil.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2191",
    "title": "BGCE Honours Project",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Zweisemestrig",
    "frequency": "Wintersemester/Sommersemester",
    "credits": 10,
    "hours_total": 300,
    "hours_self_study": 300,
    "hours_presence": 0,
    "examination_achievements": "Type of Assessment: project work. During the project, the students have to master several mile stones. At the end of every mile stone, the progress is presented by the team and discussed with the supervisors, which examines the students' ability to autonomously study new problems and to list and apply basic project management techniques. A written project report at the end of the project grades the rest of the intended learning outcomes.",
    "repetition": "",
    "recommended_prerequisites": "",
    "content": "The lecturers offer suitable topics from computational science and engineering.",
    "learning_outcomes": "At the end of the module, students are able to run or contribute, either individually or in small groups, to a larger project in the field of Computational Science and Engineering. They are experienced in the special software engineering requirements of scientific computing. The participants can autonomously study new scientific problems and methods, are able to select suitable methods, and implement them in a software project. They are familiar with basic project management techniques and apply them in scientific computing projects. IN2191: BGCE Honours Project | BGCE Honours Project",
    "teaching_methods": "The students preferrably work in small groups that are organised according to specific organisational tasks (project leader, quality management, scientific experts, etc.). The project task is given as a formal requirement specification. The students have to define milestones and organise the working process. A dedicated customer of the project will demand on fulfillment of the milestones and the project schedule. Advisors will offer topical and methodical conselling.",
    "media": "Whiteboard, flipchart, presentation/lecture slides",
    "literature": "Literature depends on the topic of the project. A list of literature will be published by project\nsupervisors at the beginning of the project.",
    "lv_sws_lecturer": "Bungartz, Hans-Joachim; Prof. Dr. rer. nat. habil.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2192",
    "title": "Master's Thesis (CSE)",
    "level": "",
    "language": "Master",
    "semester_duration": "Englisch",
    "frequency": "Einsemestrig",
    "credits": 30,
    "hours_total": null,
    "hours_self_study": 900,
    "hours_presence": 900,
    "examination_achievements": "Type of Assessment: research paper. The Master’s Thesis is a scientific elaboration which takes up to six months. Students show that they are able to work self-reliant on a topic from Computational Science and engineering and to apply the knowledge and techniques gained during studies. The written document examines the participants' ability to explain the thesis’ topic and its context in a clear way. Students show their ability to structure a scientific document in an adequate way and to explain their process of finding a solution. Participants show that they are able to follow the rules of good scientific practice. The written thesis may be accompanied by an oral presentation in order to demonstrate the ability to communicate found solutions and scientific content in a clear way. The presentation is not part of the grading. The research paper should be between 50 and 100 pages.",
    "repetition": "Folgesemester",
    "recommended_prerequisites": "",
    "content": "Under guidance of a supervisor, participants get familiar with a topic of CSE. They are given a problem statement, which is kept rather general, i.e., no details have been specified. They investigate and evaluate different approaches to a solution, and choose one which they implement. The accompanying written document captures the essential aspects of the topic, discusses the different approaches to solution, justifies the choice of the way towards a solution, and describes the latter. This module is being offered by all chairs. The chairs choose well-suited topics from their area of expertise, usually a small part of their ongoing research projects. They assist students in IN2192: Master's Thesis (CSE) | Master's Thesis (CSE) acquiring scientific abilities, in exploring an aspect of a topic in depth, and in answering an isolated and yet general problem statement with scientific means, based on the preceding exploration.",
    "learning_outcomes": "After the successful completion of a Master's Thesis the participants are able to quickly acquaint themselves with topics in Computational Science and Engineering. Given a concrete problem statement, they are able to analyze and evaluate the essential aspects in the field of CSE, necessary for a successful solution. They are able to span, describe and categorize the space of possible solutions, and to choose a well-founded solution on the basis of given or self-developed criteria. They are able to create a solution and to describe and discuss it concisely.",
    "teaching_methods": "The module consists of a research project. Knowledge and abilities are taught by individual work (\"Einzelarbeit\"), project work, and guided research (the questioning-developing method = \"fragend- entwickelnde Methode\"). Students are prompted to do literature studies and subsume documents. They work under pressure, work on a problem and respective solutions.",
    "media": "Will be announced by supervisor before the thesis starts.",
    "literature": "Will be announced by supervisor before the thesis starts.",
    "lv_sws_lecturer": "Bungartz, Hans-Joachim; Prof. Dr. rer. nat. habil.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2208",
    "title": "Modellierung und Entscheidungsunterstützungssysteme in der Umweltinformatik",
    "level": "Bachelor/Master",
    "language": "Deutsch/Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 3,
    "hours_total": 90,
    "hours_self_study": 60,
    "hours_presence": 30,
    "examination_achievements": "Mündliche Prüfung",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Die Vorlesung führt Konzepte der Wissensrepräsentation, wissensbasierter Systeme und\nInferenzmechanismen ein. Sie setzt keine bestimmten Programmierkenntnisse voraus und ist auch\nfür Hörer anderer Fakultäten mit Interesse an computerbasierten Lösungen geeignet.",
    "content": "- Das Thema\n- Grundlagen\n++ Begrifflichkeit (ökologische Systeme, Umwelt, ...) ++ Umweltprobleme und -management ++ Ziele und Nutzen der Modellierung\n- Modellierung\n++ Konzepte und Formalismen der Modellierung Black-box-Modelle, reduktionistische, kompositionale Modellierung Struktur von Modellen ++ Modellierungsformalismen und deren Bewertung ++ Numerische und qualitative Modellierung ++ Zeitliche und räumliche Modellierung ++ Differentialgleichungen, Einflußgraphen, konzeptuelle Modellierung IN2208: Modellierung und Entscheidungsunterstützungssysteme in der Umweltinformatik | Environmental Modeling and Decision Support Systems ++ Modellierungsprozeß ++ Modelle ausgewählter Beispiele\n- Umweltentscheidungsunterstützungssysteme\n++ Architektur und Softwarekomponenten von Umweltentscheidungsunterstützungssystemen ++ Empiriegestützte Verfahren ++ Regelbasierte und fallbasierte Verfahren ++ Modellbasierte Verfahren ++ Beispiele von Umweltentscheidungsunterstützungssystemen\n- Einsatzsapekte\n++ Validierung von Modellen und Umweltentscheidungsunterstützungssystemen ++ System-Benutzer-Interaktion\n- Herausforderungen",
    "learning_outcomes": "Studierende verstehen\n- Umweltprobleme und Anforderungen an computerunterstützte Lösungen\n- Repräsentation von Wissen über ökologische und Umweltsysteme\n- Modellierungsmethoden und -systeme, insbesondere aus der Künstlichen Intelligenz, sowie\nderen Möglichkeiten und Grenzen\n- Formalisierung von Anwendungsaufgaben (Situationsanalyse, Therapie-Generierung, ...)\n- Grundlagen und Architektur von Umweltentscheidungsunterstützungssystemen\n- Algorithmen modellbasierter Problemlöser\n- Beispiele von Modellen und Anwendungssystemen\nSie sind in der Lage,\n- Umweltsysteme und Anwendungsaufgaben systematisch zu analysieren\n- Modellierungs- und Problemlösungsansätze zu bewerten und auszuwählen\n- Modelle einfacher Zusammenhänge in Umwelt und Ökologie zu erstellen\n- Anwendungsbezogene Umweltentscheidungsunterstützungssystem zu entwerfen",
    "teaching_methods": "Vorlesung",
    "media": "Beamer, Video",
    "literature": "U. Cortes et al., Artificial Intelligence and Environmental Decision Support Systems\nIn: Applied Intelligence, Springer, ISSN 0924-669X (Print) 1573-7497 Volume 13, Number 1 / Juli\n2000 pp. 77-91\nP. Struss : Towards model integration and model-based decision support for environmental\napplications\nIn: 8TH IMACS Congress MODSIM 09, Cairns, Australia, 2009\nIN2208: Modellierung und Entscheidungsunterstützungssysteme in der Umweltinformatik | Environmental Modeling and\nDecision Support Systems\nSelected specialized papers",
    "lv_sws_lecturer": "Struss, Peter; Apl. Prof. Dr. rer. nat. habil.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2210",
    "title": "Tracking and Detection in Computer Vision",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 7,
    "hours_total": 210,
    "hours_self_study": 120,
    "hours_presence": 90,
    "examination_achievements": "Type of Assessment: written exam (105 minutes) Mid-term exam is planed after 6 lectures and it is written exam. The final exam takes place at the end of the lectures and it also takes the form of written test. Questions allow to assess acquaintance with concepts thought at the lectures and exercises, small calculation tasks and pseudo codes of the algorithmic solutions. Programming tasks are not part of the examinations. For the midterm exam, nothing but your pens and your calculators are allowed. For the final exam, nothing but your pens, your calculators and one DIN A4 page (handwritten, front and back side) with notes are allowed. Bonus points can be earned from the homework projects and the intermediate exam. The final exam brings maximally 100 points. You need to have 50 points in order to pass it. Bonus points are irrelevant for the 50-points-hurdle and are added afterwards to your final exam score.",
    "repetition": "",
    "recommended_prerequisites": "Most of the knowledge required should be part of the normal background in Computer Science,\nundergraduate/graduate Mathematics and Geometry.",
    "content": "Computer Vision, as a relatively young research area, has emerged as a key discipline in computer science. This is not only evident by a growing and highly competitive research community with a high impact factor in computer science, but also by the emergence of numerous vision companies turning research ideas into a myriad of commercial applications. Besides well-known studies of IN2210: Tracking and Detection in Computer Vision | Tracking and Detection in Computer Vision 3D geometry and camera models, object tracking and detection in images and videos becomes one of the principal research directions of modern Computer Vision. The main objective of this course is to provide students with a gradual introduction to modern tracking, detection and recognition techniques developed in the last years. The course will provide in-depth knowledge of image features, their detection and description, matching techniques, key-point recognition, basic and advanced tracking algorithms based on image features and image intensities, basics of probabilistic and machine learning methods for tracking and object detection. Note that every year the course content is refreshed with new the most promising and potentially the most influential works in the field. The following topics will be handled\n- Introduction (overview of the course)\n- Convolution and filtering:\n-- Basic of image formation\n-- Convolution and correlation\n-- Non-linear filtering\n-- Gaussian Filtering\n-- Image Derivatives\n-- Edge Detection\n- Local invariant feature detectors:\n-- Harris corner\n-- Harris Laplace/Affine\n-- Hessian, Hessian-Laplace/Affine\n-- FAST\n- Feature descriptors:\n-- Difference of Gaussians and SIFT\n-- Integral images and SURF\n-- Histogram of Oriented Gradients (HOG)\n- Keypoint recognition:\n-- Randomized trees\n-- FERNS\n-- Keypoint signatures\n- Face detection\n-- Haar features\n-- Ada-boost\n-- Viola-Jones Face Detection\n- Camera models and projections\n-- Model based tracking\n-- Pose estimation from 2D-3D coresspondencies (DLT, P-n-P)\n-- Rotation parametrization\n- Non-linear optimisation\n-- Robust estimators\n-- RANSAC\n- Template tracking methods:\nIN2210: Tracking and Detection in Computer Vision | Tracking and Detection in Computer Vision\n-- Lucas-Kanade,\n-- Compositional Alg.\n-- Inverse Compositional\n-- ESM\n-- Linear Predictor\n- Mean-shift tracking\n-- mean-shift for pdf estimation\n-- mean-shift for segmentation\n-- mean-shift for object tracking\n-- multi-scale\n- Template matching approaches\n-- basic correlation methods (SAD, NCC etc.)\n-- DOT(Dominant Orientation Template)\n-- LineMod (LINEarizing the memory multiMODal template matching)\n- Kalman and particle filtering\n-- basics Kalman filer\n-- basics Particle filer\n-- applications to visual tracking\n-- applications to camera tracking\n- Tracking with Dictionary Learning",
    "learning_outcomes": "In the end, the students will have a thorough description of the most important tracking and detection techniques. They should be able to understand and implement those solutions and apply them in reasonably complex problems. The concepts described in this course will be accompanied with brief explanations of the necessary mathematical tools. The participants of this course will be given an important basis to follow the vast and growing Computer Vision literature and use the acquired knowledge to solve new practical problems.",
    "teaching_methods": "Lecture, combined with experimental programming assessment targeting practical implementations of the methods explained at the lectures. The practical programming assessments are first explained at the exercises and then given in the form of home works for students to do them in groups.",
    "media": "slides, blackboard, programming experiments",
    "literature": "- lecture slides\n- accompanied scientific papers and book excerpts\n- Computer Vision: a modern approach\" by David Forsyth and Jean Ponce\n- Computer Vision: Algorithms and Applications, Rick Szeliski\nIN2210: Tracking and Detection in Computer Vision | Tracking and Detection in Computer Vision",
    "lv_sws_lecturer": "Navab, Nassir; Prof. Ph.D.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2211",
    "title": "Auction Theory and Market Design",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Unregelmäßig",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer 90-minütigen Klausur erbracht. In dieser wird durch das Lösen von Problemstellungen nachgewiesen, dass die Studierenden die spieltheoretischen Modellierungsansätze von Auktionsverfahren anwenden und bewerten können. Das zusätzliche Beantworten theoretischer Fragestellungen stellt vor allem sicher, dass die Teilnehmer die Grundproblematiken kombinatorischer Auktionen evaluieren können. Die Beantwortung erfordert zudem das selbstständige Verteidigen der Wahl von Auktionsformaten basierend auf gewünschten Eigenschaften der Marktallokation, wie z.B. Effizienz oder Ertragsmaximierung. Das Beantworten der Problem- und Fragestellungen erfordert eigene Formulierungen.",
    "repetition": "",
    "recommended_prerequisites": "IN0022 Planen und Entscheiden in betrieblichen Informationssystemen oder IN0024 Operations\nResearch, Lineare Optimierung",
    "content": "- Spieltheoretische Grundkonzepte (dominante Strategie, Nash Gleichgewicht unter vollständiger\nund unvollständiger Information etc.)\n- Mechanismus-Design-Theorie\n- Grundlagen der Auktionstheorie (geschlossene und offene Auktionen, Revenue Equivalence,\nOptimal Auctions etc. )\n- Kombinatorische Auktionen\n- Assignment markets\n- Herausforderungen bei der Entwicklung kombinatorischer Auktionen (iterative kombinatorische\nAuktionen und combinatorial clock auctions) IN2211: Auction Theory and Market Design | Auction Theory and Market Design\n- Anwendungen kombinatorischer Auktionen (Frequenzauktionen, Beschaffung)\n- Approximations Mechanismen\n- Matching Märkte",
    "learning_outcomes": "Nach der Teilnahme an dem Modul verstehen die Studierenden die funktionalen Eigenschaften wie z.B. offene und geschlossene Formate und Zahlungsregel verschiedenster Auktionsformate. Sie können spieltheoretische Modelle zur Interpretation, der aus den genannten Eigenheiten entstehenden, strategischen Interaktion sowohl zwischen Bietern als auch zwischen Bietern und dem Auktionator kritisieren. Darauf aufbauend sind sie insbesondere dazu befähigt grundlegende Problematiken, wie z.B. Anreiz- und Komplexitätsprobleme (Bestimmung des Gewinners unter anderem), beim Entwurf kombinatorischer Auktionen zu erklären. Auch können die Studierenden die Wahl verschiedener Auktionsformate basierend auf gewünschten Eigenschaften der Marktallokation, wie z.B. Effizienz oder Ertragsmaximierung, verteidigen.",
    "teaching_methods": "Das Lehrformat besteht aus Vorlesung und inhaltlich abgestimmter Übung. In der Vorlesung trägt der Dozent den Inhalt vor und präsentiert Anwendungsbeispiele für diverse Auktionsformen. Hier werden die Studierenden mit den unterschiedlichsten Auktionsformaten und deren Modellierung bekannt gemacht und lernen verschiedene Anwendungsfälle zu unterscheiden. In der Übung bearbeiten die Studierenden in betreuter Einzelarbeit Übungsaufgaben und beurteilen die entsprechenden spiel- und auktionstheoretischen Modellierungsansätze. Dadurch lernen die Studierenden insbesondere die spezifischen Grundprobleme kombinatorischer Auktionen zu bewerten und das konstruktive Kritisieren der eigenen Arbeit.",
    "media": "Skriptum, Übungsblätter, PowerPoint, PC und E-Learning Plattform",
    "literature": "- Y. Shoham and K. Leyton-Brown: Multiagent Systems: Algorithmic, Game-Theoretic, and Logical\nFoundations. Chapters 3, 5, 6, 10, 11, 12. For class 2 and 3.\n- N. Nisan, T. Roughgarden, E. Tardos and V. Vazirani (editors): Algorithmic Game Theory.\nChapters 9 and 11 by Nisan. For class 2, 4 and 6\n- V. Krishna: Auction Theory. Chapters 16 and 17 on multi-object auctions",
    "lv_sws_lecturer": "Bichler, Martin; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2219",
    "title": "Query Optimization",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 105,
    "hours_presence": 75,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer Klausur erbracht; die Prüfungsdauer beträgt 90 Minuten. Wissensfragen überprüfen die Vertrautheit mit den wesentlichen Optimierungstechniken der Anfrageoptimierung. Transferaufgaben überprüfen die Vertrautheit mit der problembezogenen Entwicklung von Optimierungstechniken für die Anfrageoptimierung. Kleine Szenarien überprüfen die Fähigkeit, die Komplexität von konkreten Anfragen zu analysieren bzw. Anfragen bzgl. ihres Verbesserungspotentials zu bewerten.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0008 Grundlagen: Datenbanken",
    "content": "- Anfrageverarbeitung in relationalen Datenbanksystemen\n- grundlegende Techniken der Anfrageoptimierung\n- Bestimmung der optimalen Joinreihenfolge\n- Techniken der dynamischen Programmierung\n- Kostenmodelle für die Anfrageverarbeitung\n- Optimierung unter der Berücksichtigung von physikalischen Eigenschaften",
    "learning_outcomes": "Teilnehmer beherrschen die wesentlichen Optimierungstechniken der Anfrageoptimierung, können sie problembezogen entwickeln sowie die Komplexität von konkreten Anfragen analysieren bzw. die Anfragen zwecks Verbesserung bewerten. IN2219: Query Optimization | Query Optimization",
    "teaching_methods": "Das Modul wird als Vorlesung mit begleitender Übungsveranstaltung angeboten. In der Vorlesung werden die Inhalte im Vortrag durch anschauliche Beispiele sowie durch Diskussion mit den Studierenden vermittelt. Die Vorlesung soll den Studierenden dabei auch als Motivation zur eigenständigen inhaltlichen Auseinandersetzung mit den Themen sowie zum Studium der Literatur dienen. Jeweils passend zu den Vorlesungsinhalten werden in den Übungsveranstaltungen Aufgabenblätter angeboten, die die Studierenden zur selbstständigen Kontrolle sowie zur Vertiefung der gelernten Methoden und Konzepte nutzen sollen. Die Arbeit daran erfolgt selbstständig in Kleingruppen. Diese Kleingruppen bearbeiten auch Programmieraufgaben, später kleine Projekte, die abgegeben und kommentiert und bewertet werden.",
    "media": "Vortrag mit animierten Folien",
    "literature": "- J.D. Ullman. Database and Knowledge Base Systems. Computer Science Press, 1989.\n- T. Özsu and J. Blakeley. Modern Database Systems. Addison Wesley, 1995.\n- H. Garcia-Molina and J.D. Ullman and J. Widom. Database System Implementation. Prentice\nHall, 1999.\n- P. Gassner, G. Lohman, and K. Schiefer. Query optimization in the IBM DB2 family. IEEE Data\nEngineering Bulletin, 16:4 18, Dec. 1993.\n- S. Chaudhuri. An Overview of Query Optimization in Relational Systems. PODS, 1998\n- G. Moerkotte. Building Query Compilers. (draft)",
    "lv_sws_lecturer": "Neumann, Thomas; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nAnfrageoptimierung (IN2219) (Vorlesung mit integrierten Übungen, 5 SWS)\nNeumann T, Birler H, Rieger M"
  },
  {
    "module_id": "IN2221",
    "title": "Protein Prediction I for Bioinformaticians",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 8,
    "hours_total": 240,
    "hours_self_study": 150,
    "hours_presence": 90,
    "examination_achievements": "Das Modul wird mit einer schriftlichen Prüfung abgeschlossen. Die Prüfung dauert 120 Minuten. In der Prüfung demonstrieren die Teilnehmer ihre Fähigkeit, einen geeigneten rechnerbetonten Ansatz für die Lösung eines biologischen Problems auf dem Gebiet der Strukturvorhersage zu entwerfen und zu diskutieren. Zum Beispiel wählen sie, abhängig von der Art der Daten, die sie erhalten (1D, 2D, 3D), eine geeignete Methode, genauso wie sie, abhängig von der jeweiligen biologischen Frage, das geeignete Abstraktionsniveau der Daten auswählen können (1D, 2D, 3D). Sie demonstrieren ihr Verständnis der Konzepte durch die Wahl eines für die gestellte Aufgabe geeigneten Lösungsansatzes und sie können diesen bewerten, indem sie die zahlreichen Pros und Kontras der biologischen und technischen Aspekte alternativer Ansätze diskutieren. Sie können ihre Fähigkeit, ein verwertbares Werkzeug zu erstellen demonstrieren, indem sie einen Lösungsansatz bis auf das Niveau von Pseudo-Code umsetzen. Details werden zu Beginn des Moduls bekanntgeben.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Grundlagenwissen in Bioinformatik entsprechend den Fachsemestern 1-4 im Bachelor\nBioinformatik.",
    "content": "Einführung: Was ist ein Protein? Was sind Proteinstruktur & -funktion? Vorhersage der Proteinstruktur: Überblick. IN2221: Protein Prediction I for Bioinformaticians | Protein Prediction I for Bioinformaticians Methoden: Sequenzvergleiche (Sequenz – Sequenz, Sequenz – Profil, Profil – Profil, HMM); Vorhersage von Proteinstruktur in 1D (Sekundärstruktur, Lösungsmittelzugänglichkeit, Membranhelices), 2D (Kontaktvorhersagemethoden, zeitgemäße Methoden unter Verwendung korrelierender Mutationen), 3D (vergleichendes Modellieren, Molekulardynamik); Vorhersage von unstrukturierten Bereichen in Proteinen. Die Vorlesung beinhaltet eine Einführung ins Maschinelle Lernen mit speziellem Fokus darauf, wie überoptimistische Vorhersagen vermieden werden können.",
    "learning_outcomes": "Die Studenten verstehen die grundsätzlichen Konzepte der Proteinsequenzanalyse, von Proteinstrukturen und der Vorhersage von Proteinstrukturen und sind in der Lage diese zu bewerten. Sie können die aktuellsten technischen Methoden entsprechend dieser Grundsätze in der Bioinformatik anwenden. Die Studenten können (in von Tutoren geleiteten Gruppen) ihre eigenen Vorhersagemethoden entwickeln, indem sie bestehende Methoden oder Algorithmen kombinieren und / oder neue Methoden entwickeln. Die Teilnehmer sind in der Lage, veröffentlichte Methoden zu analysieren und zu bewerten (sowohl als Leser der Veröffentlichung, als Gutachter und als Konkurrent). Basierend auf den Ergebnissen dieser Bewertungen sind sie in der Lage, ein Werkzeug zu erstellen, das für experimentelle Biologen und Bioinformatiker einfach anwendbar ist. Das bedeutet dass sie in der Lage sind, abstrakte Lösungsideen unter Berücksichtigung technischer Aspekte in Pseudo-Code und wahlweise während der Übungen weiter in funktionsfähige Programme umzusetzen.",
    "teaching_methods": "Vorlesung, Seminar, Übung, Aufgaben zum Selbststudium: Die Studierenden wenden die in der Vorlesung vorgestellte Theorie an, indem sie in der Übung eine Methode zur Vorhersage von Proteinstrukturen schreiben, wobei sie mit Daten in verschiedener Form anfangen (abhängig vom vorliegenden Problem). In manchen Fällen werden sie die vollständigen Eingabedaten von den Tutoren erhalten, in anderen werden sie Datenbankenparser schreiben und die Eingabe / Ausgabe-Daten generieren, die sie für die Laborarbeit benötigen. Jedes Team wird die Leistungsfähigkeit des Werkzeugs, das sie erstellt hat, genau bestimmen und ihre Ergebnisse Kommilitonen und Tutoren vorstellen.",
    "media": "Vorlesungen in Form von interaktiven Seminaren unter Verwendung von Beamer und Tafel. Einige\nVorlesungen werden ausschließlich unter Verwendung der Tafel abgehalten. Alle Vorlesungen\nwerden aufgezeichnet und sowohl die Präsentation sowie die Aufnahme werden kurz nach der\nVorlesung zugänglich gemacht.",
    "literature": "Wird in der Vorlesung bekannt gegeben.",
    "lv_sws_lecturer": "Rost, Burkhard; Prof. Dr.\nIN2221: Protein Prediction I for Bioinformaticians | Protein Prediction I for Bioinformaticians\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nProtein Prediction I for Bioinformaticians (IN2221) (Vorlesung mit integrierten Übungen, 6 SWS)\nRost B [L], Erckert K, Koludarov I, Olenyi T, Rost B, Senoner T"
  },
  {
    "module_id": "IN2225",
    "title": "Praktikum Protein-Struktur- und -Funktions-Analyse",
    "level": "Master",
    "language": "Deutsch/Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester/Sommersemester",
    "credits": 12,
    "hours_total": 360,
    "hours_self_study": 210,
    "hours_presence": 150,
    "examination_achievements": "",
    "repetition": "",
    "recommended_prerequisites": "gute Englisch-Kenntnisse",
    "content": "Intro: what is protein function? Predicting protein function using sequence: sequence alignments, multiple sequence alignments, motifs, domain assignment, annotation transfer by homology, ab initio predictions. Predicting protein function using structure: structural alignments, structural motifs, annotation transfer via structure similarity. From structure prediction to function prediction: comparative modeling; prediction of: secondary structure, hydrophilicity profiles, solvent accessibility, transmembrane segments, disordered regions, contact maps, functional residues; template free modeling. During the practical the students apply these methods for the functional annotation of structural genomics structures of proteins of unknown function.",
    "learning_outcomes": "Das Praktikum soll einen Einblick in die Forschung am Lehrstuhl geben. Die Studierenden lernen, durch Literatursuche relevante Methoden zu finden, zu verstehen und für andere verständlich darzustellen. Bei der Anwendung an konkreten Beispielen können sie die Ergebnisse analysieren und die Möglichkeiten und Grenzen der Methoden diskutieren und bewerten. Sie lernen, die theoretischen Grundlagen sowie die konkreten Vorgehensweisen in einem Protokoll schriftlich darzustellen. IN2225: Praktikum Protein-Struktur- und -Funktions-Analyse | Advanced Practical Course Protein Structure and Function Analysis",
    "teaching_methods": "Praktikum",
    "media": "",
    "literature": "Wird im Praktikum bekanntgegeben",
    "lv_sws_lecturer": "Rost, Burkhard; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2227",
    "title": "Compilerbau I",
    "level": "Bachelor/Master",
    "language": "Deutsch/Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer 90-minütigen schriftlichen Klausur erbracht. Die einzelnen Aufgaben überprüfen die Kenntnis und Beherrschung der Techniken, die für die unterschiedlichen Komponenten eines Compilers erforderlich sind. Die Aufgaben, die sich auf das Frontend beziehen, stellen sicher, dass die grundlegenden Konzepte über endliche Automaten und kontextfreie Grammatiken beherrscht werden. Dazu könnte etwa verlangt werden, die gelernten Algorithmen auf Beispielautomaten oder Grammatiken anzuwenden, oder einfache Eigenschaften oder Behauptungen allgemein herzuleiten. Die Aufgaben, die sich auf das Middleend beziehen, überprüfen, inwiefern die Studierenden die in diesem Bereich gelernten Konzepte wie Typen und Typsysteme verstanden haben und an kleinen Programmbeispielen anwenden können. Die Aufgaben, die sich auf das Backend, d.h. die Codeerzeugung beziehen, überprüfen, inwiefern die Studierenden in der Lage sind, mit Hilfe der gelernten Übersetzungsschemata und Algorithmen für kleine Beispielprogramme Code für eine einfache Zielmaschine zu erzeugen. Es ist erlaubt, ein doppelseitiges A4-Blatt anzufertigen und zur Klausur mitzubringen. Die erfolgreiche 15 minütige Präsentation eines ausgewählten weiterführenden Themas der Vorlesung kann als Notenbonus von 0.3 in die Bewertung der Klausur einfließen. Die genauen Regelungen hierzu werden rechtzeitig zu Beginn des Moduls bekannt gegeben.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0011 Einführung in die Theoretische Informatik, IN0009 Grundlagen: Betriebssysteme\nund Systemsoftware, Kenntnis einer Programmiersprache, Erfahrung mit Systemsoftware,\nAutomatentheorie\nIN2227: Compilerbau I | Compiler Construction I",
    "content": "Ein Compiler ist ein wesentlicher Bestandteil der Systemsoftware, dessen Aufgabe darin besteht, Programme einer höheren Programmiersprache - etwa C oder Java - in Folgen von Maschinenbefehlen eines realen Rechners zu übersetzen. Compiler sind relativ komplexe Programme; bei ihrer Konstruktion finden die Ideen und Methoden aus vielen Bereichen ihre Verwendung. Themen der Vorlesung sind damit unter anderem:\n- Lexikalische Analyse;\n- Syntaktische Analyse;\n- Typüberprüfung für imperative Programmierspachen;\n- Typinferenz für funktionale Programmiersprachen;\n- Codeerzeugung für eine abstrakte Maschine.",
    "learning_outcomes": "Nach erfolgreicher Teilnahme an diesem Modul beherrschen die Studierenden Grundbegriffe und Techniken des Compilerbaus. Sie verstehen praktisch relevante Verfahren, die in den drei Bestandteilen eines Compilers, dem Frontend, dem Middleend und dem Backend eingesetzt werden. Mit deren Hilfe sind sie in der Lage, einen Compiler zu schreiben, der für eine einfache Programmiersprache und eine einfache Zielarchitektur Code erzeugt.",
    "teaching_methods": "Die Vorlesung stellt die Grundbegriffe und Techniken des Compilerbaus vor und erläutert sie an Beispielen. In den begleitenden Übungen wird anhand geeigneter Aufgaben das Verständnis der Inhalte der Vorlesung vertieft und die Anwendung der verschiedenen Techniken auf überschaubare Problemstellungen aus den verschieden Bestandteilen eines Compilers geübt.\n- Die Vorlesung wird im Flipped-Classroom-Modus abgehalten.\n- Vorlesungsvideos werden von den Studierenden vorab erstellt.\n- Es wird ein wöchentliches Vor-Ort-Treffen (Inverted-Classroom-Sitzungen) für Mini-Quiz, Fragen\nund Antworten, Tutorials, Demonstrationen und weitere Übungsbeispiele geben.",
    "media": "Folienpräsentation, Tafelanschrieb, eventuell online Programmierung und/oder Animationen",
    "literature": "Aho, Sethi, Ullmann: Compilers. Principles, Techniques and Tools. Addison-Wesley, 1985\nWilhelm, Seidl, Hack: Übersetzerbau. Das Frontend. Springer-Lehrbuch, 2012",
    "lv_sws_lecturer": "Seidl, Helmut; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nCompilerbau I (IN2227) (Vorlesung, 2 SWS)\nPetter M, Seidl H\nIN2227: Compilerbau I | Compiler Construction I\nÜbung zu Compilerbau I (IN2227) (Übung, 2 SWS)\nPetter M, Stade Y, Tilscher S"
  },
  {
    "module_id": "IN2229",
    "title": "Computational Social Choice",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 105,
    "hours_presence": 75,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer 120-minütigen Klausur erbracht. Diese besteht aus mehreren Aufgaben, in denen folgende Fertigkeiten überprüft werden: * Kollektive Entscheidungsprobleme erfassen und neue Konzepte verstehen und einordnen * Axiomatische Eigenschaften von Präferenzbündelungsverfahren mit Hilfe von mathematischen Argumenten oder Gegenbeispielen nachweisen bzw. widerlegen * Algorithmen aus der Vorlesung auf konkrete Fragestellungen im Bereicht der kollektiven Entscheidungsfindung anwenden In der Klausur sind keine Hilfsmittel außer einem oder mehreren sebst angefertigten Merkblättern zugelassen. Die zugelassene Anzahl der Merkblätter wird rechtzeitig vor der Klausur bekannt gegeben. Die Modulnote kann durch die korrekte Bearbeitung von Übungsblättern oder Online-Quizzes im Laufe des Semester um 0,3 verbessert werden. Dieser Notenbonus ist nur anwendbar wenn die Klausur bestanden wurde und ist nicht auf folgende Semester übertragbar. Es wird keine Wiederholungsprüfung angeboten.",
    "repetition": "",
    "recommended_prerequisites": "Modul IN0015: Diskrete Strukturen (oder äquivalent).\nEs wird erwartet, dass Teilnehmer Erfahrung mit der selbständigen Anfertigung von Beweisen\nhaben und mit grundlegenden Beweistechniken vertraut sind. Zusätzlich sind Grundlagen der\nKomplexitätstheorie hilfreich (Z.B. Modul IN0011).\nIN2229: Computational Social Choice | Computational Social Choice",
    "content": "\"Social Choice Theory\" beschäftigt sich mit Methoden zur kollektiven Entscheidungsfindung. Neben den klassischen Anwendungen wie Wahlverfahren, haben diese Methoden in den letzten Jahren Anwendung in verschiedenen Teilgebieten der Informatik gefunden. Der Schwerpunkt dieser Vorlesung liegt auf der Analyse und dem Vergleich von Verfahren, die auf der Mehrheitsrelation beruhen. Insbesondere werden dabei algorithmische Aspekte dieser Verfahren betrachtet. Themenübersicht: Präferenzen, Wahlverfahren, Choice Theory (Rationalisierbarkeit, Konsistenz), Satz von May, Arrows Unmöglichkeitssatz, Punkteverfahren, Fishburns Klassifikation von Condorcet-Verfahren, Satz von McGarvey, Top Cycle, Uncovered Set, Slater Set, Banks Set, Minimal Covering Set, Tournament Equilibrium Set, Kemeny-Young- Verfahren, Berechnungskomplexität von Wahlverfahren.",
    "learning_outcomes": "Nach erfolgreicher Teilnahme an dem Modul sind die Studierenden in der Lage * die Grundlagen kollektiver Entscheidungsfindung zu verstehen, * axiomatische Eigenschaften von Präferenzbündelungsverfahren zu untersuchen, * Ergebnisse verschiedener Präferenzbündelungsverfahren zu berechnen und zu vergleichen und * algorithmische Eigenschaften dieser Verfahren zu analysieren.",
    "teaching_methods": "Das Modul besteht aus einer Vorlesung und einer begleitenden Übung. Die Inhalte der Vorlesung werden im Vortrag und durch Präsentation vermittelt. Die Studierenden werden durch die regelmäßige Bereitstellung von Übungsblättern zur eigenständigen Auseinandersetzung mit den Inhalten der Vorlesung angeregt. Lösungswege für die Übungsaufgaben werden in der Übungsveranstaltung diskutiert.",
    "media": "Folien, Tafelanschrieb",
    "literature": "D. Austen-Smith and J. Banks: Positive Political Theory I, University of Michigan Press, 1999.\nM. R. Garey and D. S. Johnson. Computers and Intractability: A Guide to the Theory of NP-\nCompleteness. W. H. Freeman, 1979.\nW. Gärtner: A Primer in Social Choice Theory, Oxford University Press, 2009.\nJ. Laslier. Tournament Solutions and Majority Voting. Springer-Verlag, 1997.\nH. Moulin. Axioms of Cooperative Decision Making. Cambridge University Press, 1988.\nA. Taylor. Social Choice and the Mathematics of Manipulation, Cambridge University Press, 2005.",
    "lv_sws_lecturer": "Brandt, Felix; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nComputational Social Choice (IN2229) (Vorlesung, 3 SWS)\nBrandt F, Lederer P\nIN2229: Computational Social Choice | Computational Social Choice\nÜbungen zu Computational Social Choice (IN2229) (Übung, 2 SWS)\nBrandt F, Lederer P, Romen R"
  },
  {
    "module_id": "IN2230",
    "title": "Protein Prediction II for Bioinformaticians",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 8,
    "hours_total": 240,
    "hours_self_study": 150,
    "hours_presence": 90,
    "examination_achievements": "Das Modul wird mit einer schriftlichen Prüfung abgeschlossen. Die Prüfung dauert 120 Minuten. In der Prüfung demonstrieren die Teilnehmer ihre Fähigkeit, einen geeigneten rechnerbetonten Ansatz für die Lösung eines biologischen Problems auf dem Gebiet der Funktionsvorhersage zu entwerfen und zu diskutieren. Zum Beispiel wählen sie, abhängig von der Art der Daten, die sie erhalten (Sequenzdaten, Annotationsdaten, etc.) eine geeignete Methode, genauso wie sie, abhängig von der jeweiligen biologischen Frage, das geeignete Abstraktionsniveau der Daten auswählen können (GO Ebene, EC-Klasse, etc.). Sie demonstrieren ihr Verständnis der Konzepte durch die Wahl eines für die gestellte Aufgabe geeigneten Lösungsansatzes und sie können diesen bewerten, indem sie die zahlreichen Pros und Kontras der biologischen und technischen Aspekte alternativer Ansätze diskutieren. Sie können ihre Fähigkeit, ein verwertbares Tool zu erstellen demonstrieren, indem sie einen Lösungsansatz bis auf das Niveau von Pseudo-Code umsetzen. Details werden zu Beginn des Moduls bekanntgeben.",
    "repetition": "",
    "recommended_prerequisites": "Grundlagenwissen in Bioinformatik entsprechend den Fachsemestern 1-4 im Bachelor\nBioinformatik.",
    "content": "Einführung: was ist ein Protein? Was ist Proteinfunktion? Überblick über die Vorhersage von Proteinfunktionen. IN2230: Protein Prediction II for Bioinformaticians | Protein Prediction II for Bioinformaticians Vorhersage von Proteinfunktionen beruhend auf Sequenzen: Sequenzalignments, multiple Sequenzalignments, Leitmotive, Domänenzuweisung, Annotationstransfer durch Homologie, de novo-Vorhersagen. Vorhersage von Proteinfunktionen durch die Verwendung von Struktur: Strukturalignments, Strukturmotive, Annotationstransfer aufgrund der Ähnlichkeit von Strukturen. Von Strukturvorhersage zu Funktionsvorhersage: vergleichendes Modellieren, Vorhersage von: subzellulärer Lokalisierung, Protein-Protein Interaktionen, Protein-DNA und -RNA-Interaktionen, Protein-Substrat-Interaktionen, Proteinnetzwerke, Gen-Ontologie (GO), Enzymklassifikationen, Vorhersage von enzymatischer Aktivität, Vorhersagen von funktionellen Klassen (z.B,: GO- Klassen). Vorhersage des Effekts von einzelnen Punktmutationen (Sequenzvarianten) auf Proteinfunktion und Organismus. Vorhersage vom Phänotyp aus dem Genotyp. Wie beim ersten Teil (Protein Prediction I) beinhaltet das Modul eine Einführung ins Maschinelle Lernen mit speziellem Fokus auf der Vermeidung von überoptimistischen Vorhersagen. Im Gegensatz zum ersten Teil (Protein Prediction I) spielt die Proteinstruktur nur eine untergeordnete Rolle: die Einführung in die Proteinstruktur dient lediglich dazu, das Verständnis der Proteinfunktion zu unterstützen.",
    "learning_outcomes": "Die Studenten verstehen die grundsätzlichen Konzepte der Proteinsequenzanalyse mit dem Fokus auf Proteinfunktion und der Vorhersage von Proteinfunktionen und sind in der Lage diese zu bewerten. Sie können die aktuellsten technischen Methoden entsprechend dieser Grundsätze in der Bioinformatik anwenden. Die Studenten können (in von Tutoren geleiteten Gruppen) ihre eigenen Vorhersagemethoden entwickeln, indem sie bestehende Methoden oder Algorithmen kombinieren und / oder neue Methoden entwickeln. Die Teilnehmer sind in der Lage, veröffentlichte Methoden zu analysieren und zu bewerten (sowohl als Leser der Veröffentlichung, als Gutachter und als Konkurrent). Basierend auf den Ergebnissen dieser Bewertungen sind sie in der Lage, ein Werkzeug zu erstellen, das für experimentelle Biologen und Bioinformatiker einfach anwendbar ist. Das bedeutet, dass sie in der Lage sind, abstrakte Lösungsideen unter Berücksichtigung technischer Aspekte in Pseudo-Code und wahlweise während der Übungen weiter in funktionsfähige Programme umzuwandeln.",
    "teaching_methods": "Vorlesung, Seminar, Übung, Aufgaben zum Selbststudium: Die Studierenden wenden die in der Vorlesung vorgestellte Theorie an, indem sie in der Übung eine Methode zur Vorhersage von Proteinfunktionen schreiben, wobei sie mit Daten in unterschiedlicher Form anfangen (abhängig vom vorliegenden Problem). In manchen Fällen werden sie die vollständigen Eingabedaten von den Tutoren erhalten, in anderen werden sie Datenbankenparser schreiben und die Eingabe / Ausgabe-Daten generieren, die sie für die Laborarbeit benötigen. Jedes Team wird die Leistungsfähigkeit des Tools, das sie erstellt hat, genau bestimmen und ihre Ergebnisse Kommilitonen und Tutoren vorstellen. IN2230: Protein Prediction II for Bioinformaticians | Protein Prediction II for Bioinformaticians",
    "media": "Vorlesungen in Form von interaktiven Seminaren unter Verwendung von Beamer und Tafel. Einige\nVorlesungen werden ausschließlich unter Verwendung der Tafel abgehalten. Alle Vorlesungen\nwerden aufgezeichnet und sowohl die Präsentation sowie die Aufnahme werden kurz nach der\nVorlesung zugänglich gemacht.",
    "literature": "Wird in der Vorlesung bekanntgegeben.",
    "lv_sws_lecturer": "Rost, Burkhard; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nProtein Prediction II for Bioinformaticians (IN2230) (Vorlesung mit integrierten Übungen, 6 SWS)\nRost B, Olenyi T"
  },
  {
    "module_id": "IN2235",
    "title": "Software-Engineering in der industriellen Praxis",
    "level": "Master",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 3,
    "hours_total": 90,
    "hours_self_study": 60,
    "hours_presence": 30,
    "examination_achievements": "Prüfungsart: Klausur (75 Minuten) Die Prüfungsleistung wird in Form einer schriftlichen Klausur erbracht, in der die adäquate Beantwortung von praxisnahen Software-Engineering –Fragestellungen im Bereich von konkreten Software-Engineering Projektszenarien beurteilt wird. Die Fragestellungen betreffen zum Beispiel die Kosten-Nutzen-Analyse, den Architekturentwurf und die Auswahl problemadäquater Softwaretechnologien.",
    "repetition": "",
    "recommended_prerequisites": "",
    "content": "Die Vorlesung ist aus der industriellen Softwarepraxis motiviert. Anhand von Praxisbeispielen wird die typische Struktur von großen betrieblichen Informationssystemen gezeigt. Weiterhin werden wichtige Aspekte ihrer Gestaltung und Erstellung vorgestellt. Oft spielt ein solches System die Rolle des Nervenzentrums eines Unternehmens, es enthält wesentliches Geschäftswissen und ist Schlüssel für den wirtschaftlichen Erfolg des Unternehmens. Ein betriebliches Informationssystem mit dieser Bedeutung sollte entsprechend als Investitionsgut betrachtet werden. Sowohl für die Erstellung, als auch für den Betrieb und die Weiterentwicklung während der Lebensdauer sind nüchterne Kosten-Nutzen-Rechnungen (u. a. ROI) erforderlich. Eine durchdachte Software- Architektur verbessert in der Regel die Ergebnisse dieser Rechnungen. Die Vorlesung wird durch eingeladene Vorträge von Führungskräften aus Beratungsunternehmen und von großen Anwendern ergänzt. IN2235: Software-Engineering in der industriellen Praxis | Software Engineering in an Industrial Setting",
    "learning_outcomes": "Nach der Teilnahme an dem Modul verfu#gen die Studierenden u#ber einen fundierten, ganzheitlichen Überblick der verschiedenen Tätigkeitsprofile und Berufsbilder von Informatikern und Wirtschaftsinformatikern in der Software-Entwicklung fu#r Unternehmen. Zudem verstehen Studierenden nach der Teilnahme an dem Modul aktuelle softwaretechnische Herausforderungen und Entwicklungen der Praxis.",
    "teaching_methods": "Vorlesung mit interaktiven Übungselementen",
    "media": "Vortrag mit digitalen Folien",
    "literature": "- [Fr07] Fröschle, H.-P.; Strahringer, S. (Hrsg.): IT-Industrialisierung, dpunkt.verlag, 2007.\n- [Pr04] Project Management Institute. A Guide to the Project Management Body of Knowledge,\n4th Edition, 2008.\n- [Si04] Siedersleben, J.: Moderne Software-Architektur. dpunkt.verlag 2004\n- [Sz02] Szyperski, C.: Component Software. Addison-Wesley, 2. Auflage, 2002",
    "lv_sws_lecturer": "Matthes, Florian; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nSoftware Engineering in der industriellen Praxis - Betriebliche Informationssysteme und ihre Rolle\nim Unternehmen (IN2235) (Vorlesung, 2 SWS)\nMatthes F [L], Matthes F, Meisenbacher S, Schopf T"
  },
  {
    "module_id": "IN2239",
    "title": "Algorithmic Game Theory",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer Klausur von 120 Minuten erbracht. In dieser soll nachgewiesen werden, dass in begrenzter Zeit\n- ein spieltheoretisches Problem erkannt wird,\n- Verbindungen zu in dem Modul behandelten Fragestellungen hergestellt werden und\n- Wege zu einer Lösung gefunden werden können.\nZudem wird es in Übereinstimmung mit der APSO Paragraph 6 Absatz 5(2) eine freiwillige Mid-Term-Leistung in Form von 10-20 online zu bearbeitenden Übungsaufgaben geben. Diese Mid-Term-Leistung wird im Verhältnis 80:20 (Klausur:Mid-Term-Leistung) mit der Klausurnote verrechnet und wird ausschließlich zur Verbesserung der Note einer bestandenen Klausur verwendet. In der Klausur sind keine Hilfsmittel außer einem sebst angefertigten Merkblatt zugelassen.",
    "repetition": "",
    "recommended_prerequisites": "Modul IN0015 Diskrete Strukturen (oder äquivalent)",
    "content": "Algorithmische Spieltheorie ist ein junges Forschungsgebiet in der Schnittmenge zwischen theoretischer Informatik, Mathematik und den Wirtschaftswissenschaften, das sich mit optimalem strategischen Verhalten in interaktiven Situationen beschäftigt. Besondere Aufmerksamkeit wird in dieser Vorlesung den algorithmischen Aspekten spieltheoretischer Lösungskonzepte wie beispielsweise Nash Gleichgewichten und der Gestaltung von ökonomischen Mechanismen gewidmet. IN2239: Algorithmic Game Theory | Algorithmic Game Theory",
    "learning_outcomes": "Nach erfolgreicher Teilnahme an dem Modul sind die Studierenden in der Lage\n- die Grundlagen algorithmischer Spieltheorie zu verstehen,\n- unterschiedliche Darstellungen von n-Spieler Spielen zu analysieren,\n- verschiedene Lösungskonzepte zu berechnen und zu vergleichen,\n- diese Lösungskonzepte komplexitätstheoretisch zu untersuchen und\n- einfache Algorithmen zur Bestimmung von Lösungen spieltheoretischer Probleme zu analysieren\nund zu skizzieren.",
    "teaching_methods": "Das Modul besteht aus einer Vorlesung und einer begleitenden Übung. Die Inhalte der Vorlesung werden im Vortrag und durch Präsentation vermittelt. Die Studierenden werden durch die regelmäßige Bereitstellung von Übungsblättern zur eigenständigen Auseinandersetzung mit den Inhalten der Vorlesung angeregt. Lösungswege für die Übungsaufgaben werden in der Übungsveranstaltung diskutiert.",
    "media": "Folien, Tafelanschrieb",
    "literature": "Noam Nisan, Tim Roughgarden, Eva Tardos, and Vijay Vazirani: Algorithmic Game Theory\n(Cambridge University Press, 2007)\nMartin Osborne and Ariel Rubinstein: A Course in Game Theory (MIT Press, 1994)\nRobert Aumann: Game Theory, in J. Eatwell, M. Milgate, and P. Newman: The New Palgrave, A\nDictionary of Economics, Vol. 2 (MacMillan, 1987)\nYoav Shoham, Kevin Leyton-Brown: Multiagent Systems: Algorithmic, Game-Theoretic, and\nLogical Foundations (Cambridge University Press, 2009)",
    "lv_sws_lecturer": "Brandt, Felix; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nAlgorithmic Game Theory (IN2239) (Vorlesung, 2 SWS)\nBrandt F\nÜbungen zu Algorithmic Game Theory (IN2239) (Übung, 2 SWS)\nBrandt F [L], Brandt F, Dong C, Greger M"
  },
  {
    "module_id": "IN2241",
    "title": "Social Computing",
    "level": "Master",
    "language": "Deutsch/Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Prüfungsart: Klausur und optional freiwillige Midtermleistung Die Prüfungsleistung wird in Form einer Klausur von 90 Minuten erbracht. Die Klausur überprüft anhand von Wissensfragen, inwieweit die Studierenden einen Überblick über Social-Computing- Konzepte, -Techniken und -Denkweisen (die im Abschnitt Inhalt aufgeführt sind) gewonnen haben, mit diesen vertraut sind und diese verstanden haben. Die Klausur überprüft anhand einfacher kleinerer Aufgaben, inwieweit die Studierenden in der Lage sind, dieses Wissen im Hinblick auf die gewünschten Lernergebnisse zu verknüpfen und anzuwenden. Den Studierenden werden zu jedem Thema eine größere Zahl von Kontrollfragen zur Lernkontrolle und Prüfungsvorbereitung zur Verfügung gestellt. Ein Teil dieser Kontrollfragen wird in leicht abgewandelter Form auch in der Klausur geprüft, um so einen Anreiz zur Auseinandersetzung mit dem Stoff anhand dieser Kontrollfragen zu schaffen. Zu den Übungen kann es Hausaufgaben geben, die abgegeben und als freiwillige Midtermleistung mit einer Gesamtnote benotet werden können.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Empfohlene Voraussetzungen sind die Studieninhalte des Bachelors Informatik.",
    "content": "In dem Modul IN2241 werden beispielhaft folgende Inhalte behandelt:\n- Grundlagen Social Computing, Social Media, Web2.0, (Mobile, Decentralized) Social Networking,\nModelle sozialen Kontexts\n- Grundlagen Soziometrie: Zentralität: Konzepte und Algorithmen\n- Grundlagen Soziometrie: Dichte Subnetzwerke: Konzepte und Algorithmen\nIN2241: Social Computing | Social Computing\n- Grundlagen Soziometrie: Graph Clustering: Konzepte und Algorithmen\n- Metrische Clustering Verfahren für Social Computing / Social Gaming Anwendungen\n- Metriken, Eigenschaften und Modelle realer Netzwerke (Small Worlds etc.)\n- Modelle für soziale Beziehungen in Raum und Zeit\n- Grundlagen des Social Signal Processing\n- Grundlagen Spieltheorie\n- Optional: Visualisierung von statischen und dynamischen Netzwerken\n- Optional: Social Semantic Web",
    "learning_outcomes": "Nach der erfolgreichen Teilnahme am Modul sind die Studierenden in der Lage, die im Inhalt genannten Grundbegriffe, Konzepte und Denkweisen des Social Computing zu verstehen, um diese zum einen bei der Konzeption und Implementierung von Social Computing Anwendungen anwenden zu können, die insbesondere individuelle und soziale Kontexte von Spielern intelligent einbeziehen. Zum anderen sind sie in der Lage, diese Grundbegriffe, Konzepte und Denkweisen, auch in der Forschung zum Thema Social Computing anwenden zu können. Hierzu zählt insbesondere die Fähigkeit, entsprechende Fachpublikationen lesen und verstehen zu können sowie die Fähigkeit, auch eigene Algorithmen und abstraktere soziotechnische Lösungsansätze für Social Computing Probleme in Zusammenhang mit den genannten Inhalten entwickeln zu können.",
    "teaching_methods": "Vorlesung und praktische Übungen (bspw. Erfassen und Analysieren von Daten, Auswertung mit Hilfe eigener Programme und Fremdsoftware), die in Kleingruppen oder individuell blockweise in der zweiten Semesterhälfte durchgeführt werden und die Anwendung von Konzepten und Methoden aus der Vorlesung einüben. Die Übungen werden in entsprechenden Präsenzveranstaltungen vorgestellt und mit Hilfe von Diskussionsforen in geeigneten E-Learning Plattformen betreut.",
    "media": "Folienpräsentation, Tafelanschrieb, Vorlesungsaufzeichnung, Diskussionsforen in E-Learning\nPlattformen.",
    "literature": "Originalarbeiten, Übersichtsartikel und Kapitel aus Lehrbüchern, die als empfohlene Literatur zu\nden jeweiligen Themen bekannt gegeben werden und den Studierenden online zur Verfügung\ngestellt werden.",
    "lv_sws_lecturer": "Klinker, Gudrun Johanna; Prof. i.R.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nSocial Computing (IN2241) (Vorlesung mit integrierten Übungen, 4 SWS)\nGroh G\nIN2241: Social Computing | Social Computing"
  },
  {
    "module_id": "IN2247",
    "title": "Funktionale Sicherheit",
    "level": "Master",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 4,
    "hours_total": 120,
    "hours_self_study": 75,
    "hours_presence": 45,
    "examination_achievements": "60-minütige Klausur, die die erwarteten Lernergebnisse und erworbenen Kompetenzen prüft. Nachgewiesen werden sollen Kenntnis und Verständnis der Konzepte und Bestandteile der ISO 26262, der Hintergründe von Anforderungen an Werkzeugqualifizierungen und der Grundlagen der Gefahren- und Risikoanalyse im KFZ-Bereich. Das Verständnis des modellbasierten Entwicklungsparadigmas soll durch exemplarische Anwendung nachgewiesen werden.",
    "repetition": "",
    "recommended_prerequisites": "",
    "content": "Die Gewährleistung der funktionalen Sicherheit ist in den letzten Jahren zu einem wichtigen Designziel bei der Entwicklung automotiver Systeme geworden. Die 2011 verabschiedete Sicherheitsnorm ISO 26262 „Road vehicles – Functional safety“ beschreibt einen Prozessrahmen, ein Vorgehensmodell (einschl. Aktivitäten und Arbeitsprodukten) sowie anzuwendende Methoden für die Entwicklung sicherheitsrelevanter elektrischer/elektronischer Systeme (E/E Systeme) in Kraftfahrzeugen. Ihre Umsetzung soll die funktionale Sicherheit von E/E Systemen in Personenkraftwagen sicherstellen. In der Vorlesung wird auf grundlegende Konzepte und Bestandteile der ISO 26262 eingegangen. Schwerpunkte dabei sind die Gefahren- und Riskioanalyse, die Anforderungen der Norm an die Softwareentwicklung und die Qualifizierung von Entwicklungswerkzeugen. Die Umsetzung der Konzepte wir am Beispiel der Modell-basierten Entwicklung von Steuergerätesoftware illustriert. In der Übung werden u.a. folgende Themen vertieft: IN2247: Funktionale Sicherheit | Functional Safety\n- Modell-basierte Funktionsentwicklung und –absicherung\n- Gefahren- und Riskoanalysen\n- Sicherheitsanalysen\n- Referenzprozesse für die Entwicklung von Funktionssoftware\n- Gap-Analyse eines Beispielprozesses\n- Klassifizierung und Qualifizierung von Entwicklungswerkzeugen",
    "learning_outcomes": "Nach der Teilnahme an dem Modul sind die Studierenden in der Lage, Gefahren und Risiken hinsichtlich der funktionalen Sicherheit im KFZ zu analysieren. Außerdem können sie Methoden und Konzepte der Modellbasierten Funktionsentwicklung und -absicherung anwenden. Des Weiteren können die Studierenden Entwicklungswerkzeuge klassifizieren und qualifizieren.",
    "teaching_methods": "Vorlesung, Übung, Aufgaben zum Selbststudium",
    "media": "Folien",
    "literature": "Wird in der Vorlesung bekanntgegeben",
    "lv_sws_lecturer": "Pretschner, Alexander; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nFunktionale Sicherheit (IN2247) (Vorlesung mit integrierten Übungen, 3 SWS)\nPretschner A [L], Conrad M, Lipp S"
  },
  {
    "module_id": "IN2258",
    "title": "Middleware und verteilte Systeme",
    "level": "Bachelor",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Type of examination: exam (75 minutes) The module examination consists of a 75-minute, closed-book exam. The exam verifies to what extend the students are able to convey and recite the core building blocks, concepts, algorithms, and protocols for distributed system design. Theoretical and knowledge-oriented questions check the familiarity with principles and concepts; Practical tasks check the ability to apply selected approaches, algorithms, protocols, and programming techniques on the paper.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Algorithms and data structures (searching, sorting, hash tables, lists, trees, graphs, basic\nnotions of complexity (O-notation)), basic programing skills and tools (Java, C/C++, concurrency,\nmultithreading, synchronization, code versioning and concurrent",
    "content": "A \"middleware system\" is a programming abstraction and constitutes a set of services that aim at facilitating the development of distributed applications in heterogeneous, networked environments. The primary objectives of middleware are to foster application portability, distributed application interoperability, and facilitate software system integration. At least conceptually, the \"middleware layer\" comprises a layer below the application and above the operating system and network substrate. This course introduces basic distributed system principles and middleware systems, aims at identifying the principles underlying the use of middleware systems, and characterizes common middleware paradigms and abstractions. The course describes a large variety of Middleware systems, starting with original Middleware technologies (e.g. DCE, CORBA, DCOM); going to more modern and lightweight solutions (e.g. Java RMI, J2EE, MQ-Series, JMS, Web IN2258: Middleware und verteilte Systeme | Middleware and Distributed Systems Services); and finally finishing with state-of-the-art and large-scale technologies (e.g. Apache Thrift, Protocol Buffers, Avro). Examples, case studies, as well as Middleware implementations are studied to achieve a better understanding of the topic. Course outline: 1. Introduction 2. Communication basics: a. Protocol design b. Socket programing c. External data representation d. Remote procedure calls & remote invocations 3. Middleware foundations a. Roots, origins, historical development, principles b. Role of standards, standardization processes c. Reference models (e.g., OMA, RMODP, SOA) d. Interoperability, system integration, multi-tiered systems 4. Middleware paradigms a. Distributed computing (procedural paradigm, failure semantics) b. Distributed objects (object-oriented paradigm) c. Messaging Patterns (e.g., request/reply, messaging, publish/subscribe) d. Queuing theory/networks e. Service-oriented architecture (SOA) and services f. Event-driven architecture (EDA)) 5. Middleware systems a. Naming and directory services b. Web Services c. Messaging systems d. Application servers 6. Case studies and examples 7. Middleware implementation techniques",
    "learning_outcomes": "1. Understand common pitfalls that determine the development of distributed applications. 2. Apply basic programming abstractions for building distributed applications (e.g., sockets, messaging, remote procedure call). 3. Understand characteristics and properties of common middleware abstractions. 4. Apply higher-level middleware abstractions for building distributed applications (e.g., publish/ subscribe, transactions). 5. Evaluate the applicability of common middleware abstractions in building distributed application architectures. 6. Understand patterns applicable for implementing middleware abstractions.",
    "teaching_methods": "The module is organized as a combination of lectures with PowerPoint slides and blackboard notes, invited talks, and small group tutorials to discuss homework assignments. The lecture IN2258: Middleware und verteilte Systeme | Middleware and Distributed Systems motivates challenges in Middleware system design by examples and presents theory, algorithms, and protocols to solve these challenges. The theoretical concepts and algorithms are applied and practiced individually by students through homework assignments. Assignments are discussed in a weekly tutorial to strengthen the learning outcome.",
    "media": "- Power-point slides\n- Videos\n- Blackboard\n- Weekly assignments\n- E-learning platform (Moodle)",
    "literature": "Selected chapters from:\n1. Distributed Systems: Principles and Paradigms. Andrew S. Tanenbaum & Maarten van Steen.\nPrentice Hall (a recent edition).\n2. IT Architectures and Middleware: Strategies for Building Large, Integrated Systems, Second\nEdition. Chris Britton; Peter Bye\n3. Beginning Java 8 Language Features: Lambda Expressions, Inner Classes, Threads, I/O,\nCollections and Streams. Kishori Sharan\n4. Principles of Transaction Processing. By P. A. Bernstein, E. Newcomer\n5. DNS in Action. Alena Kabelová; Libor Dostálek\n6. Web Service Contract Design and Versioning for SOA. Thomas Erl; Anish Karmarkar; Priscilla\nWalmsley; Hugo Haas; Canyang Kevin Liu; David Orchard; Andre Tost; James Pasley; Umit\nYalcinalp",
    "lv_sws_lecturer": "Mayer, Ruben; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2267",
    "title": "Transaction Systems",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 105,
    "hours_presence": 75,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer Klausur erbracht; die Prüfungsdauer beträgt 90 Minuten. Wissensfragen überprüfen die Vertrautheit mit der Interaktion von Transaktionsverwaltung und Recovery. Transferaufgaben und kleine Szenarien überprüfen die Fähigkeit, Transaktionen sicher (Erhaltung der ACID Eigenschaften ) und trotzdem effizient (hohe Nebenläufigkeit) zu entwickeln. Notenbonus: Es wird optionale Hausaufgaben geben. Wenn Sie 75% oder mehr in den Hausaufgaben erreichen, erhalten Sie einen Bonus von 0,3 auf die Prüfungsnote (wenn Ihre Prüfungsnote zwischen 1,3 und 4,0 liegt).",
    "repetition": "",
    "recommended_prerequisites": "- IN0015 Diskrete Strukturen\n- IN0008 Grundlagen: Datenbanken",
    "content": "- Konzepte von Korrektheit\n- Algorithmen für die Mehrbenutzersynchronisation (Concurrency Control)\n- Multiversion Concurrency Control\n- Concurrency Control für Objekte\n- Concurrency Control für relationale Datenbanken\n- Concurrency Control für Indexstrukturen\n- Implementierung der Mehrbenutzersynchronisation\n- Transaktionsfehlerbehandlung (Recovery)\n- Crashrecovery\n- Mediarecovery\nIN2267: Transaction Systems | Transaction Systems\n- Anwendungsrecovery\n- Verteilte Mehrbenutzersynchronisation\n- Verteilte Transaktionsrecovery",
    "learning_outcomes": "Die Studierenden\n- verstehen die Interaktion von Transaktionsverwaltung und Recovery\n- können Transaktionen sicher und trotzdem effizient entwickeln, so dass ACID-Transaktionen mit\nhoher Nebenläufigkeit erreicht werden",
    "teaching_methods": "Das Modul wird als Vorlesung mit begleitender Übungsveranstaltung angeboten. In der Vorlesung werden die Inhalte im Vortrag durch anschauliche Beispiele sowie durch Diskussion mit den Studierenden vermittelt. Die Vorlesung soll den Studierenden dabei auch als Motivation zur eigenständigen inhaltlichen Auseinandersetzung mit den Themen sowie zum Studium der Literatur dienen. Jeweils passend zu den Vorlesungsinhalten werden Aufgabenblätter angeboten, die die Studierenden zur selbstständigen Kontrolle sowie zur Vertiefung der gelernten Methoden und Konzepte nutzen sollen. Die Arbeit daran erfolgt selbstständig in Kleingruppen. Es werden weiterhin konkrete Beispielszenarien mit Stoff aus der Vorlesung vorgestellt, aus welchen sich Fragestellungen ergeben, die die Studierenden theoretisch oder auch in kleinen Projekten bearbeiten, die abgegeben, kommentiert und bewertet sowie in der Übungsveranstaltung diskutiert werden.",
    "media": "Vorlesung mit animierten Folien",
    "literature": "Gerhard Weikum, Gottfried Vossen. Transactional Information Systems: Theory, Algorithms, and\nthe Practice of Concurrency Control and Recovery. Morgan Kaufmann Publishers, 2002.",
    "lv_sws_lecturer": "Neumann, Thomas; Dipl.-Ing. (Univ.)\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nTransaktionssysteme (IN2267) (Vorlesung mit integrierten Übungen, 5 SWS)\nNeumann T, Birler H, Schmidt T"
  },
  {
    "module_id": "IN2268",
    "title": "BGCE Opening Weekend",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Zweisemestrig",
    "frequency": "Sommersemester",
    "credits": 2,
    "hours_total": 60,
    "hours_self_study": 0,
    "hours_presence": 60,
    "examination_achievements": "Type of Assessment: laboratory assignments. Group conversations examine the students' ability to remember, understand, and analyse team roles. Individual conversations examine the rest of the intended learning outcomes.",
    "repetition": "",
    "recommended_prerequisites": "",
    "content": "- Roles in and structure of a team\n- Development phases of a team\n- Perception, communication, feedback within team structures\n- Conflict handling in a team\n- Leading and moderating meetings\n- Organising and postprocessing the end of a team project",
    "learning_outcomes": "At the end of the module, students are able to remember, understand, and analyse different roles in a team structure. They can give and receive constructive feedback. Participants are able to apply the acquired knowledge to different situations and to design, realise, and evaluate a stepping-out phase of a team near the end of the common project. IN2268: BGCE Opening Weekend | BGCE Opening Weekend",
    "teaching_methods": "The Opening Weekend consists of workshops, group challenges, and team experience. The content is taught by flipchart presentations, group work, and exemplary team situations. The students shall be prompted to work in teams with other students, critizise themselves and others in a constructive way, and work on problems and their solutions in a team.",
    "media": "Whiteboard, flipchart, team games, facilitating tools",
    "literature": "n.a.",
    "lv_sws_lecturer": "Bungartz, Hans-Joachim; Prof. Dr. rer. nat. habil.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2269",
    "title": "BGCE Conference Contribution",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester/Sommersemester",
    "credits": 2,
    "hours_total": 60,
    "hours_self_study": 45,
    "hours_presence": 15,
    "examination_achievements": "Type of Assessment: presentation. The students capability to design a scientific poster and present it is graded - depending on the conference - by a talk, presentation, and poster session, respectively.",
    "repetition": "",
    "recommended_prerequisites": "",
    "content": "Preparation of a contribution for a national or international conference followed by a corresponding participation.",
    "learning_outcomes": "At the end of the module, students are able to design a scientific poster and present it at a national or international conference. They have experience in describing and explaining the content of the underlying scientific project work.",
    "teaching_methods": "The students participate at a conference where they present research results which were made by their own in a conference typical way like a poster presentation or a conference talk. Discussions with other conference participants improve the knowledge transfer with other researchers in the same area. IN2269: BGCE Conference Contribution | BGCE Conference Contribution",
    "media": "Poster presentation, presentation slides",
    "literature": "n.a.",
    "lv_sws_lecturer": "Bungartz, Hans-Joachim; Prof. Dr. rer. nat. habil.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2270",
    "title": "BGCE Ferienakademie",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 4,
    "hours_total": 120,
    "hours_self_study": 40,
    "hours_presence": 80,
    "examination_achievements": "Type of Assessment: project work and presentation. The project work assesses the students's capability to immerse into (complex) topics of computational engineering. The presentation examines the students' ability to structure and create a talk in a topic of computational engineering and to follow and discuss the topics illustrated in the talks by other participants.",
    "repetition": "",
    "recommended_prerequisites": "",
    "content": "A special topic in the area of engineering, natural sciences, informatics or an interdisciplinary field.",
    "learning_outcomes": "At the end of the module, students are able to immerse into (complex) topics of computational engineering as well as to structure and create a corresponding presentation. The participants are able to follow and discuss the topics illustrated in the talks.",
    "teaching_methods": "During Ferienakademie, several courses with different topics are offered. Depending on the course, this module has a seminar, workshop, or team project character or a combination of those. The content is taught by talks, teamwork, and case studies. The students work and discuss in teams, provide constructive feedback, and work on advanced problems and their solutions. The participants will be supported by supervisors in all aspects of their contributions. IN2270: BGCE Ferienakademie | BGCE Ferienakademie",
    "media": "Whiteboard, flipchart, presentation/lecture slides, lecture notes, exercise sheets",
    "literature": "Literature depends on the course at Ferienakademie. A list of literature will be published by the\ncourse supervisors in time.",
    "lv_sws_lecturer": "Bungartz, Hans-Joachim; Prof. Dr. rer. nat. habil.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2271",
    "title": "BGCE ENB Softskill Course",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester/Sommersemester",
    "credits": 1,
    "hours_total": 30,
    "hours_self_study": 10,
    "hours_presence": 20,
    "examination_achievements": "Type of Assessment: laboratory assignments examined by conversation. The laboratory performance examines the students' capability to remember, understand, and apply the corresponding topics is examined by conversation.",
    "repetition": "",
    "recommended_prerequisites": "",
    "content": "Depending on the concrete ENB softskill course variant, topics such as teamwork, motivation, leadership, etc. will be treated. The course will typically take place in block format.",
    "learning_outcomes": "Depending on the concrete softskill course variant of this module, offered by the Elite Network of Bavaria (ENB) of the \"Bayerisches Staatsministerium fuer Wissenschaft, Forschung und Kunst\", the participants are able to remember, understand, and apply the corresponding topics (concerning teamwork and rhetoric, e.g.). The students realise contacts to other members of the ENB.",
    "teaching_methods": "The module comprises a workshop seminar. The content is taught by talks, teamwork, and case studies. The students work in teams, discuss and critizise each other in a constructive way, and work in groups on given theoretical or practical problems and corresponding solutions. IN2271: BGCE ENB Softskill Course | BGCE ENB Softskill Course",
    "media": "Whiteboard, flipchart, presentation/lecture slides, games",
    "literature": "Literature depends on the ENB Soft Skills Course. A list of literature will be published by the course\nsupervisor in time.",
    "lv_sws_lecturer": "Bungartz, Hans-Joachim; Prof. Dr. rer. nat. habil.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2272",
    "title": "BGCE Compact Course",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 2,
    "hours_total": 60,
    "hours_self_study": 15,
    "hours_presence": 45,
    "examination_achievements": "Type of Assessment: oral examination and exercises. The oral examination of 30 minutes grades the students' ability to reproduce and discuss the corresponding methods, whereas the exercise work examines the rest of the intended learning outcomes.",
    "repetition": "",
    "recommended_prerequisites": "",
    "content": "An invited, internationally renowned researcher presents - in a block-course format - an advanced topic from his/her area of specialisation in computational engineering.",
    "learning_outcomes": "At the end of the module, students are able to reproduce and discuss methods of the corresponding field of computational engineering treated in the course. The participants can analyse the approaches with respect to performance, usability, and limitations and are able to implement simple variants of the underlying algorithms.",
    "teaching_methods": "The module consists of a lecture and an associated exercise. The contents of the lecture are provided by talks and presentations. During the exercises - which are partly done as team work - the students work on selected examples of topics of the lecture. The whole module is offered as a block over a period of one week. IN2272: BGCE Compact Course | BGCE Compact Course",
    "media": "Whiteboard, flipchart, presentation/lecture slides",
    "literature": "Literature depends on the Compact Course. A list of literature will be published by the course\nsupervisor in time.",
    "lv_sws_lecturer": "Bungartz, Hans-Joachim; Prof. Dr. rer. nat. habil.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2273",
    "title": "Interventionelle Bildgebung und -verarbeitung",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Assessment will be done in terms of continuous excercises and one final examination. The exercises will consist of practical and theoretical tasks aiming at assessing the students’ ability to transfer knowledge obtained during lecture classes into practical scenarios. Assignments will cover practical programming tasks in Matlab, Python and C++ with OpenCV and OpenGL and short presentations on selected topics advancing contents of lecture classes. For each successfully completed exercise, students will obtain bonus points for the exam. A final written exam of 90 minutes duration at the end of the semster will test the students on their acquired theoretical knowledge and competences. The exam will cover the general concepts of interventional imaging, algorithms in interventional image processing and short essay questions on clinical benefits.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "CAMP 1, or other introductory lecture on image processing",
    "content": "1. Clinical motivation (interventional radiology, neuroradiology, and cardiology) 2. Interventional imaging modalities 3. Basics of x-ray imaging 4. Angiographic imaging in 2D 5. Angiographic imaging in 3D: CT basics, CT reconstruction 6. Current topics (cardiac imaging, perfusion imaging, metal artifact reduction, etc.) IN2273: Interventionelle Bildgebung und -verarbeitung | Interventional Imaging and Image Processing",
    "learning_outcomes": "The participants will learn about the different challenges of an interventional setup compared to a diagnostic scenario. Key concepts of interventional imaging and image processing will be presented and participants learn how to apply these in practice. Example industry and research applications will be demonstrated in order to allow the students to gain an overview on the state-of- the-art. After successful completion of this module, participants understand the key concepts of interventional imaging and image processing. They remember minimally invasive procedures and can analyze challenges associated to imaging and image visualisation. Participants are able to analyze and evaluate state-of-the-art algorithms for digital imaging and image processing and can create new methods on top of these.",
    "teaching_methods": "weekly lecture (presentation) and excercise (group work, presentation, experiment,case study, individual work, peer instruction)",
    "media": "PowerPoint, films, whiteboard, excercise sheets",
    "literature": "An updated list will be maintained on the homepage of the lecture",
    "lv_sws_lecturer": "Navab, Nassir; Prof. Ph.D.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nDr. Stefanie Demirci"
  },
  {
    "module_id": "IN2288",
    "title": "Event Processing",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "There is a final exam, which verifies the knowledge of theory. Exam duration: 90 minutes.",
    "repetition": "",
    "recommended_prerequisites": "",
    "content": "Introduction to Event Processing (EP) applications. After the module the student knows the common building blocks EP systems and can apply them. The outline of the module is as following. First, a introduction in EP is given, What EP support is required? What are the characteristics and requirements of EP? Then more theoretical background is given: Event processing terminology, theories of events & philosophical perspectives. Throughout the module multiple distributed, local, and event processing languages are presented which are then used in the course project. Additional in the lecture the following things are presented and discussed: event processing patterns, event generation, event detection, event filtering and event correlation algorithms. To model event-based systems formalisms are presented, e.g., event calculus, event algebra or Petrie nets. Additionally covered are event processing paradigms, models for event stream processing, event processing languages, Publish/Subscribe, Tuple spaces, Rule-based event processing, Trigger processing, Continuous query processing. Additional keywords which are presented are EP Languages and data models, window semantics, matching, filtering, Rete matching, staged-event driven architecture and emerging standards & products as case studies. The content is supported by examples and case studies. Also the content is practically used within the course project. IN2288: Event Processing | Event Processing [EP]",
    "learning_outcomes": "Processing paradigms. Apply event processing formalisms, patterns and languages to use cases. Analyze capabilities of emerging standards and products on event processing. Know the background and theory of event processing.",
    "teaching_methods": "The module is organized as combination of lectures slides, invited talks, case studies and required reading material. During the course a event processing system presented in the case studies is used and implemented. At the end of the lecture the implementation is presented and in a discussion advantages and disadvantages of the system discussed. The course project is conduced in teams of two-three students.",
    "media": "Moodle, Lectures, assignments, use case",
    "literature": "A reader with several research and white papers.",
    "lv_sws_lecturer": "Mayer, Ruben; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2289",
    "title": "Interaktive Werbung",
    "level": "Bachelor",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 9,
    "hours_total": 270,
    "hours_self_study": 170,
    "hours_presence": 100,
    "examination_achievements": "Die Prüfungsleistung wird in Form von Projektarbeit erbracht. Die Studierenden wenden die im begleitenden Seminar erworbenen Kenntnisse in einem interdisziplinären Team an, um gemeinsam eine selbstdefinierte Projektaufgabe (Erstellung eines Werbunsorientierten Exponats) umzusetzen. Damit weisen die Teilnehmer nach, dass sie mit aktuellen Konzepten der Werbefilmproduktion umgehen, dass sie sie verstanden und selbständig in kleinen Filmprojekten einsetzen können. Die Lösung wird am Semesterende präsentiert. Die Note ergibt sich aus der Bewertung der Qualität der Lösung und Präsentation der Projektaufgabe (gemessen wird der individuelle Beitrag des Studierenden zum Erfolg des Projektteams)",
    "repetition": "",
    "recommended_prerequisites": "IN0001 Einführung in die Informatik 1,\nIN0002 Praktikum: Grundlagen der Programmierung,\nIN0031 Einführung in Informatik für Games Engineering,\nIN0033 Interaktionsmethoden und -geräte",
    "content": "Das Seminar vermittelt grundlegende Kenntnisse in den Bereichen:\n- Arbeitsweisen und Erfolgskriterien in der Werbebranche\n- Praktische Umsetzung von Ideenfindungsmethoden\n- Nutzung von technischen Mitteln in Werbefilmen (Special Effects, Sound), sowie Optionen der\nVerbreitung/Marketing (Internet) IN2289: Interaktive Werbung | Interactive Advertisment\n- Methoden, um Filmkonzepte und auch sich selbst in Kurzform effektiv (Pitsch), oder auch\ndetailliert zu präsentieren\n- Methoden, um eine Filmidee umzusetzen (Casting, Regie, Dreh, Postproduktion, Montage)\nDas Projekt vermittelt Erfahrungen hinsichtlich:\n- Konstruktiver, effizienter Teamarbeit in sehr interdisziplinär aufgestellten Teams\n- Aufstellung und Einhaltung von Terminplänen (mit definitivem Abschlusstermin)\n- Nutzung eines gegebenen Finanzbudgets)",
    "learning_outcomes": "Nach Abschluss dieses Moduls sind Studierende in der Lage, grundlegende Aspekte der Planung, Finanzierung und Durchführung einer Werbefilmproduktion zu erinnern und in kleinen eigenen Projekten auch in heterogenen Teams zur Realisierung einer gewählten Projektidee anzuwenden",
    "teaching_methods": "Lehrtechnik: Projekt Lernaktivität: Bearbeiten von Problemen und deren Lösungsfindung, Zusammenarbeit mit anderen (interdisziplinären) Studierenden, Vorbereiten und Durchführen von Präsentation, Einhalten von Fristen Lehrmethode: Gruppenarbeit, Präsentation, Projektarbeit",
    "media": "Direkte, individueller Gedankenaustausch mit (Gast)dozenten und Kommilitonen; Folien, Filme.",
    "literature": "",
    "lv_sws_lecturer": "Klinker, Gudrun Johanna; Prof. i.R.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2290",
    "title": "Geschichtswelten",
    "level": "Bachelor",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Die Prüfungsleistung wird in Form von Projektarbeit erbracht. Die Studierenden entwickeln eigene transmediale Projekte in gruppenbasierter Arbeit und präsentieren fortlaufend den aktuellen Fortschritt ihrer Ergebnisse. Die finale Lösung wird am Semesterende präsentiert. Die Prüfungsleistung besteht aus\n- Abgabe eines ca 10seitigen Exposé\n- praktischer Umsetzung der Idee in einer Spiel-Demo\n- Erstellung mind. eines Derivats in einem anderen Medium\n- Abschlusspräsentation (ca 15min)\nDie Note ergibt sich aus\n- Qualität des Exposés (bzgl. Konzeptionierung und dramaturgischer Regeln) (30%)\n- Stimmigkeit der Übertragung in die Praxis (30%)\n- Qualität des Derivats (bzgl. Der eigenständigen Anwendung der Lerninhalte) (20%)\n- Qualität der Abschlusspräsentation (20%)\nDie Beiträge der einzelnen Studierenden müssen dabei bei allen vier Bestandteilen deutlich gekennzeichnet sein (beispielsweise durch die Angabe von Abschnitten, Seitenzahlen, inhaltlichen Schwerpunkten oder Codebestandteilen) bzw. präsentiert werden und werden einzeln bewertet.",
    "repetition": "Semesterende\nIN2290: Geschichtswelten | Story Worlds [StoWo]",
    "recommended_prerequisites": "IN0031 Einführung in die Informatik für Games Engineering\nIN0038 Echtzeit-Computergrafik",
    "content": "Storyworlds beschreiben alle Grundregeln und Eigenschaften einer fiktiven Welt, in der eine unendliche Vielzahl von Geschichten und Abenteuern erzählt werden können. Eine Storyworld ist keine Geschichte, sondern vielmehr das Universum, in dem Geschichten stattfinden. Die Bedeuting von Storywelten wächst vorallem durch Transmedia, welches auf einer in sich logisch erzählten Geschichtswelt basiert. Von dieser Welt aus können dann Derivate in den verschiedensten Formaten (Game, Film, Comic, ARG, etc.) entwickelt werden.",
    "learning_outcomes": "Nach der Teilnahme an dem Modul verstehen die Studierenden die Grundregeln zur Schaffung von Storywelten und sind in der Lage das Erlernte anzuwenden, um eigene, neue Welten zu erschaffen. Die Studierenden sind ebenfalls in der Lage diese Welten in diverese Formate zu übertragen, unter Berücksichtung der Abstimmungsprozesse, die vor allem bei Games und transmedialen Formaten von besonderer Bedeutung sind.",
    "teaching_methods": "Lehrtechnik: Seminar, Projekt Lehrmethode: Seminar, Gruppenarbeit, Präsentation, Projektarbeit Lernaktivität: In dem Projekt „Storyworlds“ werden zu Beginn die Grundelemente einer Storywelt definiert und erarbeitet, um dann in Zusammenhang gesetzt zu werden. Ferner werden in Gruppenübungen eigene Welten erschaffen und dazugehörige Derivate entwickelt. Diese werden dann bei einem Pitch vorgestellt und durch Feedbacks weiterentwickelt.",
    "media": "Folien, Filme, Bücher, Computer",
    "literature": "- Robert Pratton: Getting Started in Transmedia Storytelling: A Practical Guide for Beginners,\nCreateSpace Independent Publishing Platform, 2011, ISBN-10: 1-45656-468-4\n- Robert McKee: Story, Methuen Publishing, 1999, ISBN-10: 9-78041371-560-9",
    "lv_sws_lecturer": "Plecher, David; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nGeschichtswelten (IN2290) (Forschungspraktikum, 4 SWS)\nKlinker G [L], Blaschke B, Liedtke S"
  },
  {
    "module_id": "IN2291",
    "title": "Protein Prediction II for Computer Scientists",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 8,
    "hours_total": 240,
    "hours_self_study": 150,
    "hours_presence": 90,
    "examination_achievements": "The module is graded by a written exam at the end of the semester. The exam takes 120 minutes. Weekly programming exercises and questions are not graded; they may bring a bonus of +0.3 in the final grade. In the exam, the participants demonstrate their ability to devise and discuss an appropriate computational approach solving a biological problem in the area of protein function prediction. For instance, they choose the appropriate methods depending on the type of data they have (e.g. sequence or annotation data) along with the appropriate data abstraction level (e.g. GO level, EC classes) depending on the particular biological question. Students demonstrate their understanding of the concepts in the choice and/or design of appropriate solutions and they can evaluate pros and cons of given their answers and of alternative approaches. They can demonstrate their ability to create a usable tool implementing a solution approach down to the level of pseudo-code. More details will be announced early on in the lecture.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "None required (recommended: IN2322: Protein Prediction I for Computer Scientists).",
    "content": "Introduction: What is a protein? What is protein function? Overview over prediction of protein function. Predicting protein function using sequence: motifs, annotation transfer by homology (homology- based inference), de novo predictions. Predicting protein function using structure: structural IN2291: Protein Prediction II for Computer Scientists | Protein Prediction II for Computer Scientists motifs, annotation transfer via structure similarity. Prediction of: subcellular localization, protein- protein interactions, protein-DNA and –RNA interactions, protein-substrate interactions, protein networks, GeneOntology (GO), Enzyme Classification, prediction of enzymatic activity, prediction of functional classes (e.g. GO classes). Prediction of the effect of single point mutations (sequence variants) on protein function and the organism (focus on single amino acid variants). Prediction of phenotype from genotype. As opposed to the first part (Protein Prediction I), protein structure plays a minor role confined to what is helpful to further our understanding of protein function. Another major difference is that alignment methods will not be discussed although their results (evolutionary information) will be central to almost all prediction methods.",
    "learning_outcomes": "Students will learn the basic principles of protein sequence analysis with focus on protein function and protein function prediction. They will be confronted with the biological and computer science background of the methods toward these objectives in computational biology. Particular focus will be on learning safeguards to correctly estimate performance of machine learning. As opposed to the first part (Protein Prediction I for Computer Scientists), protein structure plays at most a minor role: it will be introduced only if it has been helpful to further our understanding of function. Students will acquire the theoretical background consisting of the presented knowledge to develop and implement simple independent solutions towards the presented problems.",
    "teaching_methods": "Lectures, Exercises, Questions & Answers (Q&A) sessions Lectures (include Q&A): Theoretical background for all topics will be presented in traditional lecture style with slides, as well as, interactively through white board presentations and Q&A sessions. Exercises (include Q&A): Programming of a particular novel prediction method; this will deepen and apply the material presented in the lectures; occasionally, presentation of additional material needed for better understanding; exercises also include interactive Q&A sessions, and presentations from the students.",
    "media": "Lectures presented as interactive seminars using projector and white board; some lectures will be\ngiven on the white board, only. If supported: All lectures will be video-taped and both the slides and\nthe recordings will be made available shortly after the lecture.",
    "literature": "Will be announced in the lecture. For formal reasons: Anna Tramontano: Introduction to\nBioinformatics, or Arthur Lesk: Introduction to Bioinformatics, or Amit Kessel & Nir Ben-Tal:\nIntroduction to Proteins",
    "lv_sws_lecturer": "Rost, Burkhard; Prof. Dr.\nIN2291: Protein Prediction II for Computer Scientists | Protein Prediction II for Computer Scientists\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nProtein Prediction II for Computer Scientists (IN2291) (Vorlesung mit integrierten Übungen, 6\nSWS)\nRost B, Olenyi T"
  },
  {
    "module_id": "IN2292",
    "title": "Introduction to Surgical Robotics",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 120,
    "hours_presence": 60,
    "examination_achievements": "Vortrag und Ausarbeitung der Projektarbeit; 3 Hausaufgaben, zu lösen in Teams",
    "repetition": "Semesterende",
    "recommended_prerequisites": "keine",
    "content": "Anwendungsorientierter Kurs, der mit der Darstellung der klinischen Anwendungen beginnt (in Kooperation mit einer Klinikabteilung). Hierbei werden sowohl konventionelle Techniken als auch Roboter-unterstützte Methoden präsentiert und gegenübergestellt. Im zweiten Schritt werden die theoretischen Grundlagen der (Medizin)-Robotik vermittelt. Schließlich soll dieses neue Wissen angewendet werden, um unter Einsatz von Roboter-unterstützten Methoden innovative Lösungen für medizinische Problemstellungen zu entwickeln. Vorlesung: + Grundlagen des Einsatzes von Robotik in ausgewählten medizinischen Anwendungen in der Chirurgie (Potential, Herausforderungen und Problemstellungen beim Einsatz von Robotik in der Chirurgie) + Grundlagen der Robotik: ++ System ++ Kinematik ++ Dynamik ++ Mechanik ++ Elektronik IN2292: Introduction to Surgical Robotics | Introduction to Surgical Robotics [ISR] ++ Sensorik ++ Regelung ++ Software-Infrastruktur ++ Sicherheit ++ Workflow ++ Kalibrierung und Registrierung ++ Benutzerschnittstelle + Analyse derzeitiger Operationstechniken und aktueller Trends aus der Chirurgie und aus verwandten Bereichen (z.B. Industrie, Servicerobotik, Automobil) und Ableitung von Innovationspotential für zukünftige robotisierte Applikationen in der Chirurgie ++ Wie werden die Verfahren derzeit durchgeführt? +++ Arbeitsablauf (Zeitbedarf?) +++ Datenaufzeichnung, „Digitale Lücken“ (Kontrolle, Wiederholbarkeit?) +++ Verwendete Werkzeuge +++ Herausforderungen (was macht den Eingriff anspruchsvoll?) ++ Welche Technologien sind „reif“? +++ Sensorik, medizinische Bildgebung, Aktuatoren, Lernverfahren ++ Entwicklung neuer robotisierter Anwendungen in der Medizin +++ Aufwandsabschätzung +++ Erste Schritte +++ Projektplan Projektarbeit (3-4 Teamaufgaben in Teams von 3-5 Studenten): ++ Ideenfindung, Beschreibung der medizinischen Anwendung und des Problems, sowie des geplanten Entwicklungsvorhabens, ++ Entwurf eines Projektplans und Analyse der Machbarkeit sowie ++ Implementierung eines Funktionsmusters und Präsentation von diesem (inkl. Ausarbeitung eines Projektplans – max. 15 Seiten)",
    "learning_outcomes": "Teilnehmer lernen die Grundzüge des Einsatzes von Robotik in chirurgischen Anwendungen: + Abschätzung, unter welchen Voraussetzungen Robotik entscheidende Vorteile haben kann + Integration der Robotik in bestehende chirurgische Arbeitsabläufe + Vermittlung eines fundierten Basiswissens über die Funktionsweise, Auslegung, Spezifikation und Integration von Robotik-Systemen + Konzeption und Modellierung von Lösungen für identifizierte Probleme mit Methoden der Robotik Zentrale Inhalt ist neben diesen medizinischen und technischen Grundlagen die Definition eines klinischen Projekts mit der Zielsetzung, durch den Einsatz von Robotik bestehende chirurgische Anwendungen zu verbessern. Dieser Kurs verbindet die Übermittlung der Grundlagen mit der Möglichkeit, kreative Ideen zu modellieren und zu implementieren.",
    "teaching_methods": "IN2292: Introduction to Surgical Robotics | Introduction to Surgical Robotics [ISR]",
    "media": "",
    "literature": "+ John J. Craig. 1989. Introduction to Robotics: Mechanics and Control (2nd ed.). Addison-Wesley\nLongman Publishing Co., Inc., Boston, MA, USA.\n+ Hagn, U., Nickl, M., Jörg, S., Tobergte, A., Kübler, B., Passig, G., Gröger, M., Fröhlich, F.,\nSeibold, U., Konietschke, R., Le-Tien, L., Albu-Schäffer, A., Grebenstein, M., Ortmaier, T. &\nHirzinger, G. (2008) DLR MiroSurge – towards versatility in surgical robotics. 7. Jahrestagung\nder Deutschen Gesellschaft für Computer- und Roboterassistierte Chirurgie e.V. Proceedings of\nCURAC, 2008, pp. 143 – 146.\n+ Jacob Rosen; Blake Hannaford; Richard M. Satava (Eds.) (2011) Surgical Robotics – Systems\nApplications and Visions, Springer, ISBN 978-1-4419-1125-4",
    "lv_sws_lecturer": "Navab, Nassir; Prof. Ph.D.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nIntroduction to Surgical Robotics (IN2292) (Vorlesung mit integrierten Übungen, 4 SWS)\nKlodmann J [L], Klodmann J, Eck U"
  },
  {
    "module_id": "IN2293",
    "title": "Medical Augmented Reality",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Written exam",
    "repetition": "Semesterende",
    "recommended_prerequisites": "keine",
    "content": "Lecture: + Basics of intra-operative imaging and navigation. + Camera calibration using multi-view approaches. + Different tracking technologies including: RGB and infrared cameras, optical trackers, Kinect. + Projective geometry basics including transformations and reconstruction. + Review of multimodal registration, visualization and user interfaces. + Real-examples using head mounted display (HMDs), Camera augmented mobile C-arm (CamC) and, intraoperative gamma probes coupled with AR capabilities, AR magic mirror for anatomy education. + Includes visits to the Navigated Augmented Reality Visualization Systems Laboratory, Chirurgische Klinik und Poliklinik Innenstadt; and IFL: Interdisziplinäres Forschungslabor, Klinikum rechts der Isar. Exercises (every two weeks): + Using MatLab or C++ + Implementation of lecture course topics with students in groups of 2. IN2293: Medical Augmented Reality | Medical Augmented Reality [Medical AR]",
    "learning_outcomes": "In-situ visualization in medical augmented reality (AR) enables the registered view of virtual data such as a 3D CT scan, with a video view of the real anatomy of a patient. Data can be aligned with the required accuracy such that surgeons do not have to analyze data on an external monitor in the operating room. Instead, surgeons get a direct view onto and into the patient. Mental registration of medical imagery with the operation site is not necessary anymore. Augmenting medical images and virtual surgical instruments within the body provides the most intuitive way to understand the patient’s anatomy within the region of interest. This allows for the development of completely new generations of surgical navigation systems. Our Chair for Computer Aided Medical Procedures (CAMP) is one of the strongest and leading research centers for medical AR world-wide, featuring the world’s most accurate video-see-through AR system based on a head-mounted-display. Also, CAMP has developed the world’s first AR-enabled C-arm, CamC, which has already been tested in clinical trials in Munich. The objectives of this lecture are to have students learn the theoretical basics and practical aspects of augmented reality solutions related to the medical field. The content of the lectures are outlined below.",
    "teaching_methods": "Lecture blocks followed by an exercise block the following week",
    "media": "Slides",
    "literature": "Terry Peters and Kevin Cleary - Image Guided Interventions - Technology and Application –\nSpringer 2008 - ISBN-10: 0387738568\nWorkshop and Proceedings of the following congresses\n- IPCAI/CARS\n- MICCAI\n- SMIT\n- ISMAR",
    "lv_sws_lecturer": "Navab, Nassir; Prof. Ph.D.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nMedical Augmented Reality (IN2293) (Vorlesung mit integrierten Übungen, 5 SWS)\nNavab N [L], Navab N, Eck U, Song T, Sommersperger M, Matinfar S"
  },
  {
    "module_id": "IN2294",
    "title": "Praktische Arbeit Bioinformatik",
    "level": "Bachelor",
    "language": "Deutsch/Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester/Sommersemester",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 120,
    "hours_presence": 60,
    "examination_achievements": "Wissenschaftliche Ausarbeitung Die Studierenden verfassen eine wissenschaftliche Ausarbeitung, die die konkrete wissenschaftliche Fragestellung, dessen biologischen Hintergrund und erste Analysen der vorliegenden Daten zur Verwendbarkeit der Fragestellung darstellt. Die Darstellung soll in der Form eines wissenschaftlichen Forschungsantrags erfolgen. Ein Vortrag ergänzt die Darstellung der wissenschaftlichen Fragestellung. Die Benotung erfolgt nach der Qualität des ausgearbeiteten Forschungsprojekts in der wissenschaftlichen Ausarbeitung. Die Prüfung kann im folgenden Semester wiederholt werden.",
    "repetition": "Folgesemester",
    "recommended_prerequisites": "",
    "content": "Ziel ist das Durchdenken und der Entwurf eines konkreten Forschungsprojekts aus der Bioinformatik, das dann in der Regel in der Bachelor’s Thesis ausführlich bearbeitet wird. Studierende können eigene Themen für das Modul Praktische Arbeit vorschlagen, normalerweise schlagen aber die Themensteller/Betreuer geeignete Themen aus ihrem Fachgebiet vor, meist eine aktuelle Fragestellung aus einem ihrer Forschungsprojekte. IN2294: Praktische Arbeit Bioinformatik | Practical Research Project in Bioinformatics Das konkrete Thema des Forschungsprojekts hängt in der Regel vom Betreuer ab, d.h. von dem Gebiet der zugehörigen Forschungsgruppe, in der die Arbeit ausgeführt wird. Der inhaltliche Rahmen der praktischen Arbeit ist daher naturgemäß weit gestreckt, Beispiele für Themen sind die Entwicklung effizienter Algorithmen für Proteinstrukturvorhersage, Proteinfunktionsvorhersage, Multiples Alignment oder Phylogenien; die Entwicklung eines Verfahrens zur Analyse und Interpretation neuer Hochdurchsatzdaten; die Entwicklung neuer Methoden zur kombinierten Auswertung verschiedener genomweiter Datensätze oder biologischer Netzwerke; die Entwicklung neuer Verfahren zur Inferenz von Charakteristika mittels maschinellen Lernens; die Auswertung spezieller biologischer Datensätze zur Erzielung biologischer Erkenntnisse.",
    "learning_outcomes": "Die Studierenden sind in der Lage, sich in ein spezifisches wissenschaftliches Problem der Bioinformatik einzuarbeiten, durch ein Literaturstudium, Verwendung öffentlicher Quellen und Diskussionen mit dem Betreuer den Hintergrund des Problems zu erläutern und die konkrete Problemstellung zu spezifizieren. Die Studierenden sind in der Lage, hierfür einen ersten Vorschlag zur Modellierung und zur Lösung des Problems zu entwerfen und ggf. die vorliegenden Daten auf Verwendbarkeit für die konkrete Problemstellung zu prüfen.",
    "teaching_methods": "Anleitung zu wissenschaftlicher Arbeit durch die Betreuer, selbständiges Literaturstudium, Entwerfen einer konkreten Problemstellung, Besprechung des Fortschritts, Verfassen der schriftlichen Ausarbeitung und deren Präsentation. Die Zeiteinteilung erfolgt individuell vom Studierenden in Kooperation mit dem Betreuer.",
    "media": "Rechnerunterstützes Arbeiten, ggf. selbsterstelltes System, schriftliche Ausarbeitung,\nFolienpräsentation.",
    "literature": "Aktuelle Fachartikel zum Thema.",
    "lv_sws_lecturer": "Rost, Burkhard; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2296",
    "title": "Games on Graphs",
    "level": "Bachelor/Master",
    "language": "Deutsch/Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Prüfungsart: 90-minütige Klausur oder 20-minütige mündliche Prüfung Die Prüfungsleistung wird in Form einer mündlichen (Einzelgespräch) oder schriftlichen Prüfung (Klausur) erbracht. Die Prüfungsform richtet sich dabei nach der Anzahl der Teilnehmer. In der Prüfung selbst geben die Studierenden Definitionen und Lösungsverfahren wieder. Anhand von kleinen Probleminstanzen weisen die Studierenden nach, dass sie die Lösungsverfahren auch selbständig anwenden können. Weiterhin beantworten sie Verständnisaufgaben zu den in der Vorlesung behandelten Konzepten.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "MA0901 Lineare Algebra für Informatik, IN0011 Einführung in die Theoretische Informatik, IN0015\nDiskrete Strukturen, IN0018 Diskrete Wahrscheinlichkeitstheorie",
    "content": "Die Vorlesung führt in die Theorie der Spiele auf (endlichen) Graphen (rekursive Spiele mit endlichem Zustandsraum) ein. Anhand verschiedener Varianten von Erreichbarkeitsspielen (ohne/mit Zufall, abwechselnde/ gleichzeitige Entscheidungen) werden die grundlegenden Definitionen und Verfahren aus dem Bereich der mathematischen Spieltheorie vorgestellt. Darauf aufbauend werden komplexere quantitative (z.B. Markov Decision processes, Discounted- payoff games, Mean-payoff games, Shapely's stochastic games) und qualitative (z.B. Parity, Rabin, Muller, Streett) Varianten diskutiert. An weiterführenden Themen werden z.B. Techniken zur Reduzierung des Speicherbedarfs (z.B. BDDs), entsprechende Softwaretools (z.B. PRISM), Spiele mit partiellen Beobachtungen, Spiele IN2296: Games on Graphs | Games on Graphs auf rekursiven Graphen, Bezüge zu Logik und Mengentheorie (z.B. Gale-Stewart-Spiele und Determiniertheit nach Martin) oder die Synthese von Steuerprogrammen angesprochen.",
    "learning_outcomes": "Nach erfolgreicher Teilnahme an diesem Modul kennen Studierende die grundlegenden Begriffe der Spieltheorie. Sie können die entsprechenden algorithmischen Lösungsverfahren anwenden und damit auch kleinere Spielinstanzen von Hand lösen. Weiterhin verstehen sie die entsprechenden mathematischen Werkzeuge zur allgemeinen Lösung der behandelten Spiele.",
    "teaching_methods": "Vorlesung, Übung, Aufgaben zum Selbststudium",
    "media": "Folienpräsentation, Tafelanschrieb, Toolpräsentation",
    "literature": "Filar, Vrieze: Competitive Markov Decision Processes, Springer, 1996\nGrädel, Thomas, Wilke: Automata, Logics, and Infinite Games, Springer 2002\nPerrin, Pin: Infinite Words – Automata, Semigroups, Logics and Games, Elsevier 2004",
    "lv_sws_lecturer": "Esparza Estaun, Francisco Javier; Prof.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2297",
    "title": "Geometry Processing",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 120,
    "hours_presence": 60,
    "examination_achievements": "The exam takes the form of a 90 minutes written test. The students demonstrate that they can answer questions concerning the mathematical and algorithmic foundations of computer- aided geometric modeling and character animation. They can analyse and categorize available techniques in terms of quality, efficiency, and suitability for a particular modelling or animation task, and they can build upon these techniques to develop new approaches considering application- specific requirements. They know the basic functionalty of common geometric modelling and computer animation tools.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "MA0902 Analysis for Informatics, MA0901 Linear Algebra for Informatics",
    "content": "Introduction to polynomial interpolation and approximation, parametric and implicit curve and surface representations, Spline curves and surfaces, surface subdivision schemes, CSG, surface analysis using differential geometry, level-of-detail representations, surface reconstruction from point sets, introduction to character animation, riging, scinning and layering, locomotion, motion capturing and (space-time) control, character modeling.",
    "learning_outcomes": "At the end of the semester the students have gained advanced knowledge concerning the mathematical foundations underlying geometric modelling and character animation, and they know the different methods which are typically used in these areas. They are familiar with the mathematical descriptions of curves and surfaces, their internal representation on a computer, and advanced modelling approaches such as subdivision techniques. They are familiar with the IN2297: Geometry Processing | Geometry Processing different stages in the character animation pipeline, and they can describe the basic methods used in each of these stages. The students can analyse and categorize availaible techniques in terms of functionality, quality and efficiency, and they can model and develop new approaches considering specific requirements. In the lecture the students learn about the different parts and functionality of commonly used modelling and animation tools, and they can use these tools to create own models and animations.",
    "teaching_methods": "The modul consists of the lecture, where the lecturer conveys to the students the area-specific knowledge, points towards relevant articles and ecourages the students to read and put into relation the presented approaches. The lecturer demonstrates online the capabilities of some of the discussed approaches and uses the white board to exercise specific modeling and animation tasks. The students should become familiar with common modeling and animation tools, and use these tools to create own models. At the end of the semester, the students give short presentations of these tools, and they demonstrate to the class their results.",
    "media": "Powerpoint course slides, white board, online tutorials and demonstrations",
    "literature": "Mortensen, Geometric Modeling, 2nd Edition, Wiley Publishers; Farin, Curves and Surfaces for\nComputer Aided Geometric Design, Academic Press; Parent, Computer Animation: Algorithms and\nTechniques, Morgan Kaufmann; Kerlow, The Art of 3D Computer Animation and Effects, Whiley;\nBlender User’s Manual http://wiki.blender.org/index.php/Manual;",
    "lv_sws_lecturer": "Westermann, Rüdiger; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nGeometry Processing (IN2297) (Vorlesung, 4 SWS)\nWestermann R [L], Weitz S, Westermann R"
  },
  {
    "module_id": "IN2298",
    "title": "Advanced Deep Learning for Physics",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 120,
    "hours_presence": 60,
    "examination_achievements": "Over the course of the semester, students can voluntarily work on four different exercise assignments. The exercises topics include key steps of neural network modeling for simulations. They include algorithms such as pressure projection, implicit solving of partial differential equations, and representing physics problems with neural networks. These exercises are also the primary means for students to demonstrate that they can implement the algorithms of the lecture with python and the C++ programming languages. The examination takes the form of a written test with a duration of 90 minutes. General knowledge questions check whether the students are familiar with the deep learning concepts, physicals simulations, and discrete representations. Completion of the voluntary exercises will give a grade bonus upon passing the exam. Model calculations on paper are used to test whether students have acquired knowledge to perform the central solving steps, such as derivative calculations, material transport, time propagation, and internal force evaluation. Short programming tasks with pseudo-code check their ability to solve simple learning and physics problems with suitable algorithms, and their ability to develop suitable solving methods.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "MA0902 Analysis für Informatiker\nMA0901 Lineare Algebra für Informatiker\nIN0037 Physikalische Grundlagen für Computerspiele\nIN2298: Advanced Deep Learning for Physics | Advanced Deep Learning for Physics\nIN2346 Introduction to Deep Learning",
    "content": "Navier-Stokes equations and physics of fluids, finite difference discretizations, advection schemes and their stability properties, Poisson problems, numerical iterative solvers for systems of linear equations, surface representations, and boundary conditions; Physics of elastic materials, stress- strain relationships, finite-element modeling, types of basis functions, tetrahedral meshing, plasticity and fracture.",
    "learning_outcomes": "This course targets deep learning techniques and numerical simulation algorithms for materials such as fluids and deformable objects. In particular, this course will focus on advanced deep learning concepts such as generative models and time series prediction, with possible applications in the context of computer graphics or vision. After taking this course the students have gained knowledge about the underlying concepts for deep learning algorithms. They are familiar with topics such as auto-encoders, adversarial training, recurrent neural networks, and specialized loss functions. In addition they know about the physical principles of elastic and plastic materials, with an emphasis on fluids: conservation of mass and momentum, divergence free motion, and vorticity. Students can explain common discrete and continuous representations of the phenomena, such as phase functions, level-sets and Cartesian or tetrahedral meshes. The core component of this lecture are numerical algorithms to work with partial differential equations. Students can memorize the steps of the algorithms and are able to apply the learned techniques such as computing loss function derivatives, finite-difference discretizations, explicit and implicit integration, in new contexts. They are able to construct working training algorithms, by choosing suitable activation and loss functions, and can choose the right network architecture for different regression / generation tasks. Additionally, students are able to evaluate learning and simulation algorithms in terms of accuracy and computational complexity. Given a set of specific requirements of a problem they can construct a solver based on the different components discussed in the lecture. In the homework assignments they have acquired practical experience implementing central components of these solvers in a high-level programming language, and they have gained experience working with software APIs implementing higher level functionality.",
    "teaching_methods": "This course is presented with lectures consisting of digital slides, supported by blackboard materials for mathematical topics. These materials are combined with demo applications, videos of real phenomena and digital simulations, and experiments. The experiments and bi-weekly ''physics fact'' challenges IN2298: Advanced Deep Learning for Physics | Advanced Deep Learning for Physics encourage students to actively participate during the lectures. The exercise assignments are non-mandatory, and are worked on in groups of two to four students.",
    "media": "Powerpoint course slides, white board, experiments, online tutorials, source code",
    "literature": "- I. Goodfellow, Deep Learning, MIT Press, 2017\n- Robert Bridson, Fluid Simulation for Computer Graphics, AK Peters, 2007\n- D. Baraff, A. Witkin: Physically Based Modeling, SIGGRAPH course notes, 1997",
    "lv_sws_lecturer": "Thürey, Nils; Prof. Dr.-Ing.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nAdvanced Deep Learning for Physics (IN2298) (Vorlesung, 4 SWS)\nThürey N [L], Franz E, Holl P, Kohl G, Lino Valencia M, Liu Q, Szep M, Thürey N, Weitz S,\nWinchenbach R"
  },
  {
    "module_id": "IN2300",
    "title": "Business-Simulationen gestalten",
    "level": "Bachelor",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Hausarbeit: Business Simulation erarbeiten, evaluieren und dokumentieren Vortrag: Lerneinheit auf Basis der Business Simulation durchführen, Umfang bis zu 90 Minuten Gespräch: Vorbereitung, Durchführung und Nachbereitung der Lerneinheit mit der Business Simulation",
    "repetition": "Folgesemester / Semesterende",
    "recommended_prerequisites": "Keine",
    "content": "Die Teilnehmer erarbeiten in selbstgesteuerter eigenverantwortlicher Teamarbeit eine Business Simulation für ausgewählte Themen der Wirtschaftslehre und Wirtschaftsinformatik und evaluieren diese im Rahmen einer Lerneinheit. Die Teilnehmer festigen und erweitern Skills wie Kommunikation und Problemlösung im Team, Agile Softwareentwicklung, Projektmanagement, Moderation, Präsentation und Diskussion, Arbeiten mit wissenschaftlicher Literatur, Prinzipien und Konzepte von Serious Games im Allgemeinen und Business Simulationen im speziellen. E-Learning: didaktische Gestaltung und Bewertung von Unterricht mit Serious Games sowie Design, Implementierung und Test von IT-basierten Simulationen. Verwendete Werkzeuge sind Learning-Management-Systeme, Autorentools, Entwicklungsumgebungen für Computerspiele (z.B. Unity) und 3D Entwicklungsumgebungen. IN2300: Business-Simulationen gestalten | Design of Business Simulations",
    "learning_outcomes": "Nach der Teilnahme an der Modulveranstaltung sind die Studierenden in der Lage den Einsatz verschiedener Formen von Planspielen für unterschiedliche Anwendungsszenarien zu bewerten. Im Detail können die Studierenden Anforderungen an Planspiele analysieren, technische Designkonzepte entwickeln und Kernbestandteile von Planspielen modellieren.",
    "teaching_methods": "Das Modul besteht aus einer Vorlesung und begleitenden Hausaufgaben. Die Inhalte der Vorlesung werden im Vortrag und durch Präsentationen vermittelt. Studierende werden angeregt die Vorlesungen mit empfohlener Literatur vor- und nachzubereiten. Zudem werden Hausaufgaben verteilt. Hier ist das Ziel, dass Studierende sich auch praktisch am Computer mit den Fragestellungen rund um Planspiele beschäftigen und Konzepte aus der Vorlesung implementieren.",
    "media": "Präsenzveranstaltung mit Blended-Learning-Elementen: PowerPoint, Tafelarbeit, Übungsblätter,\nFlipchart, Modellierung am Computer",
    "literature": "- Baume, M.; Taranovych, Y.; Krcmar, H. (2008): Open Source Portals for Online Simulation\nGames? The computer-supported Business Game “Go4C” for realistic IT and Business\nManagement training, in: Proceedings of ECGBL 2008. The 2nd European Conference on Games\nBased Learning, Barcelona 2008\n- Blötz, U.; Gust, M.; Klabbers, J.H.G. (2003): Unterschiede zwischen offenen und geschlossenen\nPlanspielen. In: Planspiele in der beruflichen Bildung. BiB,Bonn 2003.\n- Forrester, J.W. (1991): System Dynamics and the Lessons of 35 Years.\n- Forrester, J.W. (1961): Industrial dynamics, Wiley, New York 1961.\n- Magyar, T. (2003): Das Planspiel - Theoretische Grundlagen und Beispiele.\n- Sterman, J.D. (2000): Business dynamics : systems thinking and modeling for a complex world,\nIrwin/McGraw-Hill, Boston [u.a.] 2000.",
    "lv_sws_lecturer": "Plecher, David; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nBusiness-Simulationen gestalten (IN2300) (Vorlesung mit integrierten Übungen, 3 SWS)\nKlinker G [L], Utesch M, Liedtke S"
  },
  {
    "module_id": "IN2301",
    "title": "Didaktik von Planspielen",
    "level": "Bachelor",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 3,
    "hours_total": 90,
    "hours_self_study": 60,
    "hours_presence": 30,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer Klausur von 60 Minuten erbracht. In dieser soll nachgewiesen werden, dass in begrenzter Zeit und ohne Hilfsmittel Problemstellungen zur Planspiel-Didaktik erkannt werden und Wege zu einer Lösung gefunden werden können. Die Prüfungsfragen gehen über den gesamten Vorlesungsstoff.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Keine",
    "content": "- Ansätze der Lerntheorie\n- Mediendidaktische Grundlagen computerunterstützter Planspiele\n- Einsatzmöglichkeiten für computerunterstützte Planspiele\n- Didaktisches Design von Planspielen\n- Konzepte für Planspiele\n- Phasen der Planspiel-Arbeit",
    "learning_outcomes": "Nach der Teilnahme an dem Modul sind die Studierenden in der Lage...\n- Einsatzmöglichkeiten für computerunterstützte Planspiele zu erläutern\n- lerntheoretische Grundlagen auf computerunterstützte Planspiele anzuwenden\n- unterschiedliche Formen von Planspielen zu kategorisieren\n- Konzepte zum didaktischen Design von Planspielen zu erarbeiten\nIN2301: Didaktik von Planspielen | Didactics of Business Games",
    "teaching_methods": "- Präsentation\n- Partnerarbeit\n- Gruppenarbeit\n- Fallstudie\n- eLearning/Blended Learning",
    "media": "- Digitale Literaturquellen\n- PowerPoint\n- Flipchart\n- Online-Ressourcen\n- Online-Planspiel-Plattformen",
    "literature": "Baume, M. (2008):\nComputerunterstützte Planspiele für das Informationsmanagement. Dissertation zur Erlangung des\nakademischen Grades eines Doktors der\nPhilosophie (Dr. phil.) an der Fakultät für Wirtschaftswissenschaften der Technischen Universität\nMünchen.\nM. Baume, O. Häberle, H. Krcmar (2006):\nLearn to Decide and Communicate like an IT Manager: Designing a Business Game for IS\nEducation, in: Proceedings of the 12th Americas Conference on Information Systems (AMCIS\n2006). Acapulco, Mexico. 2006.\nGagné , R.M.; Briggs, L.J.; Wager, W.W. (1992):\nPrinciples of instructionaldesign. (4. Ed Aufl.), Wadsworth/Thomson Learning, Belmont CA [u.a.]\n1992.\nGeuting, M. (1992):\nPlanspiel und soziale Simulation im Bildungsbereich, Lang, Frankfurt a.M. [u.a.] 1992.\nKern, M. (2003):\nPlanspiele im Internet - Netzbasierte Lernarragements zur Vermittlung betriebswirtschaftlicher\nKompetenz, DUV, Wiesbaden 2003.\nWeidenmann, B. (2002):\nMulticodierung und Multimodalität im Lernprozess. In: Informationen und Lernen mit Multimedia\nund Internet. Hrsg.: Issing, L.J.; Klisma, P. Beltz,Weinheim 2002, 45-62.",
    "lv_sws_lecturer": "Krcmar, Helmut; Prof. Dr. rer. oec.\nIN2301: Didaktik von Planspielen | Didactics of Business Games\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2302",
    "title": "Virtuelle Trainingswelten",
    "level": "Bachelor",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 105,
    "hours_presence": 45,
    "examination_achievements": "Die Prüfungsleistung wird in Form von Projektarbeit erbracht. Die Studierenden wenden die erworbenen Kenntnisse in einem Team an, um gemeinsam eine selbstdefinierte Projektaufgabe (Erstellung eines gamifizierten Virtual Trainings) zu lösen. Damit weisen die Teilnehmer nach, dass sie mit aktuellen Technologien, Gamification und didaktischen Ansätzen umgehen, dass sie sie verstanden und selbständig in einem Corporate Training Szenario einsetzen können. Die Lösung wird auf dreifache Weise präsentiert:\n- in einem mündlichen Vortrag (20-minütige Abschlusspräsentation) pro Projekt, in welchem jedes\nTeammitglied auf einen Teil der Projektarbeit eingeht (20%)\n- in einem ca 2-minütigen Video (Trailer), welches die Kerninhalte des Projekts darstellt, und\n- in einem ca. 10-seitigen Designdokument, in welchem algorithmische, methodische und grafische\nAspekte erklärt werden und die Zuordnung der Arbeiten auf die Teammitglieder umrissen ist. (20%)\n-Qualität der Lösung und Präsentation der Projektaufgabe (60%)\nDie Beiträge der einzelnen Studierenden müssen dabei bei allen drei Bestandteilen, sowie im Projekt, deutlich gekennzeichnet sein (beispielsweise durch die Angabe von Abschnitten, Seitenzahlen, inhaltlichen Schwerpunkten oder Codebestandteilen) bzw. präsentiert werden und werden einzeln bewertet.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0031 Einführung in die Informatik für Games Engineering\nIN0038 Echtzeit-Computergrafik\nIN2302: Virtuelle Trainingswelten | Virtual Training Worlds [ViTraWe]",
    "content": "In diesem Modul wird der Frage nach dem Nutzen von Virtuellen Trainingsmodellen nachgegangen. Es werden dabei verschiedene Aspekte und Grundsätze des, vor allem spielerischen, Lernens erläutert und erlernt:\n- Training und Lernen soll auch Spaß machen\n- Virtualität und Management, zwei ergänzende Welten\n- Was ist ein Spiel aus Sicht des Managements?\n- Die Lust am Lernen und Arbeiten\n- Studieren und arbeiten in der virtuellen Welt\n- Mobiles Arbeiten und Lernen ist omnipräsent und wird zum Motor moderner\nWissensgesellschaften\n- Die Dynamik der Zeit\n- Künstliche Charaktere (Avatare) In der virtuellen Arbeitswelt von morgen\n- Der Uncanny-Valley Effekt\n- Der Weg vom realen Vorbild zum künstlichen Charakter\n- Game Technologie als Antrieb virtueller Arbeitswelten\n- Motivation durch Gamification\n- Die Verbindung von Game-Film-Lernen",
    "learning_outcomes": "Nach der Teilnahme am Modul können die Studierenden ermessen wie und wodurch Gametechnologien das Lernen und Trainieren von morgen verändern werden. Sie sind im Anschluss in der Lage das Erlernte auf vergleichbare Projekte in der Industrie zu übertragen und anzuwenden. Auf Basis der Grundlagen können die Voraussetzungen für eigene, neue Trainingswelten geschaffen werden. Darüber hinaus sind die Studierenden in der Lage die Diversität der unterschiedlichen Disziplinen in einem Gameprojekt zu erkennen und angemessen zu bewerten.",
    "teaching_methods": "Lehrtechnik: Seminar, Projekt Lehrmethode: Seminar, Gruppenarbeit, Präsentation, Projektarbeit Lernaktivität: In dem Projekt „Virtual Training World“ werden zu Beginn die Grundelemente einer gamebasierten Trainingswelt definiert und erarbeitet, um dann in Zusammenhang gesetzt zu werden. Ferner werden in Gruppenübungen die Möglichkeiten dieser Welten diskutiert und kritisch bewertet. Diese werden dann einem kritischen Test unterzogen und die Chancen und Risiken gegenüber gestellt.",
    "media": "Testumgebung iPad, PowerPoint, Videos, Bücher",
    "literature": "- Don Norman (2002): The design of everyday things, basic Books\n- Jesse Schell(2008): The Art of Game Design, Morgan Kaufmann\n- Koster R. (2005): A Theory of Fun for Game Design, Paraglyph Press\nIN2302: Virtuelle Trainingswelten | Virtual Training Worlds [ViTraWe]\n- Csikszentmihalyi M. (1999): Flow, Das Geheimnis des Glu#cks, 7. Auflage, Stuttgart, Klett-Cotta",
    "lv_sws_lecturer": "Plecher, David; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nVirtuelle Trainingswelten (IN2302) (Seminar, 3 SWS)\nKlinker G [L], Niermann P, Liedtke S"
  },
  {
    "module_id": "IN2303",
    "title": "Von der Idee zum Produkt",
    "level": "Bachelor",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 105,
    "hours_presence": 45,
    "examination_achievements": "Die Prüfungsleistung wir in Form von Projektarbeit erbracht. Die Studierenden wenden die in begleitenden Tutorien erworbernen Kenntnisse in einem Team an. Die Projektarbeit (Entwicklung einer Computerspielidee mit Geschäftsmodell) gliedert sich dabei in sechs Einzelthemen mit definierten Milestones und einer Endpräsentation. Die Teilnehmer weisen nach, dass sie fähig sind unter strukturiertem Vorgehen eine Aufgabenstellung zu hinterfragen, Zielgruppen zu definieren, Ideen zu entwickeln und die Ideen mit der Zielgruppe durch einen Prototypen zu hinterfragen. Die sechs Milestones werden in sechs Teammeetings jeweils nur innerhalb des Teams und am Ende des Kurses durch eine Endpräsentaion vor allen Teilnehmern bzw. Teams vorgestellt. Die sechs Milestone-Vorstellung werden jeweils zu 10 % (gesamt 60 %) anhand der Beachtung des strukturierten Vorgehens eines jeden einzelnen Teammitglied (individueller Beitrag) und zu 40 % an der gemeinsamen Präsentation bewertet.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0031 Einführung in die Informatik für Games Engineering\nIN0038 Echtzeit-Computergrafik",
    "content": "Ein erfolgreiches Computerspiel lebt nicht von der Spieleidee alleine. Es ist ein Zusammenspiel eines Prozesses der Entwicklung, der in der ersten Näherung für die Gestaltung/Design eines IN2303: Von der Idee zum Produkt | From the Idea to the Product [IdeCoGa] jeden Produktes gilt. Die sechs, grundlegenden Schritte \"verstehen\", \"beobachten\", \"Sichtweise definieren\", \"Ideen finden\", \"Prototypen entwickeln\" und \"testen\" werden einzeln erörtert, mit Beispielen hinterlegt und anschließend am eigenen Projekt angewandt.",
    "learning_outcomes": "Nach der Teilnahme an diesem Modul haben die Studierenden praxisrelevante Kenntnisse zum methodischen Vorgehen bei der Entwicklung von Spieleideen. Die Teilnehmer beherrschen die methodischen Prozesse der Produktentwicklung und können diese auf das Gamedesign übertragen. Die Teilnehmer sind dadurch in der Lage die Wahrscheinlichkeit eines Erfolgs des Spieles signifikant zu erhöhen, indem sie diese prozessorientierte Arbeitsweise im kreativsten Teil der Entwicklung eines Computerspiels, dem Game Design, zur Anwendung bringen.",
    "teaching_methods": "Lehrtechnik: Seminar, Projekt Lehrmethode: Seminar, Gruppenarbeit, Präsentation, Projektarbeit Lernaktivität: Theoretische Einführung in die Konzepte der Produktentwicklung, Anwendung der theoretischen Konzept in einem iterativen Vorgehen, in dem neue Computerspielideen geschaffen und nach und nach verfeinert/überarbeitet werden bis sie zur Produktreife gelangen.",
    "media": "Folien, Bücher, Flipchart, Moderatorenkofferausstattung",
    "literature": "- Jesse Schell: The Art of Game Design, Morgan Kaufmann, 2008, ISBN-13: 978-0123694966\n- Drew Sikora, John Hattan: Business and Production for Games, Cengage Learning Emea, 2009,\nISBN-13: 978-1598638097\n- Hasso Plattner, Christoph Meinel, Ulrich Weinberg: Design Thinking, FinanzBuch Verlag\nMünchen, 2009, ISBN 978-3-8688001345",
    "lv_sws_lecturer": "Plecher, David; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nVon der Idee zum Produkt (IN2303) (Seminar, 3 SWS)\nKlinker G [L], Glatz F, Liedtke S"
  },
  {
    "module_id": "IN2304",
    "title": "Online and Approximation Algorithms",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Unregelmäßig",
    "credits": 8,
    "hours_total": 240,
    "hours_self_study": 150,
    "hours_presence": 90,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer Klausur von 120 Minuten erbracht. In dieser weisen Studierende anhand der gestellten Aufgaben nach, dass sie über fundamentale und weiterführende Kenntnisse im Bereich der Online- und Approximationsalgorithmen verfügen. Die Studierenden weisen nach, dass sie in begrenzter Zeit entsprechende algorithmische Probleme erkennen und analysieren können sowie Wege zu einer effizienten Lösung finden.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0007 Grundlagen: Algorithmen und Datenstrukturen, IN0011 Einführung in die Theoretische\nInformatik, IN0015 Diskrete Strukturen",
    "content": "Das Modul behandelt zunächst die Grundlagen der Online- und Approximationsalgorithmen. Dabei wird das Konzept der Leistungsgarantien eingeführt. Im Bereich der Online-Algorithmen studiert das Modul klassische Scheduling- und Paging-Probleme. Es wird das Konzept der amortisierten Analyse eingeführt und eingesetzt, um selbstorganisierende Listen zu analysieren. Anschließend untersucht das Modul randomisierte Online-Algorithmen mit dem zugehörigen Gegnerkonzept. Es werden Datenkompression-Algorithmen basierend auf selbstorganisierenden Listen, Online- Algorithmen für die Roboter-Navigation, bipartites Matching, energieeffizientes Scheduling, das k- Server-Problem und finanzielle Spiele entwickelt. Auf dem Gebiet der Approximationsalgorithmen werden Algorithmen für Max-Cut, das Traveling Salesman Problem und die Lastbalancierung hergeleitet. Ferner werden polynomielle Approximationsschemata entwickelt, wobei das Rucksackproblem und das Lastbalancierungsproblem im Fokus stehen. Weiterhin behandelt das IN2304: Online and Approximation Algorithms | Online and Approximation Algorithms Modul die Konzepte der LP-Relaxierung und das randomisiertes Runden. Schließlich werden Approximationen für Set-Cover und Shortest-Superstring erarbeitet.",
    "learning_outcomes": "Die Teilnehmer des Moduls kennen die Resultate zu den grundlegenden untersuchten Online- Problemen, insbesondere im Bereich der Ressourcenverwaltung, der Datenstrukturierung und des Schedulings, sowie den studierten NP-harten Graphen-, Erfüllbarkeit- und Packungsproblemen. Des Weiteren beherrschen sie das Analysekonzept der Amortisierung und die Algorithmenentwurfstechnik basierend auf LP-Formulierungen. Die erlernten Resultate und Konzepten können sie anwenden, um neue algorithmische Problem zu lösen.",
    "teaching_methods": "Das Modul besteht aus einer Vorlesung und einer begleitenden Übungsveranstaltung. Die Inhalte der Vorlesung werden im Vortrag und durch Präsentation vermittelt. Studierende werden insbesondere durch die Lösung von Übungsblättern zur inhaltlichen Auseinandersetzung mit den Themen angeregt. Die Lösung der Übungsaufgaben wird in der Übungsveranstaltung besprochen. Zusätzlich erhalten die Studenten durch die Korrektur der Übungsblätter eine individuelle Rückmeldung über ihren Lernerfolg.",
    "media": "Folien, Tafelarbeit, Übungsblätter",
    "literature": "-A. Borodin und R. El-Yaniv. Online Computation and Competitive Analysis. Cambridge University\nPress, Cambridge, 1998. ISBN 0-521-56392-5.\n- V.V. Vazirani. Approximation Algorithms. Springer Verlag, Berlin, 2001. ISBN 3-540-65367-8.",
    "lv_sws_lecturer": "Albers, Susanne; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2306",
    "title": "Scientific Computing in Circuit Simulation",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Type of Assessment: exam The 75 minutes written exam assesses the students' ability to describe the modeling of electronic circuits and their simulation. The participants demonstrate that they understand the role and importance of mathematical problem analysis and its theoretical treatment, which are transformed into an engineer's solution. Questions requiring short calculations may be posed. The exercises examine the students' ability to implement the numerical algorithms for the simulation of electronic circuits. The participants demonstrate how they understood and applied these methods and it will be assessed how well they interpret the algorithms and their outcomes as well as how they analyze the performance of these.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0019 Numerical Programming (or similar)\nIN0002 Fundamentals of Programming (Exercises & Laboratory) (or similar)\nStudents should have basic knowledge in differential calculus and linear algebra",
    "content": "The lecture includes the following scientific computing topics:\n- industrial design of electronic circuits\n- modeling of electrical networks and network elements\n- differential-algebraic equations (DAEs): theory, numerical integration\n- sparse matrix techniques\n- algorithms for parallel and distributed computing\nIN2306: Scientific Computing in Circuit Simulation | Scientific Computing in Circuit Simulation\n- further challenges (e.g., latency and bypass strategies, noise)",
    "learning_outcomes": "At the end of the module, participants know the basic modeling and algorithms needed for circuit simulation. They are able to understand the necessary interaction between engineers, mathematicians, and computer scientists in industrial problem modeling. They understand the role and importance of mathematical problem analysis and its theoretical treatment, which are transformed into an engineer's solution. The participants are able to analyze the impact of different mathematical approaches for industrial problems. They can understand, apply, and interprete the basic methods how to implement the algorithms in an efficient way allowing a fast simulation of electronic circuits.",
    "teaching_methods": "This module comprises lectures and accompanying exercises. The contents of the lectures will be taught by talks and presentations. Students will be encouraged to study literature and get involved with the topics in depth. In the exercises, concrete problems will be analyzed and implemented in software --- partially in teamwork --- and selected examples will be discussed.",
    "media": "Whiteboard, slides, exercise sheets",
    "literature": "- Chua, Lin: Computer-Aided Analysis of Electronic Circuits, Prentice Hall, 1984\n- Günther, Feldmann, ter Maten: Modelling and discretization of circuit problems. In: Handbook of\nnumerical analysis, Vol. XIII (Ed. Ciarlet), Elsevier, 2005\nFurther references will be addressed during lecture",
    "lv_sws_lecturer": "Bungartz, Hans-Joachim; Prof. Dr. rer. nat. habil.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nScientific Computing in Circuit Simulation (IN2306) (Vorlesung mit integrierten Übungen, 4 SWS)\nDenk G [L], Milbradt R, Rodenberg B"
  },
  {
    "module_id": "IN2309",
    "title": "Advanced Topics of Software Engineering",
    "level": "Master",
    "language": "Deutsch/Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 8,
    "hours_total": 240,
    "hours_self_study": 150,
    "hours_presence": 90,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer Klausur erbracht (100 Minuten). In dieser soll nachgewiesen werden, dass die Studierenden die Domänenspezifizität von Software verstehen und ihre Konsequenzen benennen können. Zentrale Qualitätsattribute sollen benannt und bzgl. Zielkonflikten analysiert werden können. Beispielhafte Softwarearchitekturen und Verhaltensmodelle können erstellt, bewertet und kritisch reflektiert werden. Zielsetzung und Details der Bedienung typischer Entwicklungswerkzeuge können genannt werden.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Einführung in die Softwaretechnik (IN0006)",
    "content": "Für die erfolgreiche Entwicklung großer Software-Systeme ist es erforderlich, dass sowohl die verschiedenen Aktivitäten im Prozess als auch die entstehenden Artefakte sehr eng miteinander verknüpft und aufeinander abgestimmt sind. Zentrale Erfolgsfaktoren sind:\n- Iterative Ermittlung und Umsetzung der Anforderungen\n- Architekturentwurf als Rückgrat der Entwicklung\n- Beherrschung der Qualität in ihren unterschiedlichen Ausprägungen\nDie Vorlesung Advanced Software Engineering legt dar, wie die Themengebiete Requirements Engineering, Spezifikation, Architektur, Feinentwurf, Codierung, Softwarequalität und Qualitätssicherung miteinander verwoben sind. Es wird diskutiert, wie insbesondere nichtfunktionale Anforderungen in der Architektur reflektiert sind; welche Zielkonflikte mit funktionalen Anforderungen und externen sowie internen Qualitätsattributen bestehen; und wie diese Anforderungen formuliert und durch Tests überprüft werden können. IN2309: Advanced Topics of Software Engineering | Advanced Topics of Software Engineering Im Einzelnen werden betrachtet: 1.Requirements Engineering: Techniken für die Erhebung, Analyse, Priorisierung, Spezifikation, Validierung funktionaler und nicht-funktionaler Anforderungen; Anti-Requirements. 2.Software-Architektur: Prinzipen, Views&Styles, Architekturdokumentation, Muster, Frameworks, Referenzarchitekturen, Produktlinien, Analysen der Architekturqualität und von Zielkonflikten 3.Softwarequalität: Interne und externe Qualitätsattribute, u.a. Wartbarkeit, Testbarkeit, Verständlichkeit sowie Performanz, Sicherheit, Verfügbarkeit; Software-Metriken 4.Qualitätssicherung: Bewertung, Priorisierung, Konfliktauflösung und Reviews von Anforderungen; Messverfahren für Architekturqualität bzgl. externer und interner Qualitätsattribute; Test- und Reviewverfahren für funktionale und nicht-funktionale Anforderungen im Code; Fehlermodelle 5.Einfluss des Entwicklungsprozesses",
    "learning_outcomes": "Nach erfolgreicher Teilnahme an dem Modul verstehen die Studierenden die zentralen Aufgaben und Methoden des Requirements Engineering. Sie kennen alle relevanten Qualitätsattribute für Software. Sie wissen, wie entsprechende Anforderungen erhoben, spezifiziert und verwaltet werden; wie sie sich in Softwarearchitekturen wiederfinden und umgekehrt, welchen Einfluss eine Architektur auf diese Attribute hat; wie Anforderungen, Architekturen und Code bzgl. dieser Attribute bewertet werden können; welche Zielkonflikte zwischen Qualitätsattributen bestehen und welchen Einfluss der Entwicklungsprozess hat. Sie können dieses Wissen in der Praxis in kleineren Projekten anwenden.",
    "teaching_methods": "Das Modul besteht aus einer Vorlesung und einer begleitenden Übung. Die Inhalte der Vorlesung werden im Vortrag und durch Präsentationen vermittelt. Studierende sollen zum Studium der Literatur und der inhaltlichen Auseinandersetzung mit den Themen angeregt werden. In den Übungen werden teilweise in Gruppenarbeit gemeinsam konkrete Fragestellungen beantwortet und ausgesuchte Beispiele bearbeitet.",
    "media": "Vortrag mit Folien",
    "literature": "McConnell, Code Complete: A Practical Handbook of Software Construction, 2nd edition,\nMicrosoft, 2004\nSummerville, Software Engineering 9, Prentice Hall, 2010\nBrooks, The Mythical Man Month, Addison-Wesley Longman, 1995\nRombach, Endres: A Handbook of Software and Systems Engineering, Addispn Wesley, 2003\nBass et al., Software Architecture in Practice, Addison Wesley, 3rd edition, Addison Wesley, 2012\nClements et al., Documenting Software Architectures, 2nd edition, Addison Wesley, 2010\nClements et al., Evaluating Software Architectures, Addison Wesley, 2001\nReussner, Hasselbring, Handbuch der Software-Architektur (in German), 2006\nJackson, Problem Frames, ACM Press, 2000\nIN2309: Advanced Topics of Software Engineering | Advanced Topics of Software Engineering\nSommerville, Sawyer: Requirements Engineering: A Good Practice Guide, John Wiley, 1997\nLamsweerde, Requirements Engineering: From System Goals to UML Models to Software\nSpecifications, John Wiley, 2009\nGoucher, Riley, Beautiful Testing, OReilly, 2009\nWagner, Software Product Quality Control, Springer, 2013\nWeitere Literatur wird in der Vorlesung bekanntgegeben.",
    "lv_sws_lecturer": "Pretschner, Alexander; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nZentralübung zu Advanced Topics of Software Engineering (IN2309, IN2126) (Übung, 2 SWS)\nPretschner A [L], Leinen F, Pretschner A\nAdvanced Topics of Software Engineering (IN2309, IN2126) (Vorlesung, 4 SWS)\nPretschner A [L], Pretschner A"
  },
  {
    "module_id": "IN2313",
    "title": "Secure Coding",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 105,
    "hours_presence": 75,
    "examination_achievements": "The students will develop an application in five iterative programming/testing phases in groups, and will be asked individually about intermediate results. They will present and discuss vulnerabilities found and their respective fixes. Every student must present the partial results of the development project at least once. Groups must hand in their results in electronic form at the end of each phase. The outcome of each phase will be graded and will contribute to the final grade proportionally to its duration. Groups will document individual effort (in hours and percentage of contribution to final result) and this information, together with the presentations, will be taken into account for the final individual grades. Retake: End of Semester , written examination 120-180 min.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Students should have sound programming skills and a general security background (for instance\nIN229 or IN2178 for security and IN1501 for programming).",
    "content": "In this lecture we focus on tools and guidelines for the development of secure software. The course will cover two main types of software: Web services (in PHP) and native applications (in C/ C++ and Java). For these two categories, we will briefly recall the most exploited vulnerabilities (OWASP Top 10, memory errors, common logical vulnerabilities, errors using cryptography) and we will concentrate on best-practices to avoid them, as well as on tools that help developers to build security into their software, including automatic and semi-automatic security testing tools, syntactic analysis tools for source code, reverse engineering/obfuscation tools and code-reviewing. IN2313: Secure Coding | Secure Coding Parallel to the theoretical course, we will develop an actual application and analyse its security through five iterative development and testing phases.",
    "learning_outcomes": "The participants acquire: + Capacity to apply general principles on secure software development, independent of the programming language + Capacity to perform Basic Black-box and White-box Vulnerability analysis for PHP, Java and C/C ++. + Capacity to develop in-depth defense strategies and best practices for PHP, C/C++ and Java. + Basic reverse-engineering and software obfuscation skills. + Knowledge of software tools for vulnerability detection and code protection. + Capacity to adequately report testing and fixing outcomes.",
    "teaching_methods": "This module comprises lectures and tutorials. Lectures will include presentations by the organizers as well as by the students, showcasing intermediate results of the accompanying development project. Tutorials will include hands-on applcation of the lecture's material as well as tutored progress on the development project.",
    "media": "Slides, whiteboard, Virtual Machines, discussion",
    "literature": "+ Secure Coding: Principles and Practices, Graff and van Wyck,O'Reilly Media, 2003\n+ Building secure software, Viega and McGraw, Addison-Wesley Professional Computing Series,\n2001\n+ OWASP secure coding practices, https://www.owasp.org\n+ Secure Coding in C and C++, Robert C. Seacord, Adisson-Wesley, 2009\n+ The Ida Pro Book: The Unofficial Guide to the World's Most Popular Disassembler, Chris Eagle\nNo Starch Press, Incorporated, 2011\n+ Surreptitious Software: Obfuscation, Watermarking, and Tamperproofing for Software Protection,\nJasvir Nagra, Christian Collberg, Pearson Education, Jul 24, 2009",
    "lv_sws_lecturer": "Pretschner, Alexander; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2319",
    "title": "Computational Physiology for Medical Image Computing",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Unregelmäßig",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 120,
    "hours_presence": 60,
    "examination_achievements": "During the course of the module the participants will define and pursue a small project dealing with the analysis of clinical image data. They will implement and analyze computational algorithms for processing these data using the methods and tools presented in the lecture. They will pursue this project work in small teams and will actively participate in the discussion of results from other teams. Each team will document their project work and the contributions of the different team members. They will present their results at the end of the course in an oral presentation with subsequent discussion. They will be evaluated by their model implementation, their model analysis, and their presentation. Moreover, they will be evaluated based on their participation in the discussion of the projects of other participants.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "CAMP 1, or other introductory lecture on image processing; proficiency in a computing language\nsuch as Matlab, Python, or CPP.",
    "content": "1) Physiological imaging: Computational models for extracting local physiological information from imaging modalities such as magnetic resonance, computed tomography, or positron emission topography (e.g., MR and PET models for blood flow, metabolism, tissue microstructure) 2) Organ models: Computational models describing anatomy and function at the organ level as well as its variation across the population (e.g., 3D and 4D population atlases describing structure and shape) IN2319: Computational Physiology for Medical Image Computing | Computational Physiology for Medical Image Computing 3) Disease and diagnostics: Computational models describing pathophysiological processes and the progression of diseases (functional models from biophysics and theoretical biology, empirical models for clinical decisions) 4) Use cases, for example, from cardiac imaging, tumor analysis, and neuro-degenerative diseases",
    "learning_outcomes": "Upon completion of the module, the participants will be able to use computational models for extracting diagnostic information from different types of clinical image data sets. These data sets may provide information, for example, about blood perfusion or microstructural tissue properties, about metabolic processes, or patterns of disease progression. The participants will understand the physiological concepts underlying the computational algorithms employed, and will know of advantages and shortcomings of different modeling strategies. This will allow them to analyze clinical imaging protocols with respect to the underlying physiological information, and to propose diagnostic algorithms that combine anatomical and physiological information of different imaging modalities.",
    "teaching_methods": "Weekly lecture, discussion of project work; final presentation (written and oral)",
    "media": "Slides, additional reading material (review papers, book chapters); publicly available clinical data\nsets and software tools.",
    "literature": "An updated list will be maintained on the homepage of the lecture",
    "lv_sws_lecturer": "Menze, Björn; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2322",
    "title": "Protein Prediction I for Computer Scientists",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 8,
    "hours_total": 240,
    "hours_self_study": 150,
    "hours_presence": 90,
    "examination_achievements": "The module is graded by a written exam at the end of the semester. The exam takes 120 minutes. Weekly programming exercises and questions are graded and contribute to 50% of the final grade. In the exam the participants demonstrate their ability to devise and discuss an appropriate computational approach for a solution to a biological problem in the area of structure prediction. For example, they choose the appropriate methods depending on the type of data they have (1D, 2D, 3D) as well as the appropriate data abstraction level (1D, 2D, 3D) depending on the respective biological question. They demonstrate their understanding of the concepts in the choice of appropriate solution approaches to the given tasks and they can evaluate these in terms of a discussion of the various pros and cons of alternative approaches in biological as well as in technical aspects. They can demonstrate their ability to create a usable tool implementing a solution approach down to the level of pseudo-code. More details are announced at the lecture beginning.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "None",
    "content": "Introduction: What is a protein? What is protein structure & function? Overview of methods predicting protein structure. Methods: Sequence comparisons (sequence-sequence, sequence-profile, profile-profile, HMM); prediction of protein structure in 1D (secondary structure, solvent accessibility, membrane IN2322: Protein Prediction I for Computer Scientists | Protein Prediction I for Computer Scientists helices), 2D (contact prediction methods, contemporary methods using correlated mutations), 3D (comparative modeling, MD); prediction of disorder in proteins. The lectures include an introduction to machine learning with particular focus on how to avoid over- estimating performance.",
    "learning_outcomes": "Students understand the basic principles in protein sequence analysis, in protein structure and protein structure prediction. They understand the biological and computer science background of the methods toward these objectives in computational biology. Students have acquired the theoretical background consisting of the presented knowledge to develop and implement simple independent solutions towards the presented problems.",
    "teaching_methods": "Lectures, Exercises, Questions & Answers (Q&A) sessions Lectures (include Q&A): Theoretical background for all topics will be presented in traditional lecture style with slides, as well as, interactively through white board presentations and Q&A sessions. Exercises (include Q&A): Practical programming exercises deepening and applying the material presented in the lectures; occasionally, presentation of additional material needed for better understanding; exercises also include interactive Q&A sessions, and presentations from the students.",
    "media": "Lectures presented as interactive seminars using projector and white board; some lectures will be\ngiven on the white board, only. If supported: All lectures will be video-taped and both the slides and\nthe recordings will be made available shortly after the lecture.",
    "literature": "Will be announced in the lecture. For formal reasons: Anna Tramontano: Introduction to\nBioinformatics, or Arthur Lesk: Introduction to Bioinformatics, or Amit Kessel & Nir Ben-Tal:\nIntroduction to Proteins",
    "lv_sws_lecturer": "Rost, Burkhard; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nExercises for Protein Prediction I for Computer Scientists (IN2322) (Übung, 2 SWS)\nRost B [L], Erckert K, Koludarov I, Marquet C, Olenyi T, Richter L\nProtein Prediction I for Computer Scientists (IN2322) (Vorlesung, 4 SWS)\nRost B [L], Erckert K, Koludarov I, Marquet C, Olenyi T, Richter L, Rost B"
  },
  {
    "module_id": "IN2323",
    "title": "Machine Learning for Graphs and Sequential Data",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "The academic assessment will be done by a written 75 minutes exam. Assignments checking knowledge to verify the familiarity with machine learning models for graphs and sequential data; programming assignments verify the ability to implement and critically evaluate advanced algorithms and methods; small scenarios with defined applications have to be set up by applying the learnt methods to verify the ability to develop precise partial solutions.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Core modules from the Bachelor’s Informatics, semester 1-4 & knowledge of machine\nlearning principles (e.g. lecture IN2064)",
    "content": "1. Introduction * Machine Learning, Data Mining Process * Basic Terminology 2. Sequential Data * ML models for text data and temporal data * Autoregressive Models * Markov Chains, HMMs * Embeddings (e.g. Word2Vec) * Neural Networks (e.g. RNN, LSTM, ConvNets, Transformer) * Temporal Point Processes IN2323: Machine Learning for Graphs and Sequential Data | Machine Learning for Graphs and Sequential Data 3. Graphs & Networks * Laws, Patterns * (Deep) Generative Models for Graphs * Spectral Methods * Ranking (e.g., PageRank, HITS) * Community Detection * Node/Graph Classification * Label Propagation * Graph Neural Networks * (Unsupervised) Node Embeddings 4. Robustness * Adversarial Examples * Improving Robustness * Certifiable Robustness",
    "learning_outcomes": "Upon successful completion of this module, students will be able to describe data mining and machine learning methods and their applicability for complex data types. The students will get to know concepts for handling non-independent data in machine learning models. Furthermore, the students will be able to understand, apply, and evaluate principles for analyzing complex data such as graphs, network data, and temporal data.",
    "teaching_methods": "Lecture, problems for individual study, assignments including project work",
    "media": "Slides, exercise sheets, white board, project work",
    "literature": "- Mining of Massive Datasets. Jure Leskovec, Anand Rajaraman, Jeffrey David Ullman. Cambridge\nUniversity Press. 2014\n- Data Mining: The Textbook. Charu Aggarwal. Springer. 2015\n- The Elements of Statistical Learning: Data Mining, Inference, and Prediction. Trevor Hastie,\nRobert Tibshirani, Jerome Friedman. Springer. 2011",
    "lv_sws_lecturer": "Günnemann, Stephan; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nMachine Learning for Graphs and Sequential Data (IN2323) (Vorlesung mit integrierten Übungen,\n4 SWS)\nWollschläger T"
  },
  {
    "module_id": "IN2326",
    "title": "Foundations in Data Engineering",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 8,
    "hours_total": 240,
    "hours_self_study": 150,
    "hours_presence": 90,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer Klausur erbracht; die Prüfungsdauer beträgt 90 Minuten. Wissensfragen überprüfen die Vertrautheit mit Konzepten von verteilter Datenhaltung; Programmieraufgaben überprüfen die Fähigkeit, fortgeschrittene Algorithmen und Datenstrukturen zur Analyse der verteilt abgelegten Daten zu implementieren und kritisch einzuschätzen; für kleine Szenarien mit konkreten Charakteristiken der Daten, deren Verteilung und der verwendeten Architektur, weisen die Studierenden nach, dass sie hierauf optimierte Analyseprozesse entwickeln können.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0001 Einführung in die Informatik 1, IN0008 Grundlagen: Datenbanken, IN0007 Grundlagen:\nAlgorithmen und Datenstrukturen",
    "content": "Datenorganisation, effiziente Analyse großer Datenmengen, verteilte Datenhaltung (abhängig von der Systemarchitektur, z.B. Mehrkernsysteme, Multiprozessorsysteme, Cluster), verteilte und parallele Datenanalyse, Statistik-gestützte Optimierung von Analyseprozessen (z.B. durch Dimensionsreduktion), map/reduce Techniken und ihre Verallgemeinerung zur verteilten Anfrageverarbeitung, Anwendungen in Systemen wie Hadoop und in NoSQL Systemen, gesellschaftliche Auswirkungen, Bedeutung von Datenschutz",
    "learning_outcomes": "Die Studierenden können die wesentlichen Konzepte von verteilter Datenhaltung anwenden und charakterisieren. Sie kennen Analysealgorithmen auf sehr großen, verteilten Datenmengen und IN2326: Foundations in Data Engineering | Foundations in Data Engineering [FDE] können sie systematisch und qualifiziert nutzen, implementieren und bewerten. Sie können die Techniken zur Optimierung der Analyseprozesse einschätzen und kombinieren und sind in der Lage, diese für unterschiedliche Randbedingungen (z.B. Datencharakteristik, Systemarchitektur) weiter zu entwickeln. Sie wissen um die gesellschaftliche Bedeutung der erlernten Techniken.",
    "teaching_methods": "Das Modul wird als Vorlesung mit begleitender Übungsveranstaltung angeboten. In der Vorlesung werden die Inhalte im Vortrag durch anschauliche Beispiele sowie durch Diskussion mit den Studierenden vermittelt. Die Vorlesung soll den Studierenden dabei auch als Motivation zur eigenständigen inhaltlichen Auseinandersetzung mit den Themen sowie zum Studium der Literatur dienen. Jeweils passend zu den Vorlesungsinhalten werden in den Übungsveranstaltungen Aufgabenblätter angeboten, die die Studierenden zur selbstständigen Kontrolle sowie zur Vertiefung der gelernten Methoden und Konzepte nutzen sollen. Nachdem dies anfangs durch Anleitung passiert, wird dies im Laufe des Semesters immer mehr selbstständig einzeln und zum Teil auch in Kleingruppen vertieft. Eventuelle Projektarbeiten dienen dabei zur Anwendung von Vorlesungsinhalten auf komplexe Problemen.",
    "media": "Slides, exercise sheets, white board, project work",
    "literature": "- Anand Rajaraman, Jeffrey David Ullman: Mining of Massive Datasets,\nCambridge University Press B31\n- Maurice Herlihy, Nir Shavit: The Art of Multiprocessor Programming,\nMorgan Kaufmann, 2012\n- Garcia-Molina, Ullman, Widom: “Database Systems: The Complete Book,”\nPrentice Hall, 2000\n- Alfons Kemper, André Eickler: Datenbanksysteme. Eine Einführung. 8.,\naktualisierte und erweiterte Auflage, Oldenbourg Verlag, 2011",
    "lv_sws_lecturer": "Neumann, Thomas; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nExercise Foundations in Data Engineering (IN2326) (Übung, 2 SWS)\nBeischl A, Neumann T, Reif M\nFoundations in Data Engineering (IN2326) (Vorlesung, 4 SWS)\nNeumann T, Beischl A, Reif M"
  },
  {
    "module_id": "IN2331",
    "title": "Open Real Time Games Workshop",
    "level": "Bachelor",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester/Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer Projektarbeit mit abschließender Präsentation und Ausarbeitung erbracht. Die Teilnehmer wenden die im Rahmen des Moduls erworbenen Kenntnisse zur Modellierung in einem Team an, um gemeinsam eine praxisbezogene Projektaufgabe (Erstellung einer interaktiven 3D-Spieleanwendung) zu lösen. Die Ergebnisse werden von den Teilnehmern kontinuierlich im Verlauf des Moduls dokumentiert und am Ende präsentiert. Eine entsprechende Dokumentation, inklusive der digitalen Modelle, wird angefertigt und vorgelegt. Abzugeben sind\n- diverse Zwischenabgaben mit Zwischenergebnissen\n- die gesamte Spielekonzeption mit allen Zwischenergebnissen im Game Design Document\n- das finale Spiel (*.exe) mit ausgewählten Screenshots\n- ein kurzer Animationsfilm als Trailer zum Spiel.\nDie Note ergibt sich aus der Bewertung der Qualität der Lösung in Bezug auf die gestalterische, technische und wirtschaftliche Umsetzung der Spieleanwendung (gemessen wird der individuelle Beitrag jedes Studierenden zum Erfolg des Projektteams). Bewertungskriterien: Vollständigkeit (Übungen und Zwischenabgaben): 15%, Permanente Beurteilung: 15%, Konzeption: 20%, Idee und Form: 10%, Inhalt: 40%.",
    "repetition": "Semesterende\nIN2331: Open Real Time Games Workshop | Open Real Time Games Workshop [ORTGW]",
    "recommended_prerequisites": "IN0031 Einführung in Informatik für Games Engineering,\nIN0038 Echtzeit-Computergrafik,\nIN0033 Interaktionsmethoden und -geräte",
    "content": "Es gibt mehrere, parallele Sessions für Studierende und mit Studierenden, sowie mit Partnern aus Wirtschaft, Industrie und Forschung. Themenschwerpunkte sind Game Development, Game Design mit Augmented Reality und BioFeedback, Sim Games, Simulation und industrielle Anwendungen, sowie 3D- Echtzeitvisualisierung mit Open Source Software. Im Zentrum des Moduls „Open Games Workshop“ steht die Auseinandersetzung mit digitalen Werkzeugen für die professionelle Spieleentwicklung – sowohl bei der Modellierung und Spieleprogrammierung als auch bei der Einbindung von Interaktionsgeräten und –methoden (z.B.: BioFeedback, Eyetracking, Gaze and Gesture etc.). Es werden notwendiges theoretisches Wissen und Kenntnisse der Konzeption und praktischen Umsetzung von Computerspielen behandelt. In Form eines Praxisseminars erfolgt die Bearbeitung anhand einer praxisnahen Fragestellung. Fachliche Inhalte: Vertiefende theoretische und praktische Kenntnisse zu Game Design, Level Design, Konzeption und Umsetzung einer digitalen Echtzeitanwendung, mit Bildverarbeitung, BioFeedback und Interaktiven Medien. Methodische Inhalte: Grundlagen und Prinzipien von Game und Level Design und deren adäquate Präsentation.",
    "learning_outcomes": "Die Studierenden erlernen und vertiefen, ein digitales Spiel praxisbezogen zu konzipieren, zu entwickeln und umzusetzen – mit speziellem Fokus auf adäquater Szenenmodellierung und neuartiger, durch Biofeedback gesteuerter Interaktion. Sie verstehen, die professionellen Abläufe mit den üblichen Softwarepaketen gestalterisch, technisch und wirtschaftlich umzusetzen und die Arbeit in einem Team erfolgreich zu koordinieren.",
    "teaching_methods": "Dieser Workshop funktioniert wie ein sogenanntes \"Bar-Camp\". Mit Methoden des \"Blended Learning\" übernehmen Studierende auch aktive Rollen innerhalb des Moduls. In Impulsvorträgen wird das nötige Wissen von Referenten aus Forschung, Lehre und Industrie vermittelt. Es gibt ergänzende Fachvorträge von und mit Studierenden und externen Experten aus der Praxis. Die Studierenden werden zum Studium der Literatur und der inhaltlichen Auseinandersetzung mit den Themen angeregt. Die vermittelten theoretischen Grundlagen werden an Hand einer praktischen Aufgabenstellung vertieft. Am Ende des Moduls sind die erarbeiteten Projekte in digitaler und analoger Form abzugeben und in einer Ergebnispräsentation zu präsentieren. Das Modul wird als Blockveranstaltung abgehalten. IN2331: Open Real Time Games Workshop | Open Real Time Games Workshop [ORTGW]",
    "media": "Direkter, individueller Gedankenaustausch mit (Gast-)Dozenten, Doktoranden und Kommilitonen;\nFolien, Filme.",
    "literature": "Lehrmaterial zur Lehrveranstaltung wird semesterweise über die e-learning-Plattform\nzusammengestellt.",
    "lv_sws_lecturer": "Plecher, David; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nOpen Real Time Games Workshop (IN2331) (Seminar, 4 SWS)\nKlinker G [L], Höhl W, Liedtke S"
  },
  {
    "module_id": "IN2339",
    "title": "Data Analysis and Visualization in R",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 90,
    "hours_presence": 90,
    "examination_achievements": "Written exam and project work: The listed achievements, see Intended Learning Outcomes, are evaluated by one written exam of 90 min. There will be moreover two case studies, where the students must provide the source code that generates the report of an analysis of a given dataset. The analysis of this data covers all topics stated under Intended Learning Outcomes. The first case study covers topics 1-7. The second covers the topics 8-16. The final mark is the exam mark with bonus points for the two case studies.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "",
    "content": "R programming basics 1 R programming basics 2 (including report generation with R markdown) Data importing Cleaning and organizing data: Tidy data 1 Cleaning and organizing data: Tidy data 2 Base plot Grammar of graphics 1 Grammar of graphics 2 Unsupervised learning (hierarchical clustering, k-means, PCA) Case study I Drawing robust interpretations 1: empirical testing by sampling IN2339: Data Analysis and Visualization in R | Data Analysis and Visualization in R Drawing robust interpretations 2: classical statistical tests Supervised learning 1: regression, cross-validation Supervised learning 2: classification, ROC curve, precision, recall Case study II",
    "learning_outcomes": "At the end of the module students are able to:\n- 1. produce scripts that automatically generate data analysis report\n- 2. import data from various sources into R\n- 3. apply the concepts of tidy data to clean and organize a dataset\n- 4. decide which plot is appropriate for a given question about the data\n- 5. generate such plots\n- 6. know the methods of hierarchical clustering, k-means, PCA\n- 7. apply the above methods and interpret their outcome on real-life datasets\n- 8. know the concept of statistical testing\n- 9. devise and implement resampling procedures to assess statistical significance\n- 10. know the conditions of applications and how to perform in R the following statistical tests:\nFisher test, Wilcoxon test, T-test.\n- 11. know the concept of regression and classification\n- 12 apply regression and classification algorithms in R\n- 13. know the concept of error in generalization, cross-validation\n- 14. implement in R a cross-validation scheme.\n- 15. know the concepts of sensitivity, specificity, ROC curves\n- 16. assess the latter in R",
    "teaching_methods": "Lecture provides the concept + programming exercises where these concepts are applied on data. The goal of each exercise is the generation of report documents.",
    "media": "Weekly posted exercises online, slides, live demo",
    "literature": "An Introduction to Statistical Learning\nwith Applications in R http://www-bcf.usc.edu/~gareth/ISL/\nR for Data Science, by Garrett Grolemund and Hadley Wickham",
    "lv_sws_lecturer": "Gagneur, Julien; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nExercise Data Analysis and Visualization in R (IN2339) (Übung, 4 SWS)\nGagneur J [L], Gagneur J\nIN2339: Data Analysis and Visualization in R | Data Analysis and Visualization in R\nData Analysis and Visualization in R (IN2339) (Vorlesung, 2 SWS)\nGagneur J [L], Gagneur J"
  },
  {
    "module_id": "IN2340",
    "title": "Quantitative Verification",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Unregelmäßig",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Students are assessed by means of a written exam consisting of a list of exercises. Some exercises test the ability of the student to model small toy examples of hardware and software systems. Other exercises test if the student is able to formalize specifications described in natural language. Further exercises test if the students can select the most adequate technique for the analysis of a given system and apply it. Type of Assessment: written Duration of Assessment: 120 min Homework:N Term Paper:N Oral Presentation:N Conversation:N",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0011 Einführung in die Theoretische Informatik\nIN0015 Diskrete Strukturen\nIN0018 Diskrete Wahrscheinlichkeitstheorie\nIN2050 Model Checking",
    "content": "The course teaches the fundamentals of modelling and analysis of systems featuring quantitative behavior, such as time and probabilities. Topics include:\n• Representation of hardware and software systems using formal models of computations, e.g.,\ntransition systems, discrete-time and continuous-time Markov chains, Markov decision processes, stochastic games, timed automata. IN2340: Quantitative Verification | Quantitative Verification\n• Representation of specifications using formal logics, e.g., probabilistic linear temporal logic,\nprobabilistic computation-tree logic, continuous stochastic logic, metric temporal logic.\n• Algorithms for various classes of formal models and specifications, e.g., transient analysis,\nstationary analysis, mean-payoff optimization, reachability-game solving.\n• Theoretically optimal as well as practical techniques for analysis of large systems, e.g., linear\nprogramming, value iteration, strategy iteration, reinforcement learning.\n• Industrial application of the analysis, e.g., randomized communication protocols, embedded\nsystems, cyber-physical systems, safety-critical missions.\n• Practical experience in applying model checking tools, e.g., PRISM, MRMC, UPPAAL.",
    "learning_outcomes": "Successful participation enables students to\n• explain the role of quantitative modelling and analysis for ensuring hardware and software quality.\n• give formal models of simple hardware and software systems describing their probabilistic and\ntimed behavior.\n• write formal specifications of simple safety, dependability, reliability, and performance properties.\n• explain algorithms for checking if a system satisfies a given specification and apply them to small\nexamples.\n• understand and explain techniques for improving practical performance of the analysis\nalgorithms.",
    "teaching_methods": "The module consists of lectures and tutorials. During the lectures students are asked to solve small exercises online. Students also received weekly assignments, whose solution is discussed in the tutorials.",
    "media": "Slide show, whiteboard, blackboard, tool presentations and written assignments.",
    "literature": "• Baier, Katoen: Principles of Model Checking, MIT Press, 2008\n• Puterman: Markov Decision Processes: Discrete Stochastic Dynamic Programming, John Wiley,\n1994\n• Norris: Markov chains, Cambridge University Press, 1998\n• Meyn, Tweedie : Markov Chains and Stochastic Stability, Cambridge University Press, 2009",
    "lv_sws_lecturer": "Esparza Estaun, Francisco Javier; Prof.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2343",
    "title": "Problembasiertes Lernen Bioinformatik",
    "level": "Bachelor",
    "language": "Deutsch/Englisch",
    "semester_duration": "Zweisemestrig",
    "frequency": "Wintersemester/Sommersemester",
    "credits": 9,
    "hours_total": 270,
    "hours_self_study": 195,
    "hours_presence": 75,
    "examination_achievements": "Präsentation (Vortrag und zugehörige Ausarbeitung) Die Präsentation findet im Laufe des zweiten Semesters des Moduls statt und dauert 45-60 Minuten zuzüglich Diskussion. Die Benotung erfolgt auf Basis des Vortrags und der zugehörigen Ausarbeitung. Die genaue Gewichtung wird vom Dozenten zu Beginn des Moduls bekannt gegeben. Im Vortrag weisen die Studierenden nach, dass sie sich selbständig in ein spezielles Thema der Bioinformatik durch Literaturstudium und eigenständige Nacharbeitung einarbeiten können, die essentiellen Resultate extrahieren und verständlich vortragen können. In der anschließenden Diskussion weisen die Studierenden nach, dass sie Fragen beantworten können bzw. die Moderation einer Diskussion leiten können. In der kurzen Ausarbeitung weisen die Studierenden nach, dass sie diese wesentlichen Resultate auch knapp, aber formal exakt in schriftlicher Form wiedergeben können.",
    "repetition": "",
    "recommended_prerequisites": "",
    "content": "Techniken und Methoden zur Vortragsplanung, zur Literatursuche, zur Erstellung von Vorträgen, zur visuellen Präsentation, zur Erstellung und Gliederung wissenschaftlicher Ausarbeitungen und zur Moderation. IN2343: Problembasiertes Lernen Bioinformatik | Problem Based Learning Bioinformatics Anhand aktueller Forschungsarbeiten in der Bioinformatik wird eine Präsentation mit zugehöriger Ausarbeitung erstellt und präsentiert. Die Studierenden arbeiten sich unter Anleitung in das Themengebiet und die aktuelle Forschungsfrage ein. Sie verstehen und reproduzieren Teile der publizierten Ergebnisse. Die Auswahl der Themengebiete obliegt dem jeweiligen Dozenten. Beispiele für Themen sind effiziente Algorithmen zur Alignierung, Sequenzanalyse, Proteinstrukturvorhersage, Proteinfunktionsvorhersage, oder Phylogenien; Methoden zur Analyse und Interpretation neuer Hochdurchsatzdaten.",
    "learning_outcomes": "Nach der Teilnahme am Modul sind die Studierenden in der Lage, selbstständig aktuelle Forschungsergebnisse aus der Literatur zu verstehen, zu extrahieren, zusammenzufassen, zu analysieren und zu bewerten sowie diese klar schriftlich und mündlich zu präsentieren und zu diskutieren. Diese Kompetenzen werden sowohl in den Bioinformatik-Praktika als auch in der Bachelor’s Thesis zum Verständnis und zur Präsentation konkreter biologischer Fragestellungen sowie informatischer Methoden und mathematischer Modelle benötigt.",
    "teaching_methods": "Seminarvortrag Das Modul wird in zwei Veranstaltungen (PBL 1 im Sommersemester und PBL 2 im darauffolgenden Wintersemester) durchgeführt. Im ersten Teil liegt der Schwerpunkt auf der Vermittlung von Techniken und Methoden zur Vortragsplanung (einschließlich Literatursuche), zur Vortragserstellung, zur visuellen Präsentation, zur Erstellung und Gliederung wissenschaftlicher Arbeiten und zur Moderation von Vorträgen. Diese Methoden und Techniken werden von den Studierenden anhand konkreter Themen der aktuellen Bioinformatik-Literatur in Kurzvorträgen und Kurzausarbeitungen in Fallbeispielen praktisch geübt und diskutiert. Im zweiten Teil wird anhand aktueller Forschungsarbeiten in der Bioinformatik eigenständig eine vollständige Präsentation (Vortrag und zugehörige Ausarbeitung) erstellt und präsentiert.",
    "media": "Folienpräsentation",
    "literature": "Aktuelle Lehrbücher und Fachartikel aus der Bioinformatik",
    "lv_sws_lecturer": "Rost, Burkhard; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nProblembasiertes Lernen Bioinformatik (PBL) (Seminar, 2 SWS)\nFrischmann D [L], Frischmann D"
  },
  {
    "module_id": "IN2345",
    "title": "Algorithmen für Uncertainty Quantification",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Unregelmäßig",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Type of Assessment: written exam (75 minutes), since tasks involve in particular short calculations. In the exam, students should prove to be able to identify a given problem and find solutions within limited time. The examination will cover the complete content of the lectures. The type of questions will be oriented along the tutorial exercises. The answers will require own formulations. In addition, questions requiring short calculations may be posed. Exam questions assess the participants´ knowledge on the basic principles and goals of UQ as well as on central algorithms for forward UQ problems. They also test the capability to classify, explain, and analyze these algorithms and to describe methods to overcome the curse of dimensions of high-dimensional parameter space. The exam evaluates the students´ ability to list and differentiate current state-of-the-art software developments in UQ.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Basics of statistics and/or probability theory such as \"Discrete Probability Theory\" (IN0018);\nA basic understanding of numerical simulation is advantageous as covered for example in\n\"Modelling and Simulation\" (IN2010), \"Numerical Programming\" (IN0019), or \"Scientific Computing\n1\" (IN2005).",
    "content": "Computer simulations of different phenomena heavily rely on input data which – in many cases – are not known as exact values but face random effects. IN2345: Algorithmen für Uncertainty Quantification | Algorithms for Uncertainty Quantification Uncertainty Quantification (UQ) is a cutting-edge research field that supports decision making under such uncertainties. Typical questions tackled in this course are \"How to incorporate measurement errors into simulations and get a meaningful output?\", \"What can I do to be 98.5% sure that my robot trajectory will be safe?\", \"Which algorithms are available?\", \"What is a good measure of complexity of UQ algorithms?\", \"What is the potential for parallelization and High- Performance Computing of the different algorithms?\", or \"Is there software available for UQ or do I need to program everything from scratch?\" In particular, this course will cover\n- Brief repetition of basic probability theory and statistics\n- 1st class of algorithms: sampling methods for UQ (Monte Carlo): the brute-force approach\n- More advanced sampling methods: Quasi Monte Carlo & Co.\n- Relevant properties of interpolation & quadrature\n- 2nd class of algorithms: stochastic collocation via the pseudo-spectral approach: Is it possible to\nobtain accurate results with (much) less costs?\n- 3rd class of algorithms: stochastic Galerkin: Are we willing to (heavily) modify your software to\ngain accuracy?\n- Dimensionality reduction in UQ: apply hierarchical methodologies such as tree-based sparse grid\nquadrature. How does the connection to Machine Learning and classification problems look like?\n- Which parameters actually do matter? => sensitivity analysis (Sobol’ indices etc.)\n- What if there is an infinite amount of parameters? => approximation methods for random fields\n(KL expansion)\n- Software for UQ: What packages are available? What are the advantages and downsides of\nmajor players (such as chaospy, UQTk, and DAKOTA)\n- Outlook: inverse UQ problems, data aspects, real-world measurements",
    "learning_outcomes": "At the end of the module, participants can describe the basic principles and goals of UQ. They are able to classify, explain, and analyze central algorithms for forward UQ problems. The participants are able to elaborate on measures of complexity for UQ problems as well as to explain the underlying potential of parallel computations. They are familiar with the curse of dimensions of high-dimensional stochastic parameter spaces and can explain why/how certain schemes can overcome this issue. Participants are able to list and differentiate current state-of-the-art software developments in UQ as well as to implement simple scenarios using the python package chaospy.",
    "teaching_methods": "This module comprises lectures and accompanying tutorials. The contents of the lectures will be taught by talks and presentations. Students will be encouraged to study literature and to get involved with the topics in depth. In the tutorials, concrete problems will be solved - partially in teamwork - and selected examples will be discussed.",
    "media": "Slides, whiteboard, exercise sheets\nIN2345: Algorithmen für Uncertainty Quantification | Algorithms for Uncertainty Quantification",
    "literature": "- R. C. Smith, Uncertainty Quantification – Theory, Implementation, and Applications, SIAM, 2014\n- D. Xiu, Numerical Methods for Stochastic Computations – A Spectral Method Approach,\nPrinceton Univ. Press, 2010\n- T. J. Sullivan, Introduction to Uncertainty Quantification, Texts in Applied Mathematics 63,\nSpringer, 2015",
    "lv_sws_lecturer": "Bungartz, Hans-Joachim; Prof. Dr. rer. nat. habil.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nAlgorithms for Uncertainty Quantification (IN2345) (Vorlesung mit integrierten Übungen, 4 SWS)\nNeckel T [L], Burak I, Jovanovic Buha I"
  },
  {
    "module_id": "IN2346",
    "title": "Introduction to Deep Learning",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 120,
    "hours_presence": 60,
    "examination_achievements": "- Written test of 90 minutes at the end of the course.\n- After each practical session, the students will have to provide the written working code to the\nteaching assistant for evaluation. The students will be awarded a bonus in case they successfully complete all practical assignments. The exam takes the form of a written test. Questions allow to assess acquaintance with the basic concepts and algorithms of deep learning concepts, in particular how to train neural networks. Students demonstrate the ability to design, train, and optimize neural network architectures, and how to apply the learning frameworks to real-world problems (e.g., in computer vision). An important aspect for the student is to understand the basic theory behind the training process, which is mainly coupled with optimization strategies involving backprop and SGD. Students can use networks in order to solve classification and regression tasks (partly motivated by visual data).",
    "repetition": "Folgesemester",
    "recommended_prerequisites": "Programming knowledge is expected. At least one programming language should be known,\npreferably Python.\nMA0902 Analysis for Informatics\nMA0901 Linear Algebra for Informatics",
    "content": "- Introduction to the history of Deep Learning and its applications.\n- Machine learning basics 1: linear classification, maximum likelihood\n- Machine learning basics 2: logistic regression, perceptron\nIN2346: Introduction to Deep Learning | Introduction to Deep Learning\n- Introduction to neural networks and their optimization\n- Stochastic Gradient Descent (SGD) and Back-propagation\n- Training Neural Networks Part 1:\nregularization, activation functions, weight initialization, gradient flow, batch normalization, hyperparameter optimization\n- Training Neural Networks Part 2: parameter updates, ensembles, dropout\n- Convolutional Neural Networks, ConvLayers, Pooling, etc.\n- Applications of CNNs: e.g., object detection (from MNIST to ImageNet), visualizing CNN\n(DeepDream)\n- Overview and introduction to Recurrent networks and LSTMs\n- Recent developments in deep learning in the community\n- Overview of research and introduction to advanced deep learning lectures.",
    "learning_outcomes": "Upon completion of this module, students will have acquired theoretical concepts behind neural networks, and in particular Convolutional Neural Networks, as well as experience on solving practical real-world problems with deep learning. They will be able to solve tasks such as digit recognition or image classification.",
    "teaching_methods": "The lectures will provide extensive theoretical aspects of neural networks and in particular deep learning architectures; e.g., used in the field of Computer Vision. The practical sessions will be key, students shall get familiar with Deep Learning through hours of training and testing. They will get familiar with frameworks like PyTorch, so that by the end of the course they are capable of solving practical real-world problems with Deep Learning.",
    "media": "Projector, blackboard, PC",
    "literature": "- Slides given during the course\n- www.deeplearningbook.org",
    "lv_sws_lecturer": "Nießner, Matthias; Prof. Dr.-Ing.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nIntroduction to Deep Learning (IN2346) (Vorlesung mit integrierten Übungen, 4 SWS)\nNießner M [L], Chen Y, Dahnert M, Gafni G, Nießner M, Weitz S"
  },
  {
    "module_id": "IN2347",
    "title": "Functional Data Structures",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "The exam takes the form of a written test of 120 minutes or an oral exam of 30 minutes. The exam will assess students’ foundational understanding of functional data structures. This will involve both programming tasks and proofs and will test the students’ ability to use that data structures covered in the lectures and to design new data structures and algorithms based on the methods covered in the module.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Functional programming (IN0003 Introduction to Informatics 2); Discrete mathematics (IN0015\nDiscrete Structures); Data structures and algorithms (IN0007 Fundamentals of Algorithms and\nData Structures)",
    "content": "The module introduces students to the design and analysis of data structures for functional programming languages. It assumes that the students are familiar with functional programming and with running time analysis of algorithms. The module covers a range of functional data structures with an emphasis on their precise analysis. Proofs of both functional correctness and complexity will be a core part of the module Proofs are carried out with the help of a computer-based proof assistant. An introduction to the proof assistant is part of the module. A selection of the following non-exhaustive list of data structures and algorithms will be covered:\n- Sorting\n- Search trees: Unbalanced trees, AVL trees, Red-Black trees, 2-3 trees, Weight balanced trees,\nSplay trees, Tries IN2347: Functional Data Structures | Functional Data Structures\n- Other trees: Quad trees, Finger trees\n- Huffman coding\n- Priority queues: Braun trees, Leftist heaps, Skew binomial heaps, Skew heaps, Pairing heaps,\nFibonacci heaps\n- Dijkstra's algorithm\n- String matching",
    "learning_outcomes": "After the successful completion of this module, students will have an in-depth understanding of a range of functional data structures and are able to prove properties about them with the help of a computer-based proof assistant. Students will be able to\n- select suitable implementations of functional data structures for common programming tasks,\n- design and implement new functional data structures that are based on the principles covered in\nthe module,\n- prove the correctness and complexity of the data structures on paper and with the help of a proof\nassistant.",
    "teaching_methods": "The module consists of lectures and tutorials. In the lectures, the material is presented by the teacher, in dialogue with the students. During the tutorials, the students work on given exercises either individually or in small groups with help from the tutors. Exercises can be computer-based as well as paper and pencil based.",
    "media": "Lecture notes, slides, blackboard, online exercises and homework assignments",
    "literature": "Chris Okasaki. Purely Functional Data Structures. Cambridge University Press 1999",
    "lv_sws_lecturer": "Nipkow, Tobias; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nFunctional Data Structures (IN2347) (Vorlesung, 4 SWS)\nNipkow T [L], Nipkow T, Roßkopf S"
  },
  {
    "module_id": "IN2348",
    "title": "Ringvorlesung Digitalisierung",
    "level": "Bachelor/Master",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 2,
    "hours_total": 60,
    "hours_self_study": 30,
    "hours_presence": 30,
    "examination_achievements": "Schriftliche Prüfung von 60 Minuten Innerhalb der 60 Minuten ist ein Aufsatz zu einem vorgebebenen Thema aus den während der Ringvorlesung behandelten Gebieten und deren Verknüpfung zu schreiben. Hierbei können verschiedene Aufgaben-Schwerpunkte wie Analysieren, Begründen, Beurteilen, Beweisen oder Charakterisieren, Definieren, Erläutern, Erörtern und Vergleichen im Rahmen der Aufsatz-Themen gestellt werden. Der Aufsatz wird mit „bestanden“ oder „nicht bestanden“ bewertet.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Grundverständnis informatischer Zusammenhänge",
    "content": "Aspekte der Digitalisierung aus der Sicht verschiedener Disziplinen: Informatik, Wirtschaftsinformatik, Recht, Ökonomie, Politikwissenschaft, Soziologie, Philosophie und Ethik, Sicherheit und Privatheit und aus der Sicht industrieller Anwendungen.",
    "learning_outcomes": "Nach der Teilnahme an den Modulveranstaltungen sind die Studierenden in der Lage, auf universitärem Niveau die verschiedenen Facetten der Digitalisierung zu verstehen, zu analysieren, zueinander in Bezug zu setzen und Zielkonflikte zu identifizieren.",
    "teaching_methods": "Vorträge mit Folien, da Ringvorlesung mit Sprechern aus Forschung und Praxis. IN2348: Ringvorlesung Digitalisierung | Lecture Series: What is digitalization?",
    "media": "Folien",
    "literature": "Wird in den einzelnen Vorlesungen genannt",
    "lv_sws_lecturer": "Pretschner, Alexander; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nRingvorlesung \"Digitalisierung\" (IN2348) (Vorlesung, 2 SWS)\nPretschner A [L], Pretschner A, Speth S"
  },
  {
    "module_id": "IN2350",
    "title": "Auktionstheorie und Marktdesign (Doktorat)",
    "level": "",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer mündlichen Prüfung erbracht. In dieser wird durch das Lösen von Problemstellungen nachgewiesen, dass die Studierenden die spieltheoretischen Modellierungsansätze von Auktionsverfahren anwenden und bewerten können. Das zusätzliche Beantworten theoretischer Fragestellungen stellt vor allem sicher, dass die Teilnehmer die Grundproblematiken kombinatorischer Auktionen evaluieren können. Die Beantwortung erfordert zudem das selbstständige Verteidigen der Wahl von Auktionsformaten basierend auf gewünschten Eigenschaften der Marktallokation, wie z.B. Effizienz oder Ertragsmaximierung. Das Beantworten der Problem- und Fragestellungen erfordert eigene Formulierungen.",
    "repetition": "",
    "recommended_prerequisites": "IN0022 Planen und Entscheiden in betrieblichen Informationssystemen, Operations Research/\nLineare Optimierung",
    "content": "- Spieltheoretische Grundkonzepte (dominante Strategie, Nash Gleichgewicht unter vollständiger\nund unvollständiger Information etc.)\n- Mechanismus-Design-Theorie\n- Grundlagen der Auktionstheorie (geschlossene und offene Auktionen, Revenue Equivalence,\nOptimal Auctions etc. )\n- Kombinatorische Auktionen\n- Assignment markets\n- Herausforderungen bei der Entwicklung kombinatorischer Auktionen (iterative kombinatorische\nAuktionen und combinatorial clock auctions) IN2350: Auktionstheorie und Marktdesign (Doktorat) | Auction Theory and Market Design (Graduate Program)\n- Anwendungen kombinatorischer Auktionen (Frequenzauktionen, Beschaffung)\n- Approximations Mechanismen\n- Matching Märkte",
    "learning_outcomes": "Nach der Teilnahme an dem Modul verstehen die Studierenden die funktionalen Eigenschaften wie z.B. offene und geschlossene Formate und Zahlungsregel verschiedenster Auktionsformate. Sie können spieltheoretische Modelle zur Interpretation, der aus den genannten Eigenheiten entstehenden, strategischen Interaktion sowohl zwischen Bietern als auch zwischen Bietern und dem Auktionator kritisieren. Darauf aufbauend sind sie insbesondere dazu befähigt grundlegende Problematiken, wie z.B. Anreiz- und Komplexitätsprobleme (Bestimmung des Gewinners unter anderem), beim Entwurf kombinatorischer Auktionen zu erklären. Auch können die Studierenden die Wahl verschiedener Auktionsformate basierend auf gewünschten Eigenschaften der Marktallokation, wie z.B. Effizienz oder Ertragsmaximierung, verteidigen.",
    "teaching_methods": "Das Lehrformat besteht aus Vorlesung und inhaltlich abgestimmter Übung. In der Vorlesung trägt der Dozent den Inhalt vor und präsentiert Anwendungsbeispiele für diverse Auktionsformen. Hier werden die Studierenden mit den unterschiedlichsten Auktionsformaten und deren Modellierung bekannt gemacht und lernen verschiedene Anwendungsfälle zu unterscheiden. In der Übung bearbeiten die Studierenden in betreuter Einzelarbeit Übungsaufgaben und beurteilen die entsprechenden spiel- und auktionstheoretischen Modellierungsansätze. Dadurch lernen die Studierenden insbesondere die spezifischen Grundprobleme kombinatorischer Auktionen zu bewerten und das konstruktive Kritisieren der eigenen Arbeit.",
    "media": "Skriptum, Übungsblätter, PowerPoint, PC und E-Learning Plattform",
    "literature": "- Y. Shoham and K. Leyton-Brown: Multiagent Systems: Algorithmic, Game-Theoretic, and Logical\nFoundations. Chapters 3, 5, 6, 10, 11, 12. For class 2 and 3.\n- N. Nisan, T. Roughgarden, E. Tardos and V. Vazirani (editors): Algorithmic Game Theory.\nChapters 9 and 11 by Nisan. For class 2, 4 and 6\n- V. Krishna: Auction Theory. Chapters 16 and 17 on multi-object auctions",
    "lv_sws_lecturer": "Bichler, Martin; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2351",
    "title": "Business Analytics (Doktorat)",
    "level": "",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer mündlichen Prüfung erbracht. In dieser wird nachgewiesen, dass die Studierenden die Funktionsweise verschiedener Methoden und deren Annahmen verstanden haben. Die Teilnehmer zeigen anhand von Beispielen, dass sie die Ergebnisse verschiedener statistischer Verfahren interpretieren und auf Modellgüte prüfen können.",
    "repetition": "",
    "recommended_prerequisites": "IN0007 Grundlagen: Algorithmen und Datenstrukturen, IN0008 Grundlagen: Datenbanken",
    "content": "Inferential Statistics, Multi-linear Regression, Logistic and Poisson Regression, Naïve Bayes and Bayes Nets, Decision Tree Classifiers, Data Preparation, Evaluation of Classifiers and Learning Theory, Ensemble Methods and Clustering, Dimensionality Reduction, Association Rules",
    "learning_outcomes": "Nach der Teilnahme an dem Modul kennen Studierende verbreitete Verfahren für Klassifikation, numerische Vorhersage und Clustering. Sie kennen die Annahmen verschiedener Verfahren und verstehen deren Funktionsweise und typische betriebswirtschaftliche Einsatzgebiete. Teilnehmer können Datensätze mit der Programmiersprache R analysieren und die Ergebnisse der Analysen interpretieren. IN2351: Business Analytics (Doktorat) | Business Analytics (Graduate Program)",
    "teaching_methods": "Das Lehrformat besteht aus einer Vorlesung und einer inhaltlich begleitenden Übung. In der Vorlesung trägt der Dozent den Inhalt und Teile der entsprechenden Literatur interaktiv vor und präsentiert Anwendungsbeispiele aus der Praxis. Die Studierenden werden somit mit den statistischen Methoden vertraut gemacht und lernen ihre Anwendungen zu unterscheiden. In der Übung bearbeiten die Studierenden in betreuter Einzelarbeit Übungsaufgaben und werten die entsprechenden Data Mining Verfahren aus. Zudem bearbeiten die Teilnehmer in Gruppenarbeit Problemstellungen und deren Lösungsfindung anhand von empirischen Fallstudien zusammen mit dem Übungsleiter. Dadurch lernen die Studierenden ihre eigenen, auf Daten basierenden, Lösungsansätze zu entwerfen und das konstruktive Kritisieren der eigenen Arbeit. Hier üben die Teilnehmer auch ihre technischen Data Mining Fähigkeiten am PC mit Hilfe der datenverarbeitenden Software R.",
    "media": "Skriptum, Übungsblätter, PowerPoint, PC und E-Learning Plattform",
    "literature": "- Ian Witten, Eibe Frank: Data Mining: Practical Machine Learning\nTools and Techniques, 3rd ed., Morgan Kauffman, 2011 (E-Book http://\nproquest.tech.safaribooksonline.de.eaccess.ub.tum.de/9780123748560)\n- Gareth James, Daniela Witten, Trevor Hastie, Robert Tibshirnai: An Introduction to Statistical\nLearning, Springer, 2014 (E-Book http://www-bcf.usc.edu/%7Egareth/ISL/)\n- Jay Kearns: Introduction to Probability and Statistics using R, 2010 (E-Book http://cran.r-\nproject.org/web/packages/IPSUR/vignettes/IPSUR.pdf)",
    "lv_sws_lecturer": "Bichler, Martin; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nBusiness Analytics and Machine Learning (IN2028) (Vorlesung, 2 SWS)\nBichler M, Etesami S\nÜbungen zu Business Analytics and Machine Learning (IN2028) (Übung, 2 SWS)\nBichler M [L], Boschko D, Durmann J, Ewert M, Knörr J"
  },
  {
    "module_id": "IN2353",
    "title": "Indie-Games: von der Idee zum Markt",
    "level": "Bachelor",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 105,
    "hours_presence": 45,
    "examination_achievements": "Die Prüfungsleistung wird in Form von Projektarbeit erbracht. Die Studierenden entwickeln in gruppenbasierter Arbeit ein fiktives Unternehmen, das ein Indie- Game realisieren und am Markt positionieren wird. Im Verlauf der Vorlesung präsentieren die Studierenden den aktuellen Fortschritt ihrer Ergebnisse. Das endgültige Ergebnis wird am Semesterende vor einer Jury von Experten präsentiert. Die Note ergibt sich aus der Bewertung der Qualität der Lösung und Präsentation der Projektaufgabe (gemessen wird der individuelle Beitrag jedes Studierenden zum Erfolg des Projektteams).",
    "repetition": "",
    "recommended_prerequisites": "IN0031 Einführung in die Informatik für Games Engineering\nIN0032 Game Engine Design",
    "content": "In diesem Modul wird der Frage nach einer erfolgreichen Spieleentwicklung und Vermarktung eines unabhängigen Spiele-Prototypen nachgegangen. Es werden dabei verschiedene Aspekte und Grundsätze, vor allem in Bezug auf das Publishing eines Indie-Games, erläutert und erlernt:\n- Was ist ein Indie-Game aus Sicht des Inverstors?\n- Grundlagen einer erfolgreichen Projektplanung als unabhängiger Spieleentwickler\n- Zielgerichtete Konzepterstellung für ein Indie-Game\n- Analyse, Planung und Umsetzung eines Indie-Games\n- Wie und wann muss eine Investition stattfinden?\n- Was sind Kooperationen und wie werden sie um das Projekt herum gebildet?\nIN2353: Indie-Games: von der Idee zum Markt | Indie-Games: From Set-Up to Publishing\n- Effiziente Nutzung von Expertenwissen, Bibliotheken (Unity Asset Store) und anderen\nDienstleistungen\n- Wie sieht die Angebotserstellung von Umsatzanteilen aus?\n- Nach welchen Kriterien sollte die Auswahl eines geeigneten Spiels stattfinden?\n- Analyse von: Kosten-Nutzen, effektive Personalplanung, Marketing-Mix\n-Erstellung von einem Krisenkommunikation-Plan\n- Marketing durch die eigene Webseite und Erstellung der richtigen Texte, sowie Erstellung von\neinem Trailer für das Spiel",
    "learning_outcomes": "Die Modulveranstaltung ist besonders auf eine projektorientierte Verbindung von Praxis und Theorie ausgerichtet. Nach der Teilnahme an der Modulveranstaltung sind die Studierenden in der Lage zu erkennen und zu bewerten, worauf unabhängige Spieleentwickler bei der Entwicklung eines Spiels achten. Darüber hinaus können die Studierenden erkennen und bewerten, welche Faktoren für den Erfolg eines Spiels ausschlaggebend sind und welche Schritte in den Bereichen Team Bildung, Laterale Führung, Finanzierung & Financial Pitch, kreative Ideengenerierungsmethoden, Design Thinking für rapid prototyping, Game Design, Marketing & PR zu berücksichtigen sind. Zu guter Letzt bewerten die Studierenden die Auswahl von Publishing-Plattformen. Sie sind im Anschluss in der Lage das Erlernte auf vergleichbare Projekte in der Game-Industrie zu übertragen und anzuwenden. Auf Basis der Grundlagen können die Voraussetzungen für die Entwicklung eigener, neuer und erfolgreicher Indie-Games geschaffen werden. Im weiteren Verlauf sind die Studierenden in der Lage die Diversität der unterschiedlichen Disziplinen in der Spieleentwicklung zu erkennen und angemessen zu bewerten.",
    "teaching_methods": "Lehrtechnik: Projekt Projektarbeit Lehrmethode: Gruppenarbeit, Präsentation, Projektarbeit, Lernaktivität: In dem Projekt „Indie-Games: von Set-Up zu Publishing“ werden zu Beginn die Grundlagen des Teamführungs, Businessmodell und Prototyping definiert und erarbeitet, um dann in Zusammenhang gesetzt zu werden. Ferner werden in Gruppenübungen die Möglichkeiten das Unternehmen und die dementsprechenden Konzeptionen des Indie Games zu diskutiert und kritisch bewertet. Diese werden dann einem kritischen Test unterzogen und die Chancen und Risiken gegenübergestellt. Nach diesen Erkenntnissen sollten die Studierenden vor einigen Experten (fiktiven Investoren) ein Financial Pitch halten.",
    "media": "Testumgebung iPad, PowerPoint, Videos, Bücher",
    "literature": "- Christer Kaitila (2012): The Game Jam Survival Guide, Packt Publishing\n- Hill-Whittall (2015): The indie game developer handbook, Focal Press\n- Dreskin (2016): A practical guide to indie game marketing, CRC Press\n- Mia (2016): Atari to Zelda Japan's videogames in global contexts, The MIT Press\n- Csikszentmihalyi M. (1999): Flow, Das Geheimnis des Glu#cks, 7. Auflage, Stuttgart, Klett-Cotta\nIN2353: Indie-Games: von der Idee zum Markt | Indie-Games: From Set-Up to Publishing\n- Macklin (2016): Games, design and play a detailed approach to iterative game design, Addison-\nWesley\n- Nicola K. (2013): Kreativität bei virtueller Zusammenarbeit, Eul\n- Müller (2011): Ideenfindung, Problemlösen, Innovation, PUBLICIS",
    "lv_sws_lecturer": "Klinker, Gudrun Johanna; Prof. i.R.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nIndie-Games: von der Idee zum Markt (IN2353) (Seminar, 3 SWS)\nKlinker G [L], Palmas F, Liedtke S"
  },
  {
    "module_id": "IN2354",
    "title": "3D Scanning & Motion Capture",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester/Sommersemester",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 120,
    "hours_presence": 60,
    "examination_achievements": "The exam takes the form of a written test of 90 minutes. Questions allow to assess acquaintance with the basic concepts and algorithms of 3D digitization, in particular 3D scanning and motion capture. Students demonstrate the ability to apply visual computing algorithms to derive solutions for specific sub-problems for capturing static and dynamic environments. Students can classify capture techniques based on RGB and RGB-D scanning, and they are familiar with the main algorithmic tools in the field: implicit functions, pose tracking, face tracking, real-time reconstruction, etc. Exam questions will thoroughly cover the lecture content as well as practical content from the exercises and projects of the course.",
    "repetition": "",
    "recommended_prerequisites": "MA0902 Analysis for Informatics\nMA0901 Linear Algebra for Informatics\nC++ knowledge is required",
    "content": "3D reconstruction, RGB-D scanning (Kinect, Tango, RealSense), ICP, camera tracking, sensor calibration, VolumetricFusion, Non-Rigid Registration, PoseTracking, Motion Capture, Body-, Face-, and Hand-Tracking, 3D DeepLearning, selected optimization techniques to solve the problem statements (GN, LM, gradient descent).",
    "learning_outcomes": "After successful completion of the module, the students have gained advanced knowledge in the field of 3D scanning and motion capture regarding the underlying algorithmings, including rigid and non-rigid 3D reconstruction methods and useful optimization techniques to solve them. In IN2354: 3D Scanning & Motion Capture | 3D Scanning & Motion Capture the end, students know how to capture data with a commodity RGB-D scanner, they know how basic pose trackers work such as in the Microsoft Kinect, and how movies use 3D digitization in their production process. In addition to the theory, students are well familiarized with practical implementations of aforementioned approaches and execute them in real-world applications.",
    "teaching_methods": "The lecture conveys to the students the area-specific knowledge, points towards relevant articles and encourages the students to read and put into relation the presented approaches. The lecturer gives online and on-board examples demonstrating the application of these approaches. Exercises will accompany the class which the students will as homework assignments. In addition to the classes and regular accompanying exercises, the students will work on a final project over span of 2 month during the latter part of the lecture (the project summarizes the last assignments); during this time the students will exercise their learned knowledge by proposing and executing small research projects: for instance, students will implement a 3D reconstruction or face tracking method, hand tracker, or RGB-D frame-to-frame alignment while having the opportunity to bring in their own ideas.",
    "media": "PowerPoint course slides, white board exercises, tutorials and demonstrations using RGB-D data\nfrom commodity sensors open source capture software (3D reconstruction, face trackers, etc.).",
    "literature": "D. A. Forsyth and J. Ponce. Computer Vision: A Modern Approach (2nd Edition). Prentice Hall,\n2011.\nR. Hartley and A. Zisserman. Multiple View Geometry in Computer Vision. Cambridge University\nPress, 2003.",
    "lv_sws_lecturer": "Prof. Dr. Matthias Niessner (niessner@tum.de)\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\n3D Scanning & Motion Capture (IN2354) (Vorlesung, 2 SWS)\nNießner M [L], Burov A, Dai A, Höllein L, Nie Y, Nießner M, Sevastopolskiy A, Weitz S\nExercise - 3D Scanning & Motion Capture (IN2354) (Übung, 1 SWS)\nNießner M [L], Burov A, Dai A, Höllein L, Nießner M, Sevastopolskiy A, Weitz S"
  },
  {
    "module_id": "IN2358",
    "title": "Lambda Calculus",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Unregelmäßig",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "The exam takes the form of a written test of 90 minutes or an oral exam of 25 minutes. The exam will assess students’ foundational understanding of lambda calculus. This will involve both constructive tasks (how to express programming language phenomena in lambda calculus) and proofs (proving that reduction and type systems have certain properties) and will test the students’ ability to explain and apply the techniques covered in the module.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Functional programming (IN0003 Introduction to Informatics 2)",
    "content": "The module introduces students to lambda calculus, the foundation of many programming languages, in particular functional ones. The first half of the course introduces untyped lambda calculus. The focus is on the detailed study of the reduction rules of lambda calculus, their computational behaviour, and how to define evaluation strategies like call-by-value and call- by-name. It is shown that lambda calculus is a Turing-complete programming language. The second part of the course is dedicated to typed lambda calculi. It covers type systems prevalent in functional languages and the relationship between type systems and logic, the Curry-Howard correspondence.",
    "learning_outcomes": "After the successful completion of this module, students will have an in-depth understanding of lambda calculus as a model of programming languages. They will be able to\n- prove fundamental properties of reduction in lambda calculus,\nIN2358: Lambda Calculus | Lambda Calculus\n- model common programming language data types and control constructs in lambda calculus,\n- translate between lambda terms and combinators,\n- infer a principal type of an untyped term,\n- translate between lambda terms and proofs.",
    "teaching_methods": "The module consists of lectures and tutorials. In the lectures, the material is presented by the teacher, in dialogue with the students. During the tutorials, the students work on given exercises either individually or in small groups with help from the tutors. Exercises can be computer-based as well as paper and pencil based.",
    "media": "Lecture notes, slides, blackboard, online exercises and homework assignments",
    "literature": "Hendrik Pieter Barendregt. The Lambda Calculus, its Syntax and Semantics, North-Holland, 2nd\nedition, 1984\nJean-Yves Girard, Yves Lafont, and Paul Taylor. Proofs and Types, Cambridge Tracts in\nTheoretical Computer Science, Cambridge University Press, 1989\nChris Hankin. An Introduction to Lambda Calculi for Computer Scientists, King's College\nPublications, 2004\nJ. Roger Hindley and Jonathan P. Seldin. Lambda-Calculus and Combinators: An Introduction,\nCambridge University Press, 2008",
    "lv_sws_lecturer": "Nipkow, Tobias; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nLambda Calculus (IN2358) (Vorlesung, 2 SWS)\nNipkow T, Stevens L\nÜbung zu Lambda Calculus (IN2358) (Übung, 2 SWS)\nStevens L"
  },
  {
    "module_id": "IN2359",
    "title": "Blockchain-based Systems Engineering",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Prüfungsart: Schriftliche Klausur Die Prüfungsleistung wird in Form einer 90-minütigen schriftlichen Klausur erbracht. Die Studierenden sollen im Stande sein, Fragen aus den einzelnen Themengebieten der Vorlesung ohne Hilfsmittel korrekt zu beantworten. Das Beantworten der Fragen erfordert teils eigene Formulierungen, teils eigene Berechnungen. Arbeitsaufwand: Der Arbeitsaufwand liegt im Wissen und Verständnis der in Vorlesung und Übung behandelten Inhalte. Eine Bearbeitung der Übungen ist freiwillig, wird aber für das Bestehen der Klausur empfohlen.",
    "repetition": "",
    "recommended_prerequisites": "• IN0002: Praktikum: Grundlagen der Programmierung\n• IN0006: Einführung in die Softwaretechnik\n• IN0009: Grundlagen: Betriebssysteme und Systemsoftware",
    "content": "Die Blockchain-Technologie und allgemeiner Distributed Ledger-Technologien (DLT) stellen die technische Grundlage für die Entwicklung und den Einsatz von innovativen dezentralisierten, verteilten Systemen dar. In dieser Vorlesung werden die Eigenschaften der Technologie analysiert. Ebenso sollen Studierende zu einer erfolgreichen Bewertung und Entwicklung von auf Blockchain basierenden Lösungen befähigt werden. Geplante Vorlesungsinhalte umfassen:\n• Kryptographische Grundlagen\nIN2359: Blockchain-based Systems Engineering | Blockchain-based Systems Engineering\n• Peer2Peer-Netzwerke\n• Datenstruktur und Aufbau der Blockchain\n• Consensus-Mechanismen\n• Smart Contracts & Smart Contract Engineering\n• Mögliche Anwendungsszenarien\n• Alternative Distributed-Ledger Ansätze\n• Risiken & Herausforderungen sowie Limitationen der Technologie\n• Aktuelle Forschungsarbeiten und Entwicklungen der Technologie",
    "learning_outcomes": "Nach der Teilnahme an den Modulveranstaltungen sind die Studierenden in der Lage, Blockchain- basierte Anwendungssysteme zu analysieren, für gegebene Nutzungsszenarien zu entwerfen und die jeweils passenden Blockchain-Technologien zu wählen. Sie verstehen die technologischen Grundlagen, sodass sie befähigt sind, zukünftige bzw. alternative Distributed-Ledger-Technologien zu verstehen und zu bewerten.",
    "teaching_methods": "Vorlesung, Zentralübung",
    "media": "Vortrag mit digitalen Folien",
    "literature": "Narayanan, A., Bonneau, J., Felten, E., Miller, A., & Goldfeder, S. (2016). Bitcoin and\nCryptocurrency Technologies: A Comprehensive Introduction. Princeton University Press",
    "lv_sws_lecturer": "Matthes, Florian; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nBlockchain-based Systems Engineering (IN2359) (Vorlesung mit integrierten Übungen, 4 SWS)\nMatthes F [L], Matthes F, Öz B, Hoops F"
  },
  {
    "module_id": "IN2360",
    "title": "Höhere Algorithmik",
    "level": "Bachelor/Master",
    "language": "Deutsch/Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 105,
    "hours_presence": 75,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer 120-minütigen Klausur erbracht. In dieser weisen Studierende anhand der gestellten Aufgaben nach, dass sie über fundamentale und weiterführende Kenntnisse im Bereich der effizienten Algorithmen verfügen. Die Studierenden demonstrieren, dass sie in begrenzter Zeit entsprechende algorithmische Probleme erkennen und analysieren können sowie Wege zu einer effizienten Lösung finden.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN2007 Grundlagen: Algorithmen und Datenstrukturen,\nIN0015 Diskrete Strukturen,\nIN0018 Diskrete Wahrscheinlichkeitstheorie",
    "content": "Das Modul behandelt grundlegende und klassische Themen aus dem Bereich der effizienten Algorithmen. Dabei werden zentrale Techniken des Algorithmenentwurfs und der Analyse studiert. Konkret behandelt das Modul die Methoden Divide-and-Conquer, dynamische Programmierung, Randomisierung, Greedy-Verfahren sowie amortisierte Analyse. Diese Techniken werden angewandt, um grundlegende algorithmische Probleme zu lösen. Die Agenda des Moduls umfasst die folgenden Themen. Divide-and-Conquer: Einführung -- deterministischer Quicksort; geometrisches Divide-and- Conquer; Problem des dichtesten Punktepaars; Schnitt von Liniensegmenten; schnelle Fourier- Transformation (FFT). Einführung in die randomisierten Algorithmen: Las-Vegas- und Monte-Carlo-Algorithmen; Primzahltest; RSA-Kryptoverfahren; Verifikation von Matrixmultiplikationen. IN2360: Höhere Algorithmik | Advanced Algorithms Datenstrukturen: Treaps – randomisierte Suchbäume; universelles und perfektes Hashing; Konstruktion von Suffix-Bäumen. Amortisierte Analyse: Dynamische Tabellen; Fibonacci-Heaps. Greedy-Algorithmen: Ablaufplanung von Zeitintervallen (Intervall-Scheduling); Planung mit dem Ziel der Minimierung von Verspätungen; kürzeste Wege in Graphen. Dynamische Programmierung: Matrixketteprodukt; Konstruktion von optimalen Suchbäumen; Segmentierung von Datenpunkten; Editierdistanz; approximatives String-Matching; Sequenzalignment. Graphenprobleme: Max-Fluss-Problem; Berechnung von minimalen Schnitten. Komplexität: PSPACE – eine Klasse von Problemen oberhalb NP; relaxierte Komplexitätsmaße. Ausgewählte Themen: Stabile Heirat; lokale Suche; Berechnung des Medians; Routing im Hyperwürfel; die probabilistische Methode.",
    "learning_outcomes": "Die Teilnehmer des Moduls verfügen über vertiefte Kenntnisse verschiedener Grundprinzipien in der Entwicklung und Analyse von Algorithmen (Divide-and-Conquer, Greedy-Verfahren, dynamische Programmierung, Randomisierung) sowie zahlreiche paradigmatische Anwendungsprobleme.",
    "teaching_methods": "Das Modul besteht aus einer Vorlesung und einer begleitenden Übungsveranstaltung. Die Inhalte der Vorlesung werden im Vortrag und durch Präsentation vermittelt. Studierende werden insbesondere durch die Lösung von Übungsblättern zur inhaltlichen Auseinandersetzung mit den Themen angeregt. Die Lösung der Übungsaufgaben wird in der Übungsveranstaltung besprochen. Zusätzlich erhalten die Studenten durch die Korrektur der Übungsblätter eine individuelle Rückmeldung über ihren Lernerfolg.",
    "media": "Folien, Tafelarbeit, Übungsblätter",
    "literature": "T.H. Cormen, C.E. Leiserson, R.L. Rivest, C. Stein: Introduction to Algorithms. MIT Press, 2009.\nJ. Kleinberg, E. Tardos: Algorithm Design. Pearson. Addison Wesley, 2006.\nM. Mitzenmacher, E. Upfal: Probability and Computing: Randomized Algorithms and Probabilistic\nAnalysis. Cambridge University Press, 2005.\nT. Ottmann, P. Widmayer: Algorithmen und Datenstrukturen. Springer Verlag, 2012.\nIN2360: Höhere Algorithmik | Advanced Algorithms",
    "lv_sws_lecturer": "Albers, Susanne; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nAdvanced Algorithms / Höhere Algorithmik (IN2360) (Vorlesung mit integrierten Übungen, 5 SWS)\nAlbers S [L], Albers S, Galvez W, Schubert S"
  },
  {
    "module_id": "IN2363",
    "title": "Moderne Techniken für die Shader-Entwicklung und Bildsynthese",
    "level": "Bachelor",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 105,
    "hours_presence": 45,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer Projektarbeit erbracht. Die Studierenden entwickeln ein auf Shader fokussiertes Projekt um Gelerntes zu zeigen. Die Fortschritte des Projektes werden im Rahmen des Praktikums begutachtet. Die finale Note ergibt sich aus der Bewertung der visuellen Qualität (25%), der Bewertung einer Abschlusspräsentation (50%) zum Semesterende und der Bewertung der Codequalität hinsichtlich Optimierung (25%).",
    "repetition": "",
    "recommended_prerequisites": "IN0038 Echtzeit Computergrafik\nIN0039 Praktikum: Echtzeit Computergrafik\nIN0031 Einführung in die Informatik für Games Engineering",
    "content": "Anhand von aktuellen Beispielen wird den Studenten die plattformübergreifende Entwicklung von Shadern für Games und andere, Computergraphik fokussierte, Anwendungen erläutert. Als Entwicklungsumgebung kommen Unity3D, sowie Visual Studio zum Einsatz. Spezieller Fokus liegt hier auf:\n- Aufbau von Shadern: Vertex, Fragment, Geometry und Surface Shader\n- Verschiedene Beleuchtungsmodelle\n- Physically Based Rendering, BRDFs\n- Optimierung, Performance Analyse, Tools\n- Rendering, Graphic APIs\nIN2363: Moderne Techniken für die Shader-Entwicklung und Bildsynthese | Modern Techniques for Shader Development and Image Synthesis\n- Post-Processing, Image Effects\n- Compute Shader\n- Tessellation\n- Stylized Shading\n- Volume Rendering",
    "learning_outcomes": "Nach der Teilnahme am Modul sind die Studenten in der Lage gezielt visuelle Effekte zu analysieren und diese mithilfe von Shadern für Spiele und andere Applikationen zu erstellen. Die erlernten Technologien umfassen Beleuchtung, Bildeffekte, Compute und fortgeschrittene Technologien wie Tessellation. Die Studenten können Shader optimieren und Gelerntes auch auf Bereiche außerhalb des Games Engineering anwenden. Sie erhalten einen tiefen Einblick in die Funktionsweisen und den Aufbau moderner Renderer und verstehen die Einordnung verschiedener Shader in die Graphics Pipeline.",
    "teaching_methods": "Praktikum und Projektarbeit. Das wöchentliche Praktikum dient zum Erlenen und Verstehen der Konzepte, sowie deren Bedeutung für den Einsatz in Anwendungen. Die anschließende Projektarbeit dient zur Vertiefung und Anwenden der gelernten Konzepte.",
    "media": "PowerPoint, Bücher, Videos, Computer, interaktives Problemlösen",
    "literature": "GPU Pro (1-7): Advanced Rendering Techniques, Wolfgang Engel (2010-2016)\nPhysically Based Rendering, Matt Phar / Greg Humphreys, Wenzel Jakob, 2016\nGPU Zen: Advanced Rendering Techniques, Wolfgang Engel, 2017",
    "lv_sws_lecturer": "Westermann, Rüdiger; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nAlexander Müller"
  },
  {
    "module_id": "IN2366",
    "title": "Modellbildung und Simulation (Fokus Analysis)",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 9,
    "hours_total": 270,
    "hours_self_study": 165,
    "hours_presence": 105,
    "examination_achievements": "Prüfungsart: Klausur Die Prüfungsleistung wird in Form einer Klausur von 135 Minuten erbracht. In dieser soll nachgewiesen werden, dass in begrenzter Zeit ein Problem erkannt wird und Wege zu einer Lösung gefunden werden können. Die Prüfungsfragen gehen über den gesamten Stoff von Blockveranstaltung und Vorlesung. Die Antworten erfordern eigene Formulierungen. Darüber hinaus können kurze Rechenaufgaben gestellt werden. Prüfungsfragen weisen das Verständnis der Grundkonzepte der mehrdimensionalen Analysis und die Fähigkeit zur Entwicklung von formalen (mathematischen oder informatischen) Modellkonzepten für gegebene Probleme nach. Die Studierenden demonstrieren, dass sie in der Lage sind, erfolgreich Strategien zur Simulation auszuwählen und anzuwenden. Außerdem weisen sie ihr Wissen bzgl. wichtiger Modellklassen und zugehöriger Lösungsansätze für einfache Szenarien nach.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "MA0901 Lineare Algebra für Informatik, MA0902 Analysis für Informatik, IN0019 Numerisches\nProgrammieren",
    "content": "- Einführung in die Analysis mehrerer Veränderlicher (partielle Ableitungen, partielle\nDifferenzialgleichungen, Integration)\n- Einführung in die mathematische Modellierung (Begriffsbildung, Anwendungsbeispiele, Herleitung\nvon Modellen, Analyse von Modellen, Klassifizierung von Modellen, Betrachtungsebenen und Hierarchie) IN2366: Modellbildung und Simulation (Fokus Analysis) | Modelling and Simulation (Focus Analysis)\n- Diskrete Modellierung und Simulation (Entscheidungsmodelle: Spiele, Strategien, Wahlen;\nReihenfolgeprobleme: Scheduling; Diskrete Ereignissimulation: Verkehr in Rechensystemen; Neuronale Netze)\n- Kontinuierliche Modellbildung und Simulation (Populationsdynamik: Modelle und ihre numerische\nBehandlung; Regelungstechnik: Deterministische und Fuzzy Logic Ansätze; Verkehrsfluss: Modellierung über kontinuierliche Größen; Wärmeleitung: Modell und numerische Lösung)\n- Modellierung im Software-Entwurf (optional; grundlegende Konzepte, Beschreibungstechniken,\nMethodik)",
    "learning_outcomes": "Nach erfolgreicher Teilnahme am Modul verstehen die Studierenden die Grundkonzepte der mehrdimensionalen Analysis und können sie auf beispielhaft gegebene Probleme anwenden. Sie sind in der Lage, für eine verbal vorgetragene Aufgabenstellung formale (mathematische oder informatische) Modellkonzepte zu entwickeln sowie zu bewerten und Strategien zur Simulation, also zur rechnergestützten Lösung dieser Modelle, auszuwählen und dann auch erfolgreich einzusetzen. Sie haben exemplarisch wichtige Modellklassen kennen gelernt und können für einfache Szenarien eigene Lösungsverfahren entwickeln.",
    "teaching_methods": "Das Modul besteht aus einer vorgeschalteten Blockveranstaltung zur mehrdimensionalen Anlysis, einer Vorlesung und einer begleitenden Übung. Die Inhalte der Vorlesung werden im Vortrag und durch Präsentationen vermittelt. Studierende sollen zum Studium der Literatur und der inhaltlichen Auseinandersetzung mit den Themen angeregt werden. In den Übungen werden teilweise in Gruppenarbeit gemeinsam konkrete Fragestellungen beantwortet und ausgesuchte Beispiele bearbeitet.",
    "media": "Folien, Tafelarbeit, Übungsblätter",
    "literature": "- Königsberger: Analysis 1+2, Springer, 2004\n- Karpfinger: Höhere Mathematik in Rezepten, Springer, 2014\n- Bungartz, Zimmer, Buchholz, Pflüger: Modellbildung und Simulation - eine anwendungsorientierte\nEinführung, Springer, 2009\n- Fowkes, Mahoney: Einführung in die mathematische Modellierung, Spektrum, 1996\n- Gander, Hrebicek: Solving Problems in Scientific Computing Using Maple and MATLAB, Springer,\n1997\n- Bossel: Modellbildung und Simulation, Vieweg, 1994\n- Banks et al.: Discrete Event System Simulation, Prentice Hall, 1996\n- Golub, Ortega: Scientific Computing: An Introduction with Parallel Computing, Academic Press,\n1993\n- Nauck, Klawonn, Kruse: Neuronale Netze und Fuzzy-Systeme, Vieweg, 1994\nIN2366: Modellbildung und Simulation (Fokus Analysis) | Modelling and Simulation (Focus Analysis)",
    "lv_sws_lecturer": "Bungartz, Hans-Joachim; Prof. Dr. rer. nat. habil.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nÜbungen zu Modellbildung und Simulation (Fokus Analysis) (IN2366) (Übung, 2 SWS)\nBungartz H [L], Gratl F, Newcome S, Seitz P\nModellbildung und Simulation (Fokus Analysis) (IN2366) (Vorlesung, 5 SWS)\nBungartz H [L], Gratl F, Newcome S, Seitz P"
  },
  {
    "module_id": "IN2367",
    "title": "Automated Programming",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 2,
    "hours_total": 60,
    "hours_self_study": 30,
    "hours_presence": 30,
    "examination_achievements": "Oral exam of 60 minutes in the form of a one-on-one interview. Usage of any written background material by the examinee is not allowed. The examinees shall demonstrate that they have understood the main specification techniques and synthesis algorithms as covererd in class and that they may apply these basic synthesis techniques. Questions can focus on various tasks such as analysing, justifying, judging, proving or characterizing, defining, explaining, discussing and comparing within the covered topics. In particular, students might be asked to apply the techniques to solve simple synthesis problems, or at least parts thereof.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Software Engineering IN2309 and/or IN0006, Foundations of Program and System Development\nIN2078, Logic IN2049, Semantics IN2055, Discrete Probability Theory IN0018",
    "content": "Automated Programming 1. Deductive Program Synthesis 2. Searching for programs 3. Programs from proofs 4. Transformational program synthesis 5. Synthesis of probabilistic programs 6. Synthesis of reactive programs IN2367: Automated Programming | Automated Programming 7. Programming by example 8. Inductive logic programming 9. Deep learning program synthesis 10. Application I: synthesis of data analysis programs 11. Application II: synthesis of robotic programs 12. Application III: synthesis of planetary software 13. Application IV: programmer’s assistence",
    "learning_outcomes": "After participation of this module the participants have foundational knowledge of the current state-of-the-art of the dimensions of automated program synthesis at the intersection of software engineering, artificial intelligence, and machine learning, including various specification approaches of functional, reactive, and probabilistic programs as well as specialized techniques for searching for, possibly optimized or robust, programs satisfying the given high-level specification. The automated programming techniques covered in class are at the intersection of the software engineering, artificial intelligence, and machine learning. The participants will also gain an overview of the capabilities and limitations or current approaches to program synthesis as a prerequisite for further scientific work (e.g. bachelor thesis, master thesis) or for applying program synthesis techniques in specialized applications.",
    "teaching_methods": "Lectures with slides. Practical exercises will be an integral part of the lectures. Some of these exercises will be solved interactively in class, whereas others will be left open during class and should be solved by the participants in self-study.",
    "media": "Slides",
    "literature": "Program Synthesis, S. Gulwani, O. Polozow, R. Singh, Foundations and Trends in Programming\nLanguages, Volume 4, Issue 1-2, 2017",
    "lv_sws_lecturer": "Pretschner, Alexander; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2368",
    "title": "Ringvorlesung Games Engineering",
    "level": "Bachelor/Master",
    "language": "Deutsch/Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 2,
    "hours_total": 60,
    "hours_self_study": 30,
    "hours_presence": 30,
    "examination_achievements": "Schriftliche Prüfung von 60 Minuten. Innerhalb der 60 Minuten müssen im Rahmen der Klausur, eine begrenzte Anzahl aus Single-Choice-Fragen (max. 15%), sowie Essayfragen beantwortet werden, welche aus den während der Ringvorlesung behandelten Gebieten entnommen werden. Hierbei können verschiedene Aufgaben-Schwerpunkte, wie Analysieren, Begründen, Beurteilen, Beweisen oder Charakterisieren, Definieren, Erläutern, Erörtern und Vergleichen im Rahmen der Essayfragen priorisiert werden. Die Klausur wird mit „bestanden“ oder „nichtbestanden“ bewertet. Hilfsmittel sind nicht erlaubt.",
    "repetition": "",
    "recommended_prerequisites": "",
    "content": "Aspekte aus dem Feld des Games Engineering aus der Sicht von verschiedenen Disziplinen, wie Informatik, Wirtschaft, Recht, Business, Forschung und Entwicklung mit direktem Industriebezug.",
    "learning_outcomes": "Nach der Teilnahme an den Modulveranstaltungen sind die Studierenden in der Lage, auf universitärem Niveau die verschiedenen Facetten der Games Branche zu verstehen und zu analysieren. Zusätzlich erwerben die Studierenden ein breites Wissen über die aktuellen Entwicklungen und Trends dieser Branche, sowie Einblicke in den aktuellen Stand und Technologie aus dem Feld des Games Engineerings. IN2368: Ringvorlesung Games Engineering | Lecture Series Games Engineering",
    "teaching_methods": "Vorträge mit Folien, da Ringvorlesung mit Sprechern aus Forschung und Praxis.",
    "media": "Folien",
    "literature": "Wird in den einzelnen Vorlesungen genannt",
    "lv_sws_lecturer": "Plecher, David; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nRingvorlesung \"Games Engineering\" (IN2368) (Vorlesung, 2 SWS)\nKlinker G [L], Liedtke S"
  },
  {
    "module_id": "IN2370",
    "title": "Masterpraktikum Bioinformatik",
    "level": "Master",
    "language": "Deutsch/Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 12,
    "hours_total": 360,
    "hours_self_study": 210,
    "hours_presence": 150,
    "examination_achievements": "Die Prüfung ist eine benotete Laborleistung und besteht aus mehreren Prüfungselementen (Präsentationen, Hausaufgaben, zu erstellende Programme, Projekte und Ausarbeitungen). Dadurch werden verschiedene Lernergebnisse überprüft: Durch Präsentationen (je nach Thema etwa 2-4 Kurzvorträge à 20-30 Minuten pro Studierendem) wird nachgewiesen, dass die Studierenden erarbeitetes Wissen (aus dem Literaturstudium und im Projekt gewonnene Erkenntnisse) und Ergebnisse in Form von Seminarvorträgen darstellen können. Durch Hausaufgaben, den Entwurf und die Implementierung von Programmen sowie die Realisierung von Projekten weisen die Studierenden nach, dass sie erworbenes Wissen (wie z.B. aktuelle bioinformatische Methoden) anwenden und umsetzen können. In den abschließenden Ausarbeitungen weisen die Teilnehmer nach, dass sie ihre Modulergebnisse wissenschaftlich beschreiben und ihre Arbeit in Bezug auf den aktuellen Stand der Wissenschaft bewerten können. Die Gesamtnote ergibt sich aus der Kombination der Prüfungselemente (Präsentationen, Hausaufgaben, zu erstellende Programme, zu IN2370: Masterpraktikum Bioinformatik | Master Lab Course Bioinformatics realisierende Projekte und Ausarbeitungen). Die genaue Anzahl der Vorträge, der Hausaufgaben, Programme, Projekte, Ausarbeitungen und die Gewichtung der Teile für die Gesamtnote wird jeweils zu Beginn des Moduls bekannt gegeben. Die Prüfung kann im Folgejahr wiederholt werden.",
    "repetition": "Folgesemester",
    "recommended_prerequisites": "",
    "content": "Der thematische Schwerpunkt wird jeweils vom ausrichtenden Lehrstuhl vorgegeben. Er orientiert sich an aktuellen Forschungsthemen der Lehrstühle der Bioinformatik (z.B. -omics Datenanalyse, System-biologie, Analyse und Interpretation biologischer Netzwerke, Analyse von Proteinstruktur- und Proteinfunktionsdaten, genetisch bedingte Krankheiten) und an aktuellen Forschungsfragestellungen der Bioinformatik (z.B. der Sequenzierung des menschlichen Genoms, dem Aufkommen neuer Techniken wie DNA-Chips oder der neuen Generation von Genom- und Transkriptom- Sequenzierung und der Veröffentlichung neuer umfassender Datensätze wie ENCODE, Epigenomics Roadmap und TCGA). Themen sind auch die Vorbereitung und Beteiligung an internationalen Bioinformatikwettbewerben wie CASP (Proteinstrukturvorhersage), BioCreative (Text Mining), DREAM (Analyse von Netzwerken, Expression und komplexer Krankheiten).",
    "learning_outcomes": "Nach der Teilnahme am Modul sind die Studierenden in der Lage, sich eigenständig und systematisch im Team in ein klar umrissenes Forschungsthema einzuarbeiten, das daraus resultierende Forschungsprojekt im Detail sowohl inhaltlich zu spezifizieren als auch IN2370: Masterpraktikum Bioinformatik | Master Lab Course Bioinformatics zeitlich zu planen, dieses dann dementsprechend umzusetzen (ggf. Anpassungen am Plan vorzunehmen) und die erzielten Ergebnisse zu bewerten und zu diskutieren sowie die Resultate zu präsentieren. Die Studierenden können selbständig und in Gruppen die Thematik und den biologischen bzw. biotechnologischen Hintergrund eines Forschungsthemas (wie z.B. Proteinstruktur- und Funktionsvorhersage, Epigenomics, Trankriptomics, Analyse von NGS-Daten, Vorhersage und Analyse regulatorischer Netzwerke, genetisch bedingte Krankheiten) mithilfe eines aktuellen Literaturstudiums und Vorträgen erarbeiten. Sie können daraus ein konkretes Forschungsprojekt spezifizieren, die zugehörigen Meilensteine samt Zeitplan definieren, so dass diese in einem Team von 3-5 Mitgliedern in der vorgegeben Zeit bearbeitet werden können. Die Studierenden können die für die Lösung benötigten bioinformatischen Methoden (wie z.B. das Mapping, differentielle Expression, Splicing Detection, Enrichment Analysis und Pathway Mapping für NGS) und existierende Softwaretools bzw. Softwareplattformen recherchieren, bewerten, auswählen, anwenden und in der Regel an die gegebenen Anforderungen anpassen bzw. neu entwerfen und darauf aufbauend, ein Programmpaket zur Lösung entwickeln. Die Studierenden können die erzielten Ergebnisse evaluieren, zugehörige Gold-Standards auswählen, die Ergebnisse daran validieren sowie diese Resultate in einem Vortrag präsentieren und im Rahmen eines wissenschaftlichen Diskurses diskutieren und diese dann im Stile einer wissenschaftlichen Publikation zusammenfassen.",
    "teaching_methods": "Präsentationen, Seminar, Hausaufgaben zum Selbststudium, Rechnerpraktikum, Projektarbeit, Gruppenarbeit, wissenschaftliche Ausarbeitung. Während der Vorlesungszeit gibt es wöchentliche IN2370: Masterpraktikum Bioinformatik | Master Lab Course Bioinformatics Präsenzveranstaltungen mit Vorträgen und Hausaufgaben zum Verständnis und Vorbereitung der einzelnen Forschungsprojekte. In den Vorträgen berichten die Studierenden zum einen über die Ergebnisse des Literaturstudiums und zum anderen über die Spezifikation und die Fortschritte der einzelnen Forschungsprojekte. In der vorlesungsfreien Zeit kommt ein Blockteil (etwa 3 Wochen) mit Rechnerpraktikum hinzu, in dem die verschiedenen Forschungsprojekte in Kleingruppen bearbeitet werden. Die Ergebnisse der einzelnen in den Gruppen spezifizierten Forschungsprojekte werden in einem Gruppenvortrag präsentiert und diskutiert sowie in der wissenschaftlichen Ausarbeitung auf dem Niveau einer wissenschaftlichen Publikation nach den Standards des Fachs dokumentiert.",
    "media": "",
    "literature": "Aktuelle Fachartikel zum jeweiligen Thema",
    "lv_sws_lecturer": "Prof. Dr. Burkhard Rost Prof. Dr. Ralf Zimmer\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nMasterpraktikum Bioinformatik (IN2370) (Praktikum, 10 SWS)\nKoludarov I, Marquet C, Olenyi T, Richter L, Rost B, Senoner T\nMasterpraktikum Bioinformatik (Praktikum, 10 SWS)\nList M [L], List M\nMasterpraktikum Bioinformatik (Praktikum, 10 SWS)\nWilhelm M [L], Wilhelm M"
  },
  {
    "module_id": "IN2374",
    "title": "PREP: Practical Research Experience Program",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 10,
    "hours_total": 300,
    "hours_self_study": 210,
    "hours_presence": 90,
    "examination_achievements": "Projektarbeit. In der Projektarbeit weisen die Studierenden nach, dass sie die aktuellen informatikspezifischen Techniken, Methoden und Systeme, die für die Lösung der Projektfragestellung benötigt werden, anwenden können. Sie können die Projektanforderungen in einem wissenschaftlichen Umfeld in Zusammenarbeit mit Fachexpertinnen und -experten analysieren, einen Lösungsentwurf modellieren und daraus ein System erstellen und testen. Die Ergebnisse der Arbeiten werden schriftlich dokumentiert und ggf. mündlich präsentiert. Der jeweilige Dozent / die jeweilige Dozentin gibt vor Beginn bekannt, wie die einzelnen Leistungen zur Ermittlung der Note gewichtet werden.",
    "repetition": "",
    "recommended_prerequisites": "In diesem Modul wird ein wissenschaftliches Projekt vom Studenten / von der Studentin unter\nAnleitung einer erfahrenen Wissenschaftlerin / eines erfahrenen Wissenschaftlers selbständig\nbearbeitet. Daher setzt dieses Modul erweiterte Grundkenntnisse im jeweiligen Fachgebiet voraus.\nAufgrund dessen können nur solche Studierende dieses Modul wählen, die in ein einschlägiges\nUniversitätsstudium eingeschrieben sind und darin mindestens vier Fachsemester erfolgreich\nabsolviert haben.",
    "content": "Das PREP Modul ist ausschließlich von solchen Studierenden wählbar, die Teilnehmer am PREP Austauschprogramms der TUM sind. Für alle anderen Studierenden ist dieses Modul nicht wählbar. Das PREP Modul wird als Blockveranstaltung abgehalten, die Anfang Juni beginnt und Mitte August endet. Es beinhaltet die individuell geplante Mitarbeit von Studierenden in einem IN2374: PREP: Practical Research Experience Program | PREP: Practical Research Experience Program wissenschaftlichen Arbeitskreis. Hierbei werden die Studierenden eine Teilaufgabe aus einem wissenschaftlichen Projekt unter Anleitung, selbständig bearbeiten. Das Projekt wird von einer erfahrenen Wissenschaftlerin / einem erfahrenen Wissenschaftler erstellt und die Studierenden bewerben sich im Rahmen eines Auslandsaufenthalts auf die Durchführung des Projekts. Die Studierenden werden während der Projektlaufzeit in die jeweilige Arbeitsgruppe integriert und von einer erfahrenen Wissenschaftlerin / einem erfahreneren Wissenschaftler direkt betreut. Die betreuende Person erklärt zunächst das Projekt, stellt es in einen größeren Zusammenhang, erklärt die Einzelheiten und umreißt schließlich eine Teilaufgabe, die der Studierende innerhalb der Praktikumszeit bearbeiten soll. Der Umfang des Projekts ist von der betreuenden Person so bemessen, dass innerhalb der zur Verfügung stehenden Zeit ein präsentierbares Ergebnis erreicht werden kann. Bei der Durchführung des Projekts arbeiten die Studierenden in der Regel selbstständig an ihrem Projekt. Sie müssen daher ihr Arbeitspensum am jeweiligen Projektfortschritt ausrichten und die Fähigkeit zu selbstreguliertem Lernen demonstrieren. Das PREP-Modul wird von verschiedenen Lehrstühlen angeboten, so dass die Fachlichkeit der Anwendung aus dem Gebiet des jeweiligen Lehrstuhls stammt (z.B. Datenbanken, Compilerbau, Informationssysteme, Netzwerke, Groupware, Grafik, Robotik, Bilderkennung).",
    "learning_outcomes": "Nach der Teilnahme an dieser Modulveranstaltung sind die Studierenden in der Lage, im Rahmen eines Forschungsprojekts in einem anspruchsvollen Informatik-Fachgebiet methodisch sauber Informatikkonzepte und -lösungen zu erarbeiten, welche aus dem Gebiet des jeweiligen Lehrstuhls stammen (z.B. Datenbanken, Informationssysteme, Netzwerke, Groupware, Grafik, Robotik, Bilderkennung). Sie sind fernerhin in der Lage ihre erreichten Ergebnisse zu überprüfen und zu bewerten. Schließlich wird es ihnen möglich sein, ihre Arbeitsergebnisse einem Fach- oder Laienpublikum vorzustellen sowie unter Anleitung ihre Ergebnisse in Form wissenschaftlicher Veröffentlichungen publikationsreif zu präsentieren. Neben reinen Fachkompetenzen wird den Studierenden ein hohes Maß an Methodenkompetenz vermittelt. Mit Hilfe dieser, vom Fach unabhängig einsetzbaren Kenntnisse und Fähigkeiten werden die Studierenden in die Lage versetzt, komplexe Aufgaben und Probleme selbständig zu bearbeiten, Problemlösefähigkeiten einzuüben, selbstreguliert zu Lernen und ihre Fremdsprachenkenntnisse zu verbessern. In Bezug auf ihre Sozialkompetenz werden sie über Fertigkeiten verfügen mit ihren Kolleginnen und Kollegen, ihren Betreuerinnen und Betreuern zu kommunizieren, mit ihnen zu kooperieren sowie individuelle oder gemeinsame Ziele zu verwirklichen. Sie werden die Fähigkeiten besitzen ihre Begabung, Motivation und Leistungsbereitschaft zu entfalten und hierdurch die Entwicklung einer individuellen Persönlichkeit voran zu bringen.",
    "teaching_methods": "Das PREP Modul findet in Form eines Projektes statt, bei dem die Studierenden einen Teilbereich einer wissenschaftlichen Fragestellung unter Anleitung eigenverantwortlich bearbeiten. Sie entwerfen, implementieren und testen ein Informatik-System aus dem Fachgebiet des jeweiligen Lehrstuhls. Jedem Studierenden steht während des Praktikums ein erfahrener Wissenschaftler / eine erfahrene Wissenschaftlerin als direkter Ansprechpartner zur Verfügung. Hierdurch ist zu IN2374: PREP: Practical Research Experience Program | PREP: Practical Research Experience Program jeder Zeit zu gewährleistet, dass auftretende Fragen beantwortet und Probleme im direkten Gespräch gelöst werden können.",
    "media": "Wird von der betreuenden Person bei Projektstart bekanntgegeben.",
    "literature": "Wird von der betreuenden Person bei Projektstart bekanntgegeben.",
    "lv_sws_lecturer": "Thürey, Nils; Prof. Dr.-Ing.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2379",
    "title": "Fortgeschrittene Datenverarbeitungs- und Visualisierungstechniken",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 105,
    "hours_presence": 75,
    "examination_achievements": "Prüfungsleistung (benotet): Die Prüfung erfolgt als schriftliche Klausur von 90 min, in denen die Studierenden ihre Fähigkeiten zeigen, Techniken und Methoden zu Datenverarbeitung zu evaluieren, Daten zu analysieren und Visualisierungstechniken zur Darstellung ihrer Ergebnisse zu verwenden. Darüber hinaus zeigen sie ihre Fähigkeiten prädiktive Modelle zu erstellen und anzuwenden. Die Studierenden evaluieren die Vor- und Nachteile von NoSQL-Datenbanken im Hinblick auf die gegebenen Fragestellungen. Sie sind ebenso dazu in der Lage, ihre Lösungen in Form von (Pseudo-)Code auszudrücken.",
    "repetition": "",
    "recommended_prerequisites": "Datenbank- und Programmierkenntnisse auf Bachelor Niveau.",
    "content": "- Vektorisierte Operationen\n+ Einführung in Python + Vektorisierte Operationen + Effekt Vektorisierung auf Berechnungen\n- Datenbanke & Visualisierung\n+ Biologische Datenbanken + Integration von biologischen Daten + Verarbeitung von biologischen Daten + Visuelle Datenexploration IN2379: Fortgeschrittene Datenverarbeitungs- und Visualisierungstechniken | Advanced Data Handling and Visualization Techniques + Vorhersage basierend auf biologischen Daten + Jenseits von SQL: Dokumenten-orientierte Datenbanke + Jenseits von SQL: Graphdatenbanken + Verteilte Datenverarbeitung\n- Kommunikation der Ergebnisse\n+ Laufzeitanalyse des Codes und Optimierung von Engpässen + WWW: Bereitstellung eines online-Dienstes + Interaktive Visualisierungstechniken",
    "learning_outcomes": "Nach dem erfolgreichen Absolvieren des Moduls sind die Studenten in der Lage:\n- eine Pipeline für die Datenextraktion und -integration aus Biologischen Ressourcen zu erstellen\n- Techniken anzuwenden, um die Daten effizient zu verarbeiten\n- die Daten zu analysieren und entsprechende Visualisierungen ihrer Analysen zu erzeugen\n- Visualisierungstechniken anzuwenden und zu evaluieren\n- angemessene NoSQL Lösungen im Hinblick auf ihre Daten auszuwählen",
    "teaching_methods": "Die Studierenden erwerben in der Vorlesung das Verständnis von Konzepten, Techniken und Methoden zur Datenextraktion, -verarbeitung und -visualisierung. Sie bewerten ihr erworbenes Wissen durch eine Überprüfung der Folien und in Diskussionen mit den Lehrenden. Die Studierenden entwickeln und wenden ihre Fähigkeiten in den Übungen auf praktische Probleme an. In den Hausaufgaben entwickeln die Studierenden ihre Fähigkeiten gegebene Aufgaben zu analysieren und entsprechende Lösungen zu entwickeln.",
    "media": "Tafelanschrieb, Übungsblätter, Präsentationen",
    "literature": "- Travis E. Oliphant: Guide to NumPy, 2nd ed., CreateSpace, 2015\n- Wes McKinney: Python for Data Analysis: Data Wrangling with Pandas, NumPy, and Ipython, 2nd\ned., O'Reilly Media, 2017\n- Paul M. Selzer, Richard J. Marhöfer, Oliver Koch: Applied Bioinformatics, 2nd. ed., Springer, 2018",
    "lv_sws_lecturer": "Rost, Burkhard; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nFortgeschrittene Datenverarbeitungs- und Visualisierungstechniken (IN2379) (Vorlesung, 2 SWS)\nNechaev D, Richter L\nÜbung Fortgeschrittene Datenverarbeitungs- und Visualisierungstechniken (IN2379) (Übung, 3\nSWS)\nNechaev D, Richter L\nIN2379: Fortgeschrittene Datenverarbeitungs- und Visualisierungstechniken | Advanced Data Handling and Visualization\nTechniques"
  },
  {
    "module_id": "IN2381",
    "title": "Einführung in Quantum Computing",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer 90-minütigen schriftlichen Klausur erbracht. Erlaubte Hilfsmittel: ein DIN-A4-Blatt (beidseitig) mit eigenen Notizen; sowohl handschriftlich als auch digital vorbereitet und ausgedruckt ist zulässig. Aufgaben zum grundlegenden mathematischen Formalismus könnten etwa die Berechnung des quantenmechanischen Zustandvektors nach Durchlaufen eines experimentellen Aufbaus erfordern, oder die Herleitung eines mathematischen Zusammenhangs. Fragen zu Quantenschaltungen überprüfen, inwieweit die Studierenden einzelne Bausteine (z.B. Pauli- Matrizen oder Hadamard-Gatter) verstanden haben und zum Entwurf (einfacher) Schaltungen einsetzen können. Die Prüfung frägt das Verständnis von Quantenalgorithmen z.B. durch eine Aufgabe ab, in der die Studierenden die Anzahl benötigter Operationen analysieren sollen. Das Erreichen einer vorgegebenen Anzahl der maximalen Hausaufgabenpunkte kann mit einem Notenbonus von einer Notenstufe bei der Bewertung der Klausur belohnt werden. Die genauen Regelungen hierzu werden rechtzeitig zu Beginn der Vorlesungen bekannt gegeben.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Lineare Algebra, z.B. MA0901 Lineare Algebra für Informatik",
    "content": "- Mathematischer Formalismus und Grundlagen der Quantenmechanik\n- Quantenschaltungen\n- Quantenteleportation\n- Bellsche Ungleichung\n- Grundlegende Quantenalgorithmen\nIN2381: Einführung in Quantum Computing | Introduction to Quantum Computing",
    "learning_outcomes": "Nach erfolgreicher Teilnahme an diesem Modul beherrschen die Studierenden die Grundlagen und den mathematischen Formalismus von Quantum Computing. Sie sind in der Lage, Quanten- Algorithmen, wie z.B. Grover-Suche, zu analysieren und Quantenschaltungen für einfache Algorithmen zu entwickeln. Die Studierenden können entsprechende Software-Tools (wie Qiskit oder Cirq) anwenden, sowie mögliche Einsatzgebieten von (zukünftigen) Quantencomputern einschätzen.",
    "teaching_methods": "Mit Hilfe des Tafelvortrags werden die Grundlagen und des mathematischen Formalismus von Quantum Computing eingehend vermittelt, und durch die Folienpräsentationen aktuelle technische Entwicklungen aufgezeigt. Die begleitenden Übungen dienen zum Verständnis der Vorlesungsinhalte und zum kreativen Anwenden der erworbenen Kenntnisse.",
    "media": "Tafelanschrieb, Folienpräsentation, online Programmierung",
    "literature": "M. A. Nielsen, I. L. Chuang: Quantum Computation and Quantum Information. Cambridge\nUniversity Press (2010)",
    "lv_sws_lecturer": "Bungartz, Hans-Joachim; Prof. Dr. rer. nat. habil.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nEinführung in Quantum Computing (IN2381) (Vorlesung mit integrierten Übungen, 4 SWS)\nMendl C [L], Hack P, Huang Q, Mendl C"
  },
  {
    "module_id": "IN2382",
    "title": "Visuelle Programmierung in der Spielebranche",
    "level": "Bachelor",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Unregelmäßig",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 105,
    "hours_presence": 45,
    "examination_achievements": "Während des Semesters entwickeln die Studierenden ein Projekt hauptsächlich mit Hilfe von visueller Programmierung und teilweise mit klassischen, industrieüblichen Programmiersprachen, um das Gelernte anzuwenden. Die Lerninhalte werden kontinuierlich im Rahmen des Praktikums mit Hilfe von zweiwöchentlichen Aufgaben (5-7) evaluiert. Das Projekt wird in Gruppenarbeit (3-4er Gruppen) in der zweiten Semesterhälfte erarbeitet und am Ende des Semesters bewertet. Die finale Note ergibt sich aus der Punktzahl der Aufgaben (25%), der Komplexität der implementierten Mechaniken im Projekt (25%), der Codequalität hinsichtlich Erweiterbarkeit und deren Schnittstellen zu klassischen Programmiersprachen (25%) und der Abschlusspräsentation des Projektes (15min, 25%) zum Semesterende.",
    "repetition": "",
    "recommended_prerequisites": "IN0031 Einführung in die Informatik für Games Engineering\nIN0038 Echtzeit-Computergrafik\nIN0039 Praktikum: Echtzeit-Computergrafik\nGrundkenntnisse in C++",
    "content": "Visuelle Programmierung gewinnt mehr und mehr an Bedeutung als Werkzeug im interdisziplinären Kontext der Spieleentwicklung. Anhand von aktuellen Beispielen wird den Studenten die Entwicklung von Computerprogrammen mit visueller Programmierung, deren Rolle in industrieüblichen Games-Projekten und andere strukturelle und Software-architektonische Standards erläutert. Als Entwicklungsumgebung kommen die Unreal Engine, sowie Visual Studio zum Einsatz. Spezieller Fokus liegt hier auf: IN2382: Visuelle Programmierung in der Spielebranche | Visual Programming in the Game Industry\n- Funktionsweisen und Konzepte von Graph-basierten Programmen\n- Event-basierte visuelle Programmierung\n- Shader\n- State-Machines\n- Behavior-Trees\n- Schnittstellen zwischen textbasierter und visueller Programmierung\n- Bewährte Methoden für Workflow-orientierte Projektsetups\n- Einblicke in gängige Game Engines (z.B. Unreal Engine 4)",
    "learning_outcomes": "Nach Teilnahme an diesem Modul ist der Studierende in der Lage, komplexe Zusammenhänge mithilfe von visueller Programmierung zu verstehen und zu erklären. Außerdem können visuelle Programme bewertet werden und in Verbindung mit klassischer Programmierung können eigenständig Lösungsansätze für unterschiedliche Probleme entworfen werden.",
    "teaching_methods": "Praktikum mit Einzel- und Gruppenarbeit. Das wöchentliche Praktikum dient zum Erlenen und Verstehen der Konzepte, sowie deren Bedeutung für den Einsatz in Anwendungen. Die anschließende Projektarbeit dient zur Vertiefung und Anwenden der gelernten Konzepte.",
    "media": "PowerPoint, Bücher, Videos, Computer, interaktives Problemlösen",
    "literature": "- Richartz, Jonas : Spiele entwickeln mit Unreal Engine 4, Hanser 2018, 978-3-446-45369-2\n- Sanders, Andrew : An introduction to Unreal engine 4, CRC Press, Taylor & Francis Group 2017,\n978-1-4987-6509-1\n- Chorafas, Dimitris N.: Visual programming technology, McGraw-Hill 1997, 0070116857\n- Gregory, Jason, Game engine architecture, CRC Press, 2019, 9781138035454",
    "lv_sws_lecturer": "Klinker, Gudrun Johanna; Prof. i.R.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2385",
    "title": "Funktions- und Informationssicherheit",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 3,
    "hours_total": 90,
    "hours_self_study": 60,
    "hours_presence": 30,
    "examination_achievements": "Exam (60 minutes) or oral exam (30 minutes) as best possible form of examination for a top-down class. No tutorials nor exercises.",
    "repetition": "",
    "recommended_prerequisites": "Helpful: IT Security (IN2209), Functional Safety (IN2247), Security Engineering (IN 2178)",
    "content": "Traditionally, cyber-physical systems are developed with a strong focus on functional safety requirements. Because of ubiquitous connectivity, information security concerns have become increasingly important. In this module, we study differences and similarities between functional safety and information security in terms of concepts, methods, and standards. The goal of this module is to understand the commonalities between methods for assuring safety and security, and to be able to apply them to small example problems. 1. Terminology and fundamental concepts 2. Functional Safety and safety of the intended functionality: Analysis (HARA, HAZOP, FMEA, FTA; coverage) and construction (fail safe/operational; redundancy; diversity). Safety Cases. Standards ISO26262 and 21448. 3. Information Security: Analysis (attacker models, STRIDE, TARA) and construction (architecture, mechanisms, security-by-design). Connection of CPS to the cloud. 4. Organizational approaches: ISO 21434 („Road vehicles – Cybersecurity engineering); Secure Development Lifecycle 5. Certification IN2385: Funktions- und Informationssicherheit | Safety and Security for Cyber-Physical Systems 6. Safety and Security: Commonalities and differences",
    "learning_outcomes": "The students understand fundamental concepts and approaches at implementing and arguing about safety and security in the CPS domain. They know basic forms of structured reasoning in this domain and understand commonalities and differences between safety and security arguments and their completeness. They are capable of analyzing abstract CPS w.r.t. safety and security.",
    "teaching_methods": "Traditional lecture style. The students shall learn about commonalities and differences between safety and security, where the safety domain is strictly regulated. Respective basic concepts and insights can best be taught in a top-down manner.",
    "media": "Slides for the class and as a script",
    "literature": "Ross Anderson, Security Engineering\nIsar Tarandach, Matthew Coles, Developer-Enabled Threat Modeling\nNancy Leveson, Engineering a Safer World: Systems Thinking Applied to Safety\nStandards ISO26262, ISO21448, ISO21434",
    "lv_sws_lecturer": "Pretschner, Alexander; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2386",
    "title": "Cloud-Based Data Processing",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "The exam takes the form of a 90 minutes written test or an oral exam in case of low number of participants. Assignments that check whether the student can identify the key requirements for a data processing in the cloud and design a scalable system that can meet them for a given scenario.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0008 Fundamentals of Databases\nIN0009 Basic Principles: Operating Systems and System Software\nIN0010 Introduction to Computer Networking and Distributed Systems",
    "content": "Introduction * Intro to Data-centers * Latest trends in Cloud Computing Fundamentals for managing distributed data * Data replication and quorums * Data partitioning * Fault-tolerance and unreliable components * Distributed system model * Consensus protocols and coordination services * Consistency models and distributed key value stores Design of cloud-based data processing systems IN2386: Cloud-Based Data Processing | Cloud-Based Data Processing * Distributed transactions * Cloud-native OLTP databases * Cloud-native data warehouses * Dataflow computing (i.e., derived data) * Cloud-scale data streaming systems * Query-as-a-Service (QaaS) (serverless data processing) * Resource management and scheduling Other related topics: * Novel data storage formats (e.g., data lakes, data-mash, etc.) * Security and Privacy for data processing in the cloud * Accelerators and impact of new hardware technology",
    "learning_outcomes": "Upon successful completion of this module, students are able to: * define the requirements and challenges when architecting, building and managing a large-scale data processing service in the cloud. * use the theoretical foundations of distributed algorithms to construct the building blocks for a scalable data system design in relation to distributed storage, coordination and computation. * understand and analyze the different trade-offs when designing scalable data processing systems that need to run in the public cloud. * design, implement and evaluate a three-tier system using current cloud technologies. * identify the scalability bottlenecks and vulnerabilities of a complex computer system.",
    "teaching_methods": "Lectures, tutorials, problems for individual study: The module consists of lectures and accompanying tutorials. The contents of the course will be primarily presented in the form of lectures and discussions of real-world system designs. Solutions to exercises will be discussed in the tutorials.",
    "media": "Lecture with animated slides",
    "literature": "• Designing Data-Intensive Applications by Martin Kleppmann\n• Distributed Systems by Maarten van Steen, Andrew S. Tanenbaum\n• Principles of Distributed Database Systems by M. Tamer Ozsu, Patrick Valduriez",
    "lv_sws_lecturer": "Kemper, Alfons; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nCloud-Based Data Processing (IN2386) (Vorlesung mit integrierten Übungen, 5 SWS)\nGiceva Makreshanska J, Georgoulakis Misegiannis M, Götz T\nIN2386: Cloud-Based Data Processing | Cloud-Based Data Processing"
  },
  {
    "module_id": "IN2388",
    "title": "Tensornetzwerke",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Unregelmäßig",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "The assessment is by means of a written exam of 90 minutes, or a 20 minute oral examination. Problems on the underlying approximation theory test whether students can apply the acquired knowledge and methods to a new domain. Problems related to the graphical representation may ask students to express an algorithm stated in matrix notation into a graphical form. The exam assesses the knowledge of tensor network methods for simulating quantum systems for example by asking them to tailor an algorithm for a given quantum Hamiltonian. Reaching a certain fraction of the maximum number of homework points can be rewarded by a grade step bonus (“eine Notenstufe”) in the evaluation of the exam. The exact details are timely announced at the beginning of the lecture.",
    "repetition": "Folgesemester",
    "recommended_prerequisites": "• MA0901 Linear Algebra for Informatics\n• MA0902 Analysis for Informatics\n• IN0018 Discrete Probability Theory\n• Knowledge about quantum mechanics or computing helpful (but not a formal prerequisite)",
    "content": "- Fundamentals and graphical representation of tensor networks\n- Mathematical approximation theory\n- Backpropagation through tensor network operations\n- Simulating strongly correlated quantum systems and digital quantum computers\n- Probability distribution sampling using tensor networks\nIN2388: Tensornetzwerke | Tensor Networks",
    "learning_outcomes": "After successful completion of this module, students are familiar with the mathematical formalism and graphical notation for tensor networks. They can assess and apply tensor network approaches for approximating high-dimensional data. They understand why tensor network methods are suitable for simulating strongly correlated quantum systems, and are familiar with corresponding algorithms.",
    "teaching_methods": "Mit Hilfe des Tafelvortrags wird der mathematische Formalismus sowie die graphische Repräsentation von Tensornetzwerkmethoden und –algorithmen eingehend vermittelt. Die begleitenden Übungen dienen zum Verständnis der Vorlesungsinhalte und zum kreativen Anwenden der erworbenen Kenntnisse.",
    "media": "Tafelanschrieb oder Tablet, Folienpräsentation",
    "literature": "W. Hackbusch, S. Kühn: A new scheme for the tensor representation. J. Fourier Anal. Appl. 15,\n706 (2009)\nM. Espig, W. Hackbusch, S. Handschuh, R. Schneider: Optimization problems in contracted tensor\nnetworks. Comput. Visual Sci. 14, 271 (2011)\nU. Schollwöck: The density-matrix renormalization group in the age of matrix product states.\nAnnals of Physics 326, 96 (2011)\nR. Orús: Tensor networks for complex quantum systems. Nature Reviews Physics 1, 538 (2019)\nJ. Haegeman, Ch. Lubich, I. Oseledets, B. Vandereycken, F. Verstraete: Unifying time evolution\nand optimization with matrix product states. Phys. Rev. B 94, 165116 (2016)\nL. Vanderstraeten, J. Haegeman, F. Verstraete: Tangent-space methods for uniform matrix product\nstates. SciPost Phys. Lect. Notes 7 (2019)\nH.-J. Liao, J.-G. Liu, L. Wang, T. Xiang: Differentiable programming tensor networks. Phys. Rev. X\n9, 031041 (2019)",
    "lv_sws_lecturer": "Mendl, Christian; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nTensor Networks (IN2388) (Vorlesung mit integrierten Übungen, 4 SWS)\nMendl C [L], Huang Q, Le I, Mendl C, Milbradt R\nIN2388: Tensornetzwerke | Tensor Networks"
  },
  {
    "module_id": "IN2389",
    "title": "Advanced Deep Learning for Computer Vision: Dynamic Vision",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester/Sommersemester",
    "credits": 8,
    "hours_total": 240,
    "hours_self_study": 165,
    "hours_presence": 75,
    "examination_achievements": "- Schriftliche Prüfung von 60 Minuten am Ende der Veranstaltung\n- Die Vorlesung wird Leseaufgaben (z.B. vom DeepLearning Buch und aktuellen CVPR/ICCV/\nECCV Arbeiten) beinhalten.\n- Nach jeder praktischen Einheit ist der geschriebene funktionierende Code dem Lehrassistenten\nfür die Bewertung zur Verfügung zu stellen. Die Studierenden bekommen einen Bonus, wenn sie alle praktischen Aufgaben erfolgreich fertigstellen.\n- In der schriftlichen Prüfung werden die Theoriegrundlagen der Vorlesungseinheiten abgefragt; die\nschriftliche Pruefung hat einen Gesamtanteil von 40% der Gesamtnote\n- Zusätzlich zur schriftlichen Prüfung werden die Projektergebnisse bewertet mit einem\nGesamtanteil von 60%. Die Projekte werden auf einer (zwei)wöchigen Basis bewertet; Berichte (33.33%) und Praesentatationen (33.33%) der Studenten, sowie die erbrachten Projektergebnisse; i.e., Code/Submission (33.33%)",
    "repetition": "Semesterende",
    "recommended_prerequisites": "MA0902 Analysis für Informatiker\nMA0901 Lineare Algebra für Informatiker\nIN2346 Introduction to Deep Learning (expert knowledge required!)\nIN2375 Computer Vision 3: Detection, Segmentation, and Tracking\nDies ist die weiterführende Veranstaltung von Deep Learning mit einem speziellen Fokus auf\nComputer Vision für Video Analyse. Der Kurs „Introduction to Deep Learning“ ist Voraussetzung.\nIN2389: Advanced Deep Learning for Computer Vision: Dynamic Vision | Advanced Deep Learning for Computer Vision:\nDynamic Vision",
    "content": "Note, this lecture is closely related (and mutually exclusive) to the lecture “Advanced Deep Learning for Computer Vision: Visual Computing”. The two lectures share some theoretical content, but the “Dynamic Vision” module provides a clear focus on video analysis tasks, which is especially important for the practical part in the form of a semester-long project. Common lectures with “ADL4CV: Visual Computing” lecture:\n- Recap of Neural Networks and CNNs\n- Advanced Auto-encoders: Probabilistic approaches and the mathematical foundations (e.g.,\nvariational auto-encoders)\n- Generative Adversarial Networks (from Goodfellow to CycleGANs and Progressive GANs)\n- Autoregressive Networks and their parallelization\n- Probabilistic vs deterministic generative methods\n- Graph neural networks\n- Transformers\n- Open Problems in Deep Learning for Computer Vision\nUnique lectures for this module:\n- Siamese neural networks and deep metric learning\n- Visualization techniques\n- Multi-dimensional CNNs: spatio-temporal neural networks.\n- Active learning and semi-supervised learning",
    "learning_outcomes": "Upon completion of this module, students will have acquired extensive theoretical concepts behind advanced architectures of neural networks, in particular in the context of video analysis for computer vision tasks. In addition to the theoretical foundations, a significant aspect lies on the practical realization and training of neural networks.",
    "teaching_methods": "The lectures will provide extensive theoretical aspects of neural networks and in particular deep learning architectures, specifically for advanced methods in the field of Computer Vision for video analysis. The practical sessions will be key, students shall get familiar with Deep Learning through hours of training and testing. They will work with PyTorch and implement advanced network architectures. The project will have a clear focus on video analysis, following the research topics of the group, including the following topics:\n- Multi-object tracking\n- Video object segmentation\n- Trajectory prediction\n- Panoptic segmentation\n- Active learning for videos\n- Video anonymization with GANs\n- Pose estimation\nIN2389: Advanced Deep Learning for Computer Vision: Dynamic Vision | Advanced Deep Learning for Computer Vision: Dynamic Vision We recommend to take a look at the recent list of publications at https://dvl.in.tum.de to get a better idea of recent research projects.",
    "media": "Beamer, Tafel, PC",
    "literature": "- Folien aus der Vorlesung\n- www.deeplearningbook.org",
    "lv_sws_lecturer": "Leal-Taixe, Laura; Prof. Dr.-Ing.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2390",
    "title": "Advanced Deep Learning for Computer Vision: Visual Computing",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester/Sommersemester",
    "credits": 8,
    "hours_total": 240,
    "hours_self_study": 165,
    "hours_presence": 75,
    "examination_achievements": "- Schriftliche Prüfung von 60 Minuten am Ende der Veranstaltung\n- Die Vorlesung wird Leseaufgaben (z.B. vom DeepLearning Buch und aktuellen CVPR/ICCV/\nECCV Arbeiten) beinhalten.\n- Nach jeder praktischen Einheit ist der geschriebene funktionierende Code dem Lehrassistenten\nfür die Bewertung zur Verfügung zu stellen. Die Studierenden bekommen einen Bonus, wenn sie alle praktischen Aufgaben erfolgreich fertigstellen.\n- In der schriftlichen Prüfung werden die Theoriegrundlagen der Vorlesungseinheiten abgefragt; die\nschriftliche Prüfung hat einen Gesamtanteil von 40% der Gesamtnote\n- Zusätzlich zur schriftlichen Prüfung werden die Projektergebnisse bewertet mit einem\nGesamtanteil von 60%. Die Projekte werden auf einer (zwei)wöchigen Basis bewertet; Berichte (33.33%) und Präsentationen (33.33%) der Studenten, sowie die erbrachten Projektergebnisse; i.e., Code/Submission (33.33%)",
    "repetition": "Semesterende",
    "recommended_prerequisites": "MA0902 Analysis für Informatiker\nMA0901 Lineare Algebra für Informatiker\nIN2346 Introduction to Deep Learning (expert knowledge required!)\nDies ist die weiterführende Veranstaltung von Deep Learning mit einem speziellen Fokus auf\nComputer Vision. Der Kurs „Introduction to Deep Learning“ ist Voraussetzung.\nIN2390: Advanced Deep Learning for Computer Vision: Visual Computing | Advanced Deep Learning for Computer\nVision: Visual Computing",
    "content": "Note, this lecture is closely related (and mutually exclusive) to the lecture “Advanced Deep Learning for Computer Vision: Dynamic Vision”. The two lectures share some theoretical content, but the “Visual Computing” module provides a clear focus on visual computing tasks, which is especially important for the practical part in the form of a semester-long project. Common lectures with “ADL4CV: Dynamic Vision” lecture:\n- Recap of Neural Networks and CNNs\n- Advanced Auto-encoders: Probabilistic approaches and the mathematical foundations (e.g.,\nvariational auto-encoders)\n- Generative Adversarial Networks (from Goodfellow to CycleGANs and Progressive GANs)\n- Autoregressive Networks and their parallelization\n- Probabilistic vs deterministic generative methods\n- Graph neural networks\n- Transformer Networks\n- Open Problems in Deep Learning for Computer Vision\nUnique lectures for this module:\n- Multi-dimensional CNNs: from audio to 3D scene environments; 3D vs multi-view CNNs, sparse\nCNNs (e.g., Octrees);\n- Pointer Networks (focus on Scene Understanding, Meshes and 3D Geometry)\n- Neural rendering: From Novel View Point synthesis, Video Generation and Editing\n- Deep Fakes: Creation and Detection\n- CNNs on meshes: learning on structured and unstructured graphs. Mesh data structures and\nderived convolution operators on meshes using differential geometry.",
    "learning_outcomes": "Upon completion of this module, students will have acquired extensive theoretical concepts behind advanced architectures of neural networks, in particular in the context of computer vision tasks in visual computing. In addition to the theoretical foundations, a significant aspect lies on the practical realization and training of neural networks.",
    "teaching_methods": "The lectures will provide extensive theoretical aspects of neural networks and in particular deep learning architectures, specifically for advanced methods in the field of Computer Vision. The practical sessions will be key, students shall get familiar with Deep Learning through hours of training and testing. They will work with PyTorch and implement advanced network architectures. The project will have a focus on visual computing, including the following topics:\n- neural rendering\n- generative neural networks (GANs)\n- neural radiance fields\n- deep fake generation\n- media forensics (forgery detection)\n- scene reconstruction (multi-view, depth sensors, etc.)\nIN2390: Advanced Deep Learning for Computer Vision: Visual Computing | Advanced Deep Learning for Computer Vision: Visual Computing\n- generative geometric models\n- semantic scene understanding (object detection, instance segmentation, semantic segmentation)\n- 3D scene understanding for autonomous driving (e.g., with Lidar/Radar)\n- reinforcement learning (e.g., for 3d modeling, 3d auto-scanning, 3d navigation)\n- natural language processing (NLP) for scene understanding\nWe recommend to take a look at the recent list of publications at https://niessnerlab.org/ to get a better idea of recent research projects.",
    "media": "Beamer, Tafel, PC",
    "literature": "- Folien aus der Vorlesung\n- www.deeplearningbook.org",
    "lv_sws_lecturer": "Nießner, Matthias; Prof. Dr.-Ing.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nAdvanced Deep Learning for Computer Vision : Visual Computing (IN2390) (Vorlesung, 2 SWS)\nNießner M [L], Erkoc Z, Li L, Nießner M, Rössle B, Rozenberszki D, Weitz S"
  },
  {
    "module_id": "IN2392",
    "title": "Machine Learning for 3D Geometry",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 120,
    "hours_presence": 60,
    "examination_achievements": "The exam takes the form of a written test of 90 minutes. Questions assess knowledge of geometry foundations and representations, with a focus on machine learning methods for generative 3D modeling of shapes and scenes, 3D classification, and semantic segmentation. Students demonstrate the ability to analyze deep neural architectures for various 3D data representations such as point or graphs. Students additionally demonstrate familiarity with algorithmic techniques for associating semantic information with 3D objects or scenes, as well as generative models for 3D data. Exam questions will thoroughly cover the lecture content as well as practical content from the exercises and projects of the course.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN2346 Introduction to Deep Learning\nMA0901 Lineare Algebra für Informatiker",
    "content": "Geometric Foundations; Recap of machine learning and graphical models; Shape descriptors, shape similarity, shape segmentation and labeling; Shape modeling, reconstruction, and synthesis; Deep learning for multi-view, volumetric, point cloud, and graph data",
    "learning_outcomes": "Upon completion of this module, students will have gained advanced knowledge of theoretical concepts behind machine learning techniques for 3D geometric data, including deep learning architectures for both discriminative and generative tasks on 3D shapes and scenes. In addition IN2392: Machine Learning for 3D Geometry | Machine Learning for 3D Geometry to the theory, students are introduced to practical implementations of aforementioned approaches and familiarize themselves with them by execution in real-world applications.",
    "teaching_methods": "The lecture provides theoretical knowledge regarding shape and scene analysis by machine learning techniques, including deep learning architectures. Lectures also include discussion of practical applications of these approaches. Exercises will accompany the class as homework for students. In addition to the classes and regular accompanying exercises, the students will work on a final project over the latter 2 months of the course. The final project allows students to demonstrate their learned knowledge with hands-on experience, proposing and executing small research projects (e.g., reconstruction of shapes from a single image, semantic segmentation of 3D scenes, with the opportunity to bring in their own ideas).",
    "media": "Beamer, Tafel, PC",
    "literature": "- Folien aus der Vorlesung",
    "lv_sws_lecturer": "Dai, Angela; Prof. Dr. Ph.D.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nMachine Learning for 3D Geometry (IN2392) (Vorlesung, 2 SWS)\nDai A [L], Dai A, Diller C, Gümeli C, Weitz S\nExercise Machine Learning for 3D Geometry (IN2392) (Übung, 1 SWS)\nDai A [L], Dai A, Weitz S"
  },
  {
    "module_id": "IN2393",
    "title": "Machine Learning for Regulatory Genomics",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 120,
    "hours_presence": 60,
    "examination_achievements": "The students are individually evaluated on a project work by the project supervisors, according to their performance:\n- During the project work (motivation, problem solving\ncapacity, data analysis skills, programming capabilities).\n- At the final presentation (clearness of presentation\nand slides, used methods, achieved results). 10 minutes.\n- In the written report (conciseness, language, used\nmethods). 20 pages maximum. The final mark will be given by the supervisors who attend the final lectures.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Bachelor in mathematics, bioinformatics, computer science,\nphysics, statistics or a related field. One lecture on machine\nlearning (e.g IN2064; MA4802). Strong interest in\nbiological and biomedical research questions.",
    "content": "This is a two-part module: (1) Six lectures introduce biological mechanisms, experimental assays, and computational models for regulatory genomics. The six lectures are supported with modeling exercises in python. This is followed by (2) an eight-week hands-on project. IN2393: Machine Learning for Regulatory Genomics | Machine Learning for Regulatory Genomics The lectures are organized around steps of gene expression:\n- Introduction to gene regulation and sequence-based computational models of gene regulation\n- Transcriptional regulation\n- Chromatin-mediated regulation\n- RNA splicing\n- RNA modification and degradation\n- Translation\nOver these lectures, computational methods are introduced including:\n- Fitting procedures of deep neural network\n- Convolutional Neural Networks\n- LSTM and transformers\n- Embeddings for sequence data\n- Multi-task learning and transfer learning\n- End-to-end learning\n- Analytical and visualisation techniques for model interpretation",
    "learning_outcomes": "Gene expression refers to how cells read the information encoded in genomes. At the end of the module students are able to: 1. Describe major steps of gene expression from accessing DNA to determining protein abundance. 2. Describe genome-wide assays employed to assess various steps of gene expression 3. Describe the concept of massively parallel reporter assays 4. Describe and apply deep learning methods to perform sequence-based predictions 5. Describe and apply the concept of model interpretation 6. Describe and apply the concept of convolutional neural network 7. Describe and apply the concept of transformers 8. Apply deep learning for sequence-based modeling of a genome-wide assay. Evaluate model performance and provide biological interpretation of its application to real data.",
    "teaching_methods": "We design this module as a two-part module (with 4 SWS contact hours per week): (1) Six lectures introduce the students to the most relevant topics and methods for regulatory genomics. This is followed by (2) an eight-week project work where students focus on specific gene regulatory modeling topics in one partner research lab to get hands-on experience. Lectures provide the state-of-the-art of regulatory genomics modeling approaches. These concepts are first applied with in-class tutorials following each lecture. During the project work, these concepts are applied on real biological or biomedical data problems under mentoring of the teaching team. The results of the project work are summarized in a final talk and a written report.",
    "media": "Weekly posted exercises online, slides, script, live demo\nIN2393: Machine Learning for Regulatory Genomics | Machine Learning for Regulatory Genomics",
    "literature": "Goodfellow et al, Deep Learning, MIT press https://www.deeplearningbook.org/\nEraslan et al. Deep learning: New computational modeling techniques for genomics, Nature\nReviews Genetics, 2019",
    "lv_sws_lecturer": "Gagneur, Julien; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nLecture Machine Learning for Regulatory Genomics (IN2393) (Vorlesung, 2 SWS)\nGagneur J [L], Gagneur J, Heinig M\nExercise Machine Learning for Regulatory Genomics (IN2393) (Übung, 2 SWS)\nGagneur J [L], Gagneur J, Heinig M"
  },
  {
    "module_id": "IN2394",
    "title": "Requirements Engineering",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 3,
    "hours_total": 90,
    "hours_self_study": 60,
    "hours_presence": 30,
    "examination_achievements": "The assessment is a written closed-book exam of 60 minutes. Knowledge questions, partly in the form of multiple-choice questions, are used to test whether students can recognize and classify basic terms and concepts. In modeling tasks, students demonstrate their ability to apply the learned concepts in an exemplary fashion. Finally, they analyze a given problem regarding the challenges explained in the lecture and evaluate different solution strategies in this context. The provided exercise sheet is not graded.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0006 Introduction to Software Engineering",
    "content": "Requirements Engineering (RE) as a first and ongoing activity of a development project, is crucial for the success of every project, as its outcome determines the further course of the project. In this activity, the stakeholders are identified. Their goals are analysed and conflicting goals resolved. A variety of elicitation methods and decomposition techniques are applied to deduce concrete requirements. Depending on the context of the project, different methods to formulate these requirements are necessary. Continuous quality control is essential to mitigate the risk of project failure due to ill-formulated or invalid specifications. IN2394: Requirements Engineering | Requirements Engineering Furthermore, non-functional requirements need to be formulated with great care to minimize subjectiveness. One major challenge in the context of RE is to manage permanently occurring change. This change can happen due to moving goals of the stakeholders or changes in the environment of the system under construction. The lecture \"Requirements Engineering\" covers all important topics of Requirements Engineering (RE), especially the RE-Tasks, different types of requirements, requirement extraction, negotiation, documentation, and management. It is shown how the first, mostly informal, requirements are described, concretized, potentially formalized, managed, and evolved. This lecture considers different process models that are used for and within RE. This forms a solid basis for students to become active in both industrial requirements engineering and RE research.",
    "learning_outcomes": "After successful completion of this module, students are familiar with the basic concepts and methods of Requirements Engineering. They have the ability to analyse typical scenarios and identify typical challenges. Furthermore, students can apply and evaluate suitable concepts and methods for concrete problems.",
    "teaching_methods": "Prerecorded videos of the lecture, which features animated slideshows and digital whiteboards, present the central questions and challenges of requirement engineering. The contents of the lecture are illustrated by realistic examples and hands-on case studies. Since the videos are made available online, a repeated study is made possible. A weekly exercise sheet is provided, yet not corrected, for further individual study to deepen the understanding of the concepts explained in the lecture.",
    "media": "Recordings, Animated Slideshow, weekly exercise sheet (not corrected by tutors)",
    "literature": "",
    "lv_sws_lecturer": "Pretschner, Alexander; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nRequirements Engineering (IN2394) (Vorlesung, 2 SWS)\nPretschner A [L], Gregor L, Marson D, Pretschner A"
  },
  {
    "module_id": "IN2395",
    "title": "Legal Data Science and Informatics",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester/Sommersemester",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 120,
    "hours_presence": 60,
    "examination_achievements": "This module focuses on the interdisciplinary application of modern data science / artificial intelligence methods to a predominantly unstructured domain, and hence requires frequent and diverse interaction with the subject matter. The course is open for TUM students from informatics, mathematics, and political science backgrounds. Grading will be based on a written literature survey (with a page limit of 3 pages) and discussion paper on a given topic (40% of the final grade) and a written examination (lasting 100 minutes; 60% of the final grade), both of which will take place at the end of the semester. Students are encouraged to submit questions about weekly reading assignments (i.e. topical publications) ahead of the session, which will be picked up during in-class discussions. Submitting a minimum number of quality reading questions will lead to a grade bonus of 0.3 at the end of the semester.",
    "repetition": "",
    "recommended_prerequisites": "- IN0002: Fundamentals of Programming\n- IN8026: Einführung in die Programmierung mit Python / Introduction to Programming with Python\n(or equivalent; students must be able to autonomously work with Jupyter notebooks in the Python\necosystem)\n- IN0018: Diskrete Wahrscheinlichkeitstheorie / Discrete Probability Theory (or equivalent; students\nmust be able to work with basic concepts from probability and statistics)\n- Willingness/ability to work intensively across disciplines (reading legal text, drafting specifications,\nprogramming, and domain-specific data analysis)\nIN2395: Legal Data Science and Informatics | Legal Data Science and Informatics\n- IN2332: Statistical Modeling and Machine Learning\n- IN2062: Grundlagen der künstlichen Intelligenz / Foundations of Artificial Intelligence",
    "content": "The way lawyers, Judges, corporate legal counsel, government agencies, and businesses engage with legal systems, requirements, and processes is increasingly influenced by technology. Prominent areas of practical interest are the intelligent search and analysis of legal documents, the role of machine learning in supporting legal decision making, and modeling legal processes using expertise encoded in formal rule systems. This module provides an in-depth overview of landmark research and the state of the art in applying data science and artificial intelligence methods to tasks and problems arising in and around the public and private practice of law. Legal decision making, legal data, and legal documents in particular challenge many mainstream modeling and analysis techniques. Hence, the module is intended to be taken by (1) broadly interested students from technical majors interested in challenging interdisciplinary work, and (2) political science / business / law students seeking to enhance their understanding of how new technologies can shape their field. The module consists of a mix of lectures, discussion sessions, and small practical workshops following a thematic progression:\n- Introduction to legal systems, legal reasoning, and the impact of AI on legal practice\n- Basics of machine learning and natural language processing (NLP) (intended as a primer/\nrefresher for nontechnical students; largely tailored to specific legal applications contexts)\n- Case- and rule-based formalisms of legal reasoning\n- Legal data analytics, including case outcome prediction and empirical legal studies\n- Equal treatment imperatives and fair machine learning\n- Applications of NLP on legal text",
    "learning_outcomes": "After completing this module, students will be able to:\n- explain knowledge representation and argumentation formalisms used in AI&Law\n- explain the application of techniques from statistics, applied machine learning, and natural\nlanguage processing to legal data\n- examine and critique experimental work and systems in legal data science/informatics\n- explain the planning, implementation, and evaluation of legal data science/informatics research\nwork",
    "teaching_methods": "Module sessions will cover concepts in an example-driven way through a mix of lectures, guided programming workshops, and discussion of topical research publications that students are expected to read before class. IN2395: Legal Data Science and Informatics | Legal Data Science and Informatics",
    "media": "Slides-based lectures supported by white-/blackboard, possibly some demonstration of\nprogramming/plotting using Jupyter notebooks.",
    "literature": "Reading will consist of landmark and current papers and online publications, predominantly from\nthe fields of AI&Law, LegalTech, Empirical Legal Studies, and related subjects. The list will be\nmade available to students at the start of the module and may be revised over the course of the\nsemester.",
    "lv_sws_lecturer": "Grabmair, Matthias; Prof. Ph.D.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nLegal Data Science and Informatics (IN2395) (Vorlesung, 4 SWS)\nGrabmair M [L], Grabmair M"
  },
  {
    "module_id": "IN2397",
    "title": "Masterpraktikum Computational Science and Engineering",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester/Sommersemester",
    "credits": 10,
    "hours_total": 300,
    "hours_self_study": 210,
    "hours_presence": 90,
    "examination_achievements": "Art der Prüfungsleistung: Projektarbeit Im Modul ist eine Projektarbeit anhand einer spezifischen Anwendung aus dem Bereich des Wissenschaftlichen Rechnens zu erbringen, die in kleinen Teams (Gruppengröße in der Regel drei Studierende) bearbeitet werden. Die Studierenden bearbeiten eine Folge von Teilprojekten, die mehrere unterschiedliche Phasen der Simulationspipeline im Wissenschaftlichen Rechnen abdecken (Modellierung, Diskretisierung, numerische Löser, Software-Entwicklung, parallele Implementierung und Optimierung, Simulationsläufe und Auswertung der Ergebnisse, Einbettung in Workflows). Dabei können sich einzelne Teams auch nur mit ausgewählten (unter den Teams unterschiedlichen) Phasen der Simulationspipeline beschäftigen. Die in den Teilprojekten realisierten Ergebnisse (Softwarekomponenten und -spezifikationen, Tools und Workflows, Simulationsszenarien, etc.) werden eingereicht und in den Präsenzveranstaltungen diskutiert. Projektergebnisse werden dokumentiert und in einer Form eingereicht, dass die erzielten Ergebnisse reproduzierbar sind. Die Studierenden demonstrieren mit den eingereichten Ergebnissen die methodisch saubere Entwicklung der Simulationsanwendungen und -pipelines. In der Diskussion im Plenum weisen die Studierenden nach, dass sie die wesentlichen Aspekte erfasst haben, ihre Vorgehensweise und Ergebnisse in anschaulicher, verständlicher Weise vortragen sowie kritisch-reflektierend hinterfragen können. In den eingereichten Lösungen dokumentieren sie die Zuständigkeiten und Zusammenarbeit innerhalb des Teams, und stellen gemeinsam mit der Diskussion ihrer Arbeit sicher, dass die individuellen Beiträge aller Studierenden erkennbar sind. IN2397: Masterpraktikum Computational Science and Engineering | Advanced Practical Course Computational Science and Engineering Für jedes Teilprojekt wird die Leistung der Studierenden einzeln anhand einer zu Beginn der Veranstaltung bekannt gegebenen Punkteskala bewertet. Dabei kann ein Teilprojekt höher bewertet werden, wenn dieses z.B. als Abschlussprojekt einen entsprechend umfangreicheren Arbeitsaufwand erfordert. Die Ermittlung der Gesamtnote für das Modul ergibt sich aus der Gesamtpunktzahl für die Teilprojekte.",
    "repetition": "Folgesemester",
    "recommended_prerequisites": "Je nach Ausprägung eventuell Vorkenntnisse aus Wahlbereich nötig.",
    "content": "- Umsetzung bzw. Einsetzen einer größeren Simulations-Softwareanwendung oder -teilanwendung\nim Team\n- Anwendungsspezifische Methoden und Systeme nach aktuellem Stand der Technik in einem\ninterdisziplinären Umfeld\n- Postprocessing und Auswertung der erzielten Simulationsergebnisse\n- Diskussion der Korrektheit und Verlässlichkeit der erzielten Ergebnisse; Sicherstellung der\nReproduzierbarkeit von Ergebnissen.\n- Techniken zur Dokumentation und Präsentation von Ergebnissen bzw. Zwischenergebnissen bei\nder Anwendungsentwicklung Das Praktikum wird von verschiedenen Dozent*innen angeboten, so dass die Fachlichkeit der Anwendung aus deren jeweiligem Forschungsgebiet stammt.",
    "learning_outcomes": "Die Studierenden sind in der Lage, in einem anspruchsvollen Teilgebiet des Wissenschaftlichen Rechnens Simulationsanwendungen und –Pipelines methodisch sauber zu entwickeln. Hierzu gehört, dass sie die unterschiedlichen Phasen der Simulationspipeline im Wissenschaftlichen Rechnen durchlaufen und bearbeiten können (Modellierung, Diskretisierung, numerische Löser, Software-Entwicklung, parallele Implementierung und Optimierung, Simulationsläufe und Auswertung der Ergebnisse). Sie können anwendungsspezifische Methoden und Systeme einsetzen, die dem aktuellen Stand der Technik entsprechen. Sie sind in der Lage, Simulationsaufgaben im Team zielorientiert zu bearbeiten und sich dabei gewinnbringend zu verständigen. Sie können im Team Teilaufgaben identifizieren, delegieren und in das gemeinsame Projekt integrieren. Dazu gehört, dass sie verschiedene Meinungen und Ansichten diskutieren und berücksichtigen können. Sie können die Korrektheit, Reproduzierbarkeit und Vertrauenswürdigkeit der erzielten Ergebnisse gemäß anerkannter Best Practices der Wissenschaftlichen und allgemeinen Öffentlichkeit diskutieren und bewerten. IN2397: Masterpraktikum Computational Science and Engineering | Advanced Practical Course Computational Science and Engineering Sie beherrschen die Arbeitstechniken, um das Vorgehen innerhalb einer Simulationspipeline korrekt zu dokumentieren. Sie sind in der Lage, die Ergebnisse auf den wesentlichen Kern reduziert in anschaulicher und verständlicher Weise einem Fachpublikum zu präsentieren.",
    "teaching_methods": "Die Teilnehmenden üben das systematische Entwickeln von Simulations-Anwendungen und - Software im Bereich des Wissenschaftlichen Rechnens anhand eines anspruchsvollen Projekts in Kleingruppen nach Vorgabe und mit enger Zeitkontrolle (Entwurf, Implementierung, Test). Das Projekt wird in 4–6 Teilprojekte gegliedert, um eine schrittweise Bearbeitung des Projekts sowie eine differenzierte Bewertung von Teilergebnissen zu ermöglichen. Für jedes Teilprojekt wird die Aufgabenstellung und die erwartete Funktionalität der entwickelten Software bzw. Simulationspipeline in den Präsenzstunden vorgestellt. Die Teilprojekte sind durch die Gruppen zu bearbeiten, wobei die Studierenden bei der Programmentwicklung, Realisierung der Simulationspipeline und der Durchführung der Simulationsexperimente durch das Lehrpersonal betreut werden (im Rahmen von Sprechstunden, Foren, Email, o.ä.). Insbesondere das abschließende Teilprojekt kann mit einer umfangreicheren und flexibleren, durch die Studierenden selbst mit auszugestaltenden Aufgabenstellung versehen sein. Die entwickelten Lösungen und Ergebnisse werden für jedes Teilprojekt im Plenum präsentiert und diskutiert (siehe unter Studien- und Prüfungsleistungen).",
    "media": "Projektor, Folien, Tafel, Plattform zum kooperativen Arbeiten, Softwareentwicklungsumgebungen,\nanwendungsspezifische Werkzeuge",
    "literature": "Von den Dozent*innen anzugeben, fachspezifisch",
    "lv_sws_lecturer": "Bader, Michael Georg; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nM.Sc. Praktikum: Scientific Computing: CFD (IN2186, IN2106, IN2397, IN4085) (Praktikum, 6\nSWS)\nBungartz H [L], Mühlhäußer M, Neckel T, Rodenberg B, Sun Q\nM.Sc. Praktikum: Modern Wave Propagation - Discontinuous Galerkin & Julia (IN2106, IN2397,\nIN4280) (Praktikum, 6 SWS)\nGaddameedi K, Kurapati V, Marot-Lassauzaie M, Schneller D, Wille M\nMaster-Praktikum: Mehrkern-Systeme und Supercomputer effizient programmieren (IN2106,\nIN2397, IN4048) (Praktikum, 6 SWS)\nGerndt H, Schulz M\nIN2397: Masterpraktikum Computational Science and Engineering | Advanced Practical Course Computational Science\nand Engineering\nPraktikum: Evaluierung moderner HPC-Architekturen und -Beschleuniger (IN0012, IN2106,\nIN2397, IN4294) (Praktikum, 6 SWS)\nWeidendorfer J [L], Weidendorfer J, Schulz M"
  },
  {
    "module_id": "IN2398",
    "title": "Numerische Algorithmen im Hochleistungsrechnen",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 8,
    "hours_total": 240,
    "hours_self_study": 150,
    "hours_presence": 90,
    "examination_achievements": "The examination consists of a written exam of 120 minutes in which students show that they are able to develop and implement parallel algorithms for numerical methods in the context of high performance computing. On the basis of example algorithms the ability to analyze algorithms with respect to parallelizability and parallel runtime is assessed. Questions test the understanding of vectorization, thread parallelism and MPI parallelization and their impact on numerical algorithms. Small implementation tasks assess the skills in writing parallel numerical code. The knowledge about parallelizing the algorithmic problems handled in the module is examined by questions and small implementation tasks.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN0019 Numerical Programming, IN2156 Numerical Programming (CSE), IN2147 Parallel\nProgramming",
    "content": "The lecture discusses selected algorithms from the following classical problem settings in scientific computing (\"the seven dwarfs of HPC\"):\n- Solvers for partial differential equations (and related problems) on structured and unstructured\ngrids (e.g. domain decomposition methods)\n- Algorithms in numerical linear algebra on sparse and dense matrices (direct and iterative solution\nof linear systems on HPC architectures, eigenvalue problems, etc.)\n- Particle-oriented simulation (Barnes-Hut/Fast Multipole algorithm, etc.)\n- Spectral methods (parallel fast Fourier transform, etc.)\nIN2398: Numerische Algorithmen im Hochleistungsrechnen | Numerical Algorithms for High Performance Computing In that context, the following approaches for optimisation and analysis of algorithms will be discussed:\n- Performance analysis and performance models (Roofline, Cache, Bulk Synchronous Parallelism)\n- Shared-memory parallelism (data dependencies, parallel loop, tasking)\n- Distributed-memory parallelism (MPI; tiling, blocking and partitioning methods)",
    "learning_outcomes": "Participants know important algorithms from various representative problems in parallel and high performance computing, in particular motivated by applications in scientific computing. They can evaluate their range of application in standard scenarios, are familiar with their basic performance features, and can also evaluate their parallel scalability. Students are able to decide whether a numerical algorithm is parallelizable in an efficient way and to analyze internal data dependencies and the runtime of parallel algorithms. They understand the different ways of parallelism and are able to exploit them when writing numerical code for different architectures. Participants know different parallelization strategies for solving linear systems and partial differential equations and are able to implement and evaluate them.",
    "teaching_methods": "This module comprises lectures and accompanying tutorials. The contents of the lectures will be taught by talks and presentations. Students will be encouraged to study literature and to get involved with the topics in depth. In the tutorials, concrete problems will be solved - partially in teamwork - and selected examples will be discussed.",
    "media": "Slides, whiteboard, exercise sheets",
    "literature": "- Bisseling: Parallel Scientific Computation - A Structured Approach Using BSP;\n- Dongarra, Duff, Sorensen, van der Vorst: Numerical Linear Algebra for High-Performance\nComputers;\n- Pacheco: A User’s Guide to MPI, Parallel Programming with MPI",
    "lv_sws_lecturer": "Bader, Michael Georg; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nNumerische Algorithmen im Hochleistungsrechnen (IN2398) (Vorlesung mit integrierten Übungen,\n6 SWS)\nBader M [L], Gaddameedi K, Mühlhäußer M"
  },
  {
    "module_id": "IN2399",
    "title": "Weiterführende Bioinformatik",
    "level": "Bachelor",
    "language": "Deutsch/Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 105,
    "hours_presence": 75,
    "examination_achievements": "Die Prüfung ist eine schriftliche Klausur mit einer Dauer von 90 Minuten, bei der die Studierenden die Beherrschung der behandelten Theorie und praktische Problemlösungsfähigkeiten zeigen sollen. Ihnen wir ein Anwendungsfallszenario gegeben, an dem sie die geeigneten Methoden (inklusive Begründung) auswählen, die Methode mit Hilfe von Pseudocode beschreiben und ihre Anwendung in einfachen Berechnungen zeigen sollen. Sie werden mit experimentellen Daten konfrontiert, die sie im Rahmen der behandelten Theorie auswerten und interpretieren sollen.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN5167 Fortgeschrittene Biochemie, IN5001 Algorithmische Bioinformatik 2",
    "content": "Die folgenden Themen werden behandelt:\n- Wissenschaftliche Prinzipien und Struktur wissenschaftlicher Vorträge und Schriftstücke\n- Grundlagen des maschinellen Lernens auf biologischen Sequenzen\n- Grundlagen des Deep Learnings\n- Fortgeschrittene Codierung und Deskriptoren von Proteinen (z. B. PSSM, Sprachmodelle,\nEvolutionary Couplings, etc.)\n- Deep learning auf Proteinen\n- Ausgewählte Themen in der Massen- und Einzelzellsequenzierung, die die Datenverarbeitung\nund Analyse abdecken mit Anwendungen die von der Genomik und Epigenomik bis zur Transkriptomik reichen\n- Einführung in die Proteomik\n- Ausgewählte Themen der Proteomik\n- Regulatorische Netzwerke\nIN2399: Weiterführende Bioinformatik | Advanced Bioinformatics\n- Fortgeschrittene Proteinstruktur",
    "learning_outcomes": "Wenn die Studierenden das Modul bestanden haben, erinnern und verstehen sie die Theorie der ausgewählten fortgeschrittenen Themen. Sie sind in der Lage bei einem Problem, das den präsentierten ähnelt, die angemessenen Methoden auszuwählen und anzuwenden. Sie können die entsprechenden Werkzeuge richtig bedienen und ihre eigenen Lösungen basierend auf existierenden Frameworks implementieren.",
    "teaching_methods": "Vorlesung und Übungen. Die Theorie und die Probleme werden in der Vorlesung vorgestellt und mit den Studierenden diskutiert. Die Studierenden bekommen Hausaufgaben gestellt, bei denen sie Fragestellungen mit Bezug zu den behandelten Themen bearbeiten und ihre Problemlösungsfähigkeiten entwickeln können. Danach werden die Lösungen während der Übung mit den Betreuern diskutiert.",
    "media": "Folienpräsentationen, Tafelanschrieb, Plenardiskussionen mit den Dozenten",
    "literature": "Aktuelle Forschungspublikationen zum jeweiligen Thema",
    "lv_sws_lecturer": "Rost, Burkhard; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nWeiterführende Bioinformatik (IN2399) (Vorlesung, 3 SWS)\nRost B [L], Kamal N, Richter L, Rost B, Wilhelm M\nÜbung Weiterführende Bioinformatik (IN2399) (Übung, 2 SWS)\nRost B [L], List M, Richter L, Rost B, Weißenow K, Wilhelm M"
  },
  {
    "module_id": "IN2400",
    "title": "Fortgeschrittene Konzepte des Quantum Computing",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer 90-minütigen schriftlichen Klausur erbracht. Erlaubte Hilfsmittel: ein DIN-A4-Blatt (beidseitig) mit eigenen Notizen; sowohl handschriftlich als auch digital vorbereitet und ausgedruckt ist zulässig. Aufgaben zu Quantenoperationen können die Studierenden auffordern, eine solche Operation aus einer Quantenschaltung mit Primär- und Auxiliary-Qubits herzuleiten, die Identifikation eines „Phase Estimation“-Schritts innerhalb einer Schaltung, oder die Verwendung der Quanten-Fourier-Transformation zur Lösung einer bestimmten Aufgabe. Die Prüfung frägt Kenntnisse zur Quantenfehlerkorrektur und zum „Stabilizer-Formalismus“ ab, indem Studierende Vertauschungsrelationen beweisen sollen, den Unterraum identifizieren sollen, der durch eine Untergruppe der Pauli-Gruppe stabilisiert wird, oder einen solchen Unterraum nach Konjugation durch unitäre Gatter transformieren sollen. Das Erreichen einer vorgegebenen Anzahl der maximalen Hausaufgabenpunkte kann mit einem Notenbonus von einer Notenstufe bei der Bewertung der Klausur belohnt werden. Die genauen Regelungen hierzu werden rechtzeitig zu Beginn der Vorlesungen bekannt gegeben.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "- Einführung in Quantum Computing (IN2381)\n- Lineare Algebra, z.B. MA0901 Lineare Algebra für Informatik\n- Analysis (für Quanten-Fouriertransformation), z.B. MA0902 Analysis für Informatik\n- Grundlagen der Gruppentheorie hilfreich (für Quanten-Fehlerkorrektur), aber nicht streng\nerforderlich, z.B. MA2010 Algebra\nIN2400: Fortgeschrittene Konzepte des Quantum Computing | Advanced Concepts of Quantum Computing",
    "content": "- Quanten-Fouriertransformation\n- Shor-Algorithmus zur Ganzzahl-Faktorisierung\n- Quantenoperationen\n- Quanten-Fehlerkorrektur",
    "learning_outcomes": "Nach erfolgreicher Teilnahme an diesem Modul beherrschen die Studierenden fortgeschrittene Konzepte und Algorithmen im Bereich Quantum Computing, insbesondere die Quanten- Fouriertransformation, Quantenoperationen und Quanten-Fehlerkorrektur. Sie können Quanten- Fouriertransformation von anderen Algorithmen differenzieren, verstehen deren Relevanz für Ganzzahlfaktorisierung, und können Quanten-Fouriertransformation in neuen Szenarien anwenden. Zudem verstehen die Studierenden den mathematischen Formalismus von Quanten- Fehlerkorrektur und verwandten Konzepten wie den Stabilizer-Formalismus.",
    "teaching_methods": "Mit Hilfe des Tafelvortrags werden die fortgeschrittenen Konzepte von Quantum Computing eingehend vermittelt, und durch die Folienpräsentationen aktuelle technische Entwicklungen aufgezeigt. Die begleitenden Übungen dienen zum Verständnis der Vorlesungsinhalte und zum kreativen Anwenden der erworbenen Kenntnisse.",
    "media": "Tafelanschrieb, Folienpräsentation",
    "literature": "M. A. Nielsen, I. L. Chuang: Quantum Computation and Quantum Information. Cambridge\nUniversity Press (2010)\nJ. Preskill: Quantum Computing in the NISQ era and beyond. Quantum 2, 79 (2018)",
    "lv_sws_lecturer": "Mendl, Christian; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nAdvanced Concepts of Quantum Computing (IN2400) (Vorlesung mit integrierten Übungen, 4\nSWS)\nMendl C [L], Hack P, Le I, Nibbi M"
  },
  {
    "module_id": "IN2401",
    "title": "Concept Art und Game Design",
    "level": "Bachelor",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer Projektarbeit mit abschließender Präsentation und Ausarbeitung erbracht. Die Teilnehmer wenden die in den vorangegangen Lehrveranstaltungen IN0031, IN0038 und IN0033, sowie der im Rahmen des Moduls erworbenen Kenntnisse zur Konzeption und 3D- Gestaltung von digitalen Spielen in einem Team an, um gemeinsam eine praxisbezogene Projektaufgabe (Erstellung einer interaktiven 3D-Spieleanwendung) zu lösen. Die Ergebnisse werden von den Teilnehmern am Semesterende präsentiert. Eine entsprechende Dokumentation, inklusive der digitalen Modelle, wird angefertigt und vorgelegt. Die Note ergibt sich aus der Bewertung der Qualität der Lösung in Bezug auf die gestalterische, technische und wirtschaftliche Umsetzung der Spieleanwendung (gemessen wird der individuelle Beitrag jedes Studierenden zum Erfolg des Projektteams).",
    "repetition": "",
    "recommended_prerequisites": "IN0031 Einführung in Informatik für Games Engineering, IN0038 Echtzeit-Computergrafik, IN0033\nInteraktionsmethoden und -geräte",
    "content": "Im Zentrum des Moduls steht die Auseinandersetzung mit gestalterischen, technischen und organisatorischen Grundlagen für die professionelle Spieleentwicklung. Es werden notwendiges theoretisches Wissen und Kenntnisse der Konzeption und praktischen Umsetzung von Computerspielen behandelt. In Form eines Praxisprojekts erfolgt die Bearbeitung anhand ausgesuchter Projektarbeit in kleinen Teams. IN2401: Concept Art und Game Design | Concept Art and Game Design Themenschwerpunkte sind: Concept Art, Game Environments und 3D Character Design. Dazu gehören Projektionsarten, Perspektivische Projektion, Bildgestaltung und Bildkomposition, Bildwahrnehmung, Bildformat und \"Gleichgewicht\", Figur und Grund, Gestalt und Bildtiefe, wahrgenommene \"Bewegung\" im Bild, Mensch und Raum, Figur und Proportion, Character Design für Film und Games, 3D Modeling, Texturing, Lighting und Rendering, Lichtfarbe und Farbgestaltung, Lichtrichtung und Bildwirkung, Rigging and Animation, Game Engine Integration, sowie der professionelle Workflow (Pipeline and Stages in Lean Game Development) und Datenaustausch im 3D Game Development. Die Lehrveranstaltung nutzt die Software Blender und eine Game Engine (Unity, Unreal Engine). Die Lehrveranstaltung gliedert sich in neun Workshops und sechs Projektwochen. In den Projektwochen haben die Studierenden die Gelegenheit, die erworbenen Kenntnisse in einem praktischen Projekt umzusetzen. Alle Workshopergebnisse werden gesammelt und abschließend präsentiert. Neben der universitätseigenen Hardware bringen alle Teilnehmer auch jeweils eigene Hardware (Notebooks etc.) mit vorinstallierten Softwarepaketen in der jeweils aktuellen Version mit.",
    "learning_outcomes": "Nach erfolgreicher Teilnahme am Modul können die Studierenden wichtige gestalterische, technische und organisatorische Grundlagen zur praxisbezogenen Konzeption und Umsetzung digitaler Spiele umsetzen. Sie sind in der Lage, wichtige gestalterische Grundprinzipien, wie beispielsweise die grafische Darstellung, Bildkomposition und die Bildwahrnehmung beim Game Design einzusetzen. Insbesondere beherrschen sie den gestalterischen Entwurf und die technische Umsetzung von 3D Game Charakteren und 3D Spielumgebungen. Die Studierenden verstehen die Gestaltung dieser Elemente innerhalb des professionellen Workflows (Pipeline) in der Spieleentwicklung. Sie erlernen, diese Abläufe mit den üblichen Softwarepaketen gestalterisch, technisch und organisatorisch umzusetzen und die Arbeit in einem Team erfolgreich zu koordinieren.",
    "teaching_methods": "Dieses Modul funktioniert wie ein sogenanntes \"Bar-Camp\". Mit Methoden des \"Blended Learning\" übernehmen Studierende auch aktive Rollen innerhalb der Lehrveranstaltung. In Impulsvorträgen wird das nötige theoretische Wissen frontal vermittelt. Es kann ergänzende Fachvorträge und Workshops von und mit Studierenden geben. Die Studierenden werden zum Selbststudium und der inhaltlichen Auseinandersetzung mit den Themen angeregt. Die vermittelten theoretischen Grundlagen werden an Hand praktischer Aufgabenstellungen vertieft. Am Ende des Semesters sind die erarbeiteten Projekte in digitaler und analoger Form abzugeben und in einer Ergebnispräsentation zu präsentieren. Die Lehrveranstaltung kann wöchentlich während des Semesters abgehalten werden, oder als Blockveranstaltung in Einzelmodulen angeboten werden. Die Dauer der Module kann, je nach Frequenz (wöchentlich, Blockveranstaltung) abgestimmt werden. Die Kurse werden in der Zeit von Anfang Oktober bis Ende Januar abgehalten. IN2401: Concept Art und Game Design | Concept Art and Game Design",
    "media": "Folien, Filme, Diskussionen mit (Gast-) Dozent:innen, Doktorand:innen und Kommiliton:innen vor\nOrt und über collaborative Online Plattformen, Testumgebung im TUM GamesLab (HW: spezielle\nGames Rechner und Interaktionsgeräte, SW: Blender, Game Engine).",
    "literature": "Lehrmaterial zur Lehrveranstaltung wird semesterweise über die e-learning-Plattform\nzusammengestellt.\nARNHEIM, Rudolf: Kunst und Sehen - eine Psychologie des schöpferischen Auges, De Gruyter,\nBerlin 2000\nBARTENBACH, Christian: Handbuch für Lichtgestaltung, SpringerWienNewYork, 2008\nBIRN, Jeremy: Digital Lighting and Rendering, New Riders 2005\nBLANK, Richard: Film & Licht, Alexander Verlag, Berlin 2009\nBROOKER, Darren: Essential CG Lighting Techniques, Focal Press, Oxford 2008\nJOHNSTON, Ollie and THOMAS, Frank: The Illusion of Life. New York, Abbeville Press, 1981\nLASSETER, John: Principles of Traditional Animation applied to 3D Computer Animation ACM\nComputer Graphics, Vol. 21, Number 4, July 1987, S. 35-44, https://doi.org/10.1145/37401.37407\nMULLEN, Tony: Mastering Blender, John Wiley & Sons, Indianapolis 2009\nPICKELL, Devin: The 7 Stages of Game Development, G2 Learning Hub, Chicago, IL, 2019,\nhttps://learn.g2.com/stages-of-game-development\nPOTTMANN, H.: Architekturgeometrie, SpringerWienNewYork 2009\nROOSENDAAL, T.: The Official Blender 2.3 Guide, No Starch Press, San Francisco 2004\nROOSENDAAL, T.: The Essential Blender, No Starch Press, San Francisco 2010\nROSENFIELD BOEIRA, Julia Naomi. Lean Game Development: Apply Lean\nFrameworks to the Process of Game Development, Apress, Berkeley, CA, 2017, https://\ndoi.org/10.1007/978-1-4842-3216-3_1\nWILLIAMS, Richard: The Animators Survival Kit, Faber & Faber, London 2009",
    "lv_sws_lecturer": "Plecher, David; Prof. Dr. rer. nat.\nIN2401: Concept Art und Game Design | Concept Art and Game Design\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nConcept Art und Game Design (IN2401) (Vorlesung mit integrierten Übungen, 4 SWS)\nKlinker G [L], Höhl W, Liedtke S"
  },
  {
    "module_id": "IN2402",
    "title": "Level Engineering: Methoden und Werkzeuge für die Erstellung von Spielumgebungen und Level Design",
    "level": "Bachelor",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 105,
    "hours_presence": 45,
    "examination_achievements": "Während des Semesters entwickeln die Studierenden ein praxisbezogenes Projekt mithilfe einer industrieüblichen Game Engine, um das Gelernte anzuwenden. Die Lerninhalte werden kontinuierlich im Rahmen des Seminars mit Hilfe von wöchentlichen Aufgaben (5-7) evaluiert. Das Projekt mit praxisbezogener Projektaufgabe (Erstellung einer interaktiven 3D- Spieleanwendung mit Fokus auf der Spielumgebung) wird in Gruppenarbeit (3-4er Gruppen) in der zweiten Semesterhälfte erarbeitet und am Ende des Semesters bewertet. Die finale Note ergibt sich aus der Punktzahl der Aufgaben (30%), der Komplexität und Qualität implementierten Lösungen im Projekt (50%), und der Abschlusspräsentation des Projektes (15min, 20%) zum Semesterende. Die Beiträge der einzelnen Studierenden müssen dabei bei allen drei Bestandteilen deutlich gekennzeichnet sein (beispielsweise durch die Angabe von Abschnitten, Seitenzahlen, inhaltlichen Schwerpunkten oder Codebestandteilen) bzw. präsentiert werden und werden einzeln bewertet.",
    "repetition": "",
    "recommended_prerequisites": "IN0031 Einführung in Informatik für Games Engineering, IN0038 Echtzeit-Computergrafik, IN0033\nInteraktionsmethoden und -geräte\nIN2402: Level Engineering: Methoden und Werkzeuge für die Erstellung von Spielumgebungen und Level Design | Level\nEngineering: Methods and Tools for Creating Game Environments and Level Design",
    "content": "Spielumgebungen sind ein fundamentaler Aspekt von Spielen. Level Designer beschäftigen sich mit dem Erstellen von Spielumgebungen, in der der Spieler mit dem Spiel interagiert. In diesem Fach „Level Engineering“ setzen sich die Studierenden mit der systematischen Anwendung ingenieurwissenschaftlicher Ansätze für die Entwicklung von Spielumgebungen auseinander. Die Studierenden lernen die Grundlagen von Level Design und 3D Nutzerschnittstellen. Anhand von aktuellen Beispielen aus industrieüblichen Spielprojekten beschäftigen sich die Studierenden mit ingenieurwissenschaftlichen Methoden und Tools für die Konzeptionierung und Entwicklung von Spielumgebungen für Computerspiele. Themenschwerpunkte sind:\n• Einführung in Level Design\n◦ Grundkenntnisse über die Rolle des Level Design im Kontext von Spieleentwicklungsprozessen, vor allem auch mit Blick auf Schnittstellen zu anderen Aspekten von Spielen und Bereiche der Spieleentwicklung. ◦ Designprinzipien für Spielumgebungen ◦ Balance zwischen ästhetischer Gestaltung, Gameplay und Performance\n• 3D Nutzerschnittstellen\n◦ Der Zusammenhang von Level Design und klassischen 3D Nutzerschnittstellen (Travel Techniques, Camera Control, Wayfinding, etc.) ◦ Grundlagen von 3D Nutzerschnittstellen im Kontext von Spielumgebungen\n• Einführung in Tool Engineering für Game Engines\n• “Level Engineering”-Methoden und Tools\n◦ Dokumente in der Spieleentwicklung. ◦ Erstellung von Prototypen für Spieleumgebungen ◦ Die Entwicklung und Anwendung komplexer Software und Tools zur Unterstützung des Design- und Entwicklungsprozesses.",
    "learning_outcomes": "Nach erfolgreicher Teilnahme an diesem Modul sind die Studierenden in der Lage ingenieurwissenschaftliche Ansätze für die Entwicklung von Spielumgebungen systematisch anzuwenden. Die Studierenden verstehen die Gestaltung von Spielumgebungen innerhalb der professionellen Prozesse in der Spieleentwicklung. Die Studierenden können Spielwelten eigenständig und strukturiert erstellen und auch bewerten. In Verbindung mit Software können eigenständig Lösungsansätze in Form von Tools für unterschiedliche Herausforderungen des Design- und Entwicklungsprozesses entworfen und umgesetzt werden.",
    "teaching_methods": "Seminar mit projektbezogenen Einzel- und Gruppenarbeiten. Das wöchentliche Seminar dient zum Erlernen und Verstehen der Konzepte, sowie deren Bedeutung für den Einsatz in Anwendungen. Die anschließende Projektarbeit dient zur Vertiefung und Anwenden der gelernten Konzepte. IN2402: Level Engineering: Methoden und Werkzeuge für die Erstellung von Spielumgebungen und Level Design | Level Engineering: Methods and Tools for Creating Game Environments and Level Design",
    "media": "Folien, Skript, Bücher, Videos, Computer, interaktives Problemlösen",
    "literature": "Lehrmaterial zur Lehrveranstaltung wird semesterweise über die e-learning-Plattform\nzusammengestellt.\nGregory, J. (2018). Game engine architecture. crc Press.\nSchell, J. (2008). The Art of Game Design: A book of lenses. CRC press.\nLynch, K. (1960). The image of the city. MIT press.\nAlexander, C. (1977). A pattern language: towns, buildings, construction. Oxford university press.\nLaViola Jr, J. J., Kruijff, E., McMahan, R. P., Bowman, D., & Poupyrev, I. P. (2017). 3D user\ninterfaces: theory and practice. Addison-Wesley Professional.\nSicart, M. (2008). Defining Game Mechanics. Game Studies, 8(2).\nAlmeida, M. S. O., & da Silva, F. S. C. (2013, October). A systematic review of game design\nmethods and tools. In International Conference on Entertainment Computing (pp. 17-29). Springer,\nBerlin, Heidelberg.",
    "lv_sws_lecturer": "Plecher, David; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nLevel Engineering: Methoden und Werkzeuge für die Erstellung von Spielumgebungen und Level\nDesign (IN2402) (Seminar, 3 SWS)\nKlinker G [L], Dyrda D"
  },
  {
    "module_id": "IN2403",
    "title": "Artificial Intelligence in Medicine",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester/Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "The exam takes the form of a written test. The duration is 90 minutes, and no material is allowed (closed book). Questions allow to assess whether the student is able to understand fundamentals, differences and application areas of Artificial Intelligence in Medicine as well as methods for computer-aided diagnosis and decision making. Using practical case studies will assess whether the student is able to select an appropriate artificial intelligence or machine learning approach for a given application. All problems and questions demand the students to phrase their individual responses.",
    "repetition": "Folgesemester",
    "recommended_prerequisites": "Introduction to Deep Learning (IN2346)\nComputer Aided Medical Procedures I (IN2021)",
    "content": "• Introduction: Clinical motivation, clinical data, clinical workflows\n• ML for medical imaging\n• Data curation for medical applications\n• Domain shift in medical applications: Adversarial learning and Transfer learning\n• Self-supervised learning and unsupervised learning\n• Learning from sparse and noisy data\n• ML for unstructured and multi-modal clinical data\n• NLP for clinical data\n• Bayesian approaches to deep learning and uncertainty\n• Interpretability and explainability\nIN2403: Artificial Intelligence in Medicine | Artificial Intelligence in Medicine\n• Federated learning, privacy-preserving ML and ethics\n• ML for time-to-event modeling, survival models\n• ML for differential diagnosis and stratification\n• Clinical applications in pathology/radiology/omics",
    "learning_outcomes": "At the end of the module students should be able to recall the important topics in the area of artificial intelligence in medicine, understand the relations between the topics, apply their knowledge to own deep learning projects, analyse and evaluate social and ethical implications and develop own strategies to apply the learned concepts to their own work.",
    "teaching_methods": "Lecture, tutorial, problems for individual study. Guest lectures will be held by experts from local hospitals and med-tech companies to ensure that the covered topics are relevant for clinical practice. Assignments are provided on a weekly basis via the teaching portal and will be aligned to the lectures and tutorials in terms of content. They are discussed in the next tutorial class, and a solution is presented. Work on the assignments and participation in the tutorial class are voluntary. They serve as a means for students to deepen and test their acquired knowledge – as a self- monitoring aid to prepare for the written exam.",
    "media": "Slide show, blackboard",
    "literature": "Recommended:\n1. I. Goodfellow, Y. Bengio and A. Courville. Deep Learning. MIT Press, 2016. Available at http://\nwww.deeplearningbook.org\n2. E. J. Topol. High-performance medicine: the convergence of human and artificial intelligence.\nNat Med 25, 44–56, 2019. https://doi.org/10.1038/s41591-018-0300-7\n3. A. Esteva, K. Chou, S. Yeung, et al. Deep learning-enabled medical computer vision. npj Digit.\nMed. 4, 5, 2021. https://doi.org/10.1038/s41746-020-00376-2\n4. B. Norgeot, G. Quer, B.K. Beaulieu-Jones et al. Minimum information about clinical artificial\nintelligence modeling: the MI-CLAIM checklist. Nat Med 26, 1320–1324 (2020). https://\ndoi.org/10.1038/s41591-020-1041-y\n5. V. Sounderajah, H. Ashrafian, R. Aggarwal et al. Developing specific reporting guidelines for\ndiagnostic accuracy studies assessing AI interventions: The STARD-AI Steering Group. Nat Med\n26, 807–808 (2020). https://doi.org/10.1038/s41591-020-0941-1\nOptional\n6. E. Topol. Deep Medicine - How Artificial Intelligence Can Make Healthcare Human Again. 2019.",
    "lv_sws_lecturer": "Rückert, Daniel; Univ.-Prof. Dr.\nIN2403: Artificial Intelligence in Medicine | Artificial Intelligence in Medicine\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nKünstliche Intelligenz in der Medizin I (IN2403) (Vorlesung, 4 SWS)\nRückert D [L], Rückert D, Schnabel J"
  },
  {
    "module_id": "IN2405",
    "title": "Neuroprosthetics: Artificial Limbs",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Type of Assessment: The examination consists of a written test of 90 minutes at the end of the course. In case of a low number of participants, the exam can be conducted orally. In addition, the students will have to provide their solutions to practical exercises to the teaching assistant for evaluation, in the form of a written report and a presentation of contents and results. These exercises may focus on the application of design principles, myoelectric control methods or creation of virtual environments. The students can work on the practical exercises in small groups. The students will be awarded a bonus in case of excellent completion of the exercises. Reasons for it: To certify a deep understanding of what presented during the lectures. In addition, during the practical exercises, the students will have the opportunity to apply state-of-the-art methods to real world problems.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Bachelor or intermediate diploma in informatics, computer science or engineering. Solid\nprogramming skills and knowledge of Matlab/Python and Unity3D is highly recommended.\nAdditionally, knowledge of the following modules is strongly recommended:\n- Signal Theory (EI00330)\n- Automatic Control (MW9020, MW2022, MW1530)\n- Medical Augmented Reality (IN2293)\n- Advanced Practical Course Games Engineering: Augmented Reality (IN7106)\nIN2405: Neuroprosthetics: Artificial Limbs | Neuroprosthetics: Artificial Limbs\n- Robotics (IN2067)",
    "content": "The module will present the following topics:\n- History and current evolution of neuroprosthetics, emerging trends in the field, opportunities and\nchallenges.\n- Anatomy of the upper limb, general principles associated with the production of movements and\nmuscle synergies, main causes of upper limb amputation, overview about different level of upper extremity amputation, current challenges.\n- Upper limb and hand bionic prostheses: (1) current strategies for the development of\nneuroprostheses; (2) myoelectric control; (3) advanced methods: invasive and non-invasive techniques; (4) overview about interfaces and novel surgical techniques.\n- Anatomy of the lower limb and main causes of amputation: general anatomy of the upper limb,\ngeneral principles associated with locomotion, main causes of lower limb amputation, overview about different level of lower extremity amputation, current challenges.\n- Lower limb bionic prostheses: (1) current strategies for the development of neuroprostheses\nfor the restoration of walking; (2) myoelectric control; (3) advanced methods: invasive and non- invasive techniques; (4) overview about interfaces and novel surgical techniques.\n- Haptic feedback: (1) current strategies for the development of systems for the restoration of\nhaptic feedback; (2) advanced methods: invasive and non-invasive techniques.\n- Functional assessments: current methods to evaluate the performance of neuroprostheses,\nCybathlon, emerging trends in the field, opportunities and challenges",
    "learning_outcomes": "The module aims to provide knowledge about the main aspects, methodologies and tools for the design, control, testing and evaluation of robotic prosthetic systems, for upper and lower limbs. Particular emphasis is given to methods for mechatronic design, including integration with control interfaces and sensory feedback, and the development of novel functional assessments. On the basis of this knowledge, students are able to develop novel mechatronic systems, analyze electromyographic signals to control multi degrees of freedom devices and improve standard assessments.",
    "teaching_methods": "The teaching methods will include:\n- Lectures (2 SWS),\n- Exercise and application-specific tutorials (2 SWS): design principles, control methods (based on\nsurface EMG sensors), sensory feedback, virtual reality environment development",
    "media": "PowerPoint, Exercises in Matlab or Python",
    "literature": "1) Aszmann, Oskar C., and Dario Farina. (2021). Bionic Limb Reconstruction. Springer\nIN2405: Neuroprosthetics: Artificial Limbs | Neuroprosthetics: Artificial Limbs\n2) Merletti, R., & Farina, D. (Eds.). (2016). Surface electromyography: physiology, engineering, and\napplications. John Wiley & Sons.\n3) M. Bishop, Neural networks for pattern recognition, Oxford university press, 1995.\n4) Muzumdar, Powered Upper Limb Prostheses: Control, Implementation and Clinical Application,\nSpringer Science & Business Media, 2004.",
    "lv_sws_lecturer": "Piazza, Cristina; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nNeuroprosthetics: Artificial Limbs (IN2405) (Vorlesung, 4 SWS)\nPiazza C [L], Piazza C, Capsi Morales P, Spiegeler Castaneda T, Happold J"
  },
  {
    "module_id": "IN2408",
    "title": "Artificial Intelligence in Medicine II",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Lecture: Written examinations (90 min) to see if the students have acquired deep understanding of the provided mathematical tools Practical: Five assignment sheets with theoretical exercises and practical programming tasks (20% of the total grade)",
    "repetition": "Semesterende",
    "recommended_prerequisites": "IN2403 Artificial Intelligence in Medicine",
    "content": "Introduction and examples of advanced prediction and classification problems in medicine; ML for prognostic and diagnostic tasks; risk scores, time-to-event modeling, survival models, differential diagnosis & population stratification, geometric deep learning: point clouds & meshes, mesh-based segmentation, shape analysis, trustworthy AI in medicine: bias and fairness, generalizability, AI for affordable healthcare, clinical deployment and evaluation, data harmonization, causal inference, transformers, reinforcement learning in medicine, ML for neuro: structural neuroimaging, functional neuroimaging, diffusion imaging, ML for CVD: EEG analysis",
    "learning_outcomes": "At the end of the module students should be able to recall advanced topics in the area of artificial intelligence in medicine, understand the relations between the topics, apply their knowledge to own AI projects, analyse and evaluate social and ethical implications and develop own strategies to apply the learned concepts to their own work. IN2408: Artificial Intelligence in Medicine II | Artificial Intelligence in Medicine II",
    "teaching_methods": "Interactive Lecture, theoretical and practical Exercises",
    "media": "PowerPoint, Whiteboard",
    "literature": "Rajpurkar, P., Chen, E., Banerjee, O. et al. AI in health and medicine. Nat Med 28, 31–38 (2022).\nhttps://doi.org/10.1038/s41591-021-01614-0\nY. Chen et al., \"AI-Based Reconstruction for Fast MRI—A Systematic Review and Meta-\nAnalysis,\" in Proceedings of the IEEE, vol. 110, no. 2, pp. 224-245, Feb. 2022, doi: 10.1109/\nJPROC.2022.3141367.\nRoberts, M., Driggs, D., Thorpe, M. et al. Common pitfalls and recommendations for using machine\nlearning to detect and prognosticate for COVID-19 using chest radiographs and CT scans. Nat\nMach Intell 3, 199–217 (2021). https://doi.org/10.1038/s42256-021-00307-0",
    "lv_sws_lecturer": "Rückert, Daniel; Univ.-Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nArtificial Intelligence in Medicine II (IN2408) (Vorlesung mit integrierten Übungen, 4 SWS)\nRückert D [L], Ezhov I, Rückert D, Schnabel J, Wachinger C"
  },
  {
    "module_id": "IN2409",
    "title": "Inverse Problems in Medical Imaging",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Lecture: 75 min written examination (70% of the final grade) to see if the students have acquired deep understanding of the provided mathematical tools Practical: Six assignments sheets with theoretical and practical coding exercises (30% of the final grade)",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Good knowledge of mathematics (Bachelor course)",
    "content": "Introduction and examples of inverse problems; vector spaces; definition of inverse problem; well- posedness according to Hadamard; injection, surjection, bijection of functions; Null-space and range space of operators; linear inverse problems; eigenvalue problem; decomposition theorem; singular value decomposition; inverse methods based on length; least squares and determinancy; minimum length; the generalized inverse; nonlinear inverse problems; regularization methods and comparison of different classes; Computed Tomography; Radon transform; backprojection; Fourier- slice theorem; filtered backprojection; deconvolution methods.",
    "learning_outcomes": "The students will learn basic mathematical tools to analyze and solve inverse problems. The aim of this lecture is to provide sufficient understanding of the underlying inverse problems and strategies for solving these problems. At the end of the lecture, the students will be able to theoretically and practically analyze, experimentally design and implement the required algorithms to solve various inverse problems in medical imaging. IN2409: Inverse Problems in Medical Imaging | Inverse Problems in Medical Imaging",
    "teaching_methods": "Interactive Lecture, theoretical and practical Exercises",
    "media": "PowerPoint, Whiteboard, interactive Whiteboard (Miro)",
    "literature": "R. M. Richardson and G. Zandt. Inverse Problems in Geophysics, 2003. (Lecture Notes)\nO. Dössel. Bildgebende Verfahren in der Medizin: Von der Technik zur medizinischen Anwendung,\n1999.\nG. L. Zeng. Medical Image Reconstruction: A Conceptual Tutorial, 2010.",
    "lv_sws_lecturer": "Rückert, Daniel; Univ.-Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN2410",
    "title": "Causality",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 8,
    "hours_total": 240,
    "hours_self_study": 150,
    "hours_presence": 90,
    "examination_achievements": "The assessment takes the form of a 120 minutes written exam. Comprehension questions assess whether the basic concepts and their relationships have been internalized and can be applied to novel examples. Concrete applications assess whether causal inference problems can be analyzed, adequate methods are being chosen, and the problems are solved successfully.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Basics of Probability Theory (e.g. IN0018 Discrete Probability Theory or IN2332 Statistical\nModeling and Machine Learning, alternatively MA2409),\nAnalysis MA0902 (alternatively MA1001/2),\nLinear Algebra MA0901 (alternatively MA1101/2),\nand programming preferably in Python (e.g. IN0002 Praktikum: Programming Basics)",
    "content": "Reminder of probability theory and graph theory; probabilistic graphical models; basic concepts of causation; Neyman-Rubin causal models; structural equation models; do-calculus and interventions; counterfactuals; matching; propensity score weighting; doubly robust methods; instrumental variables; differences in differences; sensitivity analysis",
    "learning_outcomes": "At the end of this module, students understand the basic concepts of causal inference from data and know about essential algorithms for causal discovery and cause-effect estimation. For a given problem setting they are able to decide whether causal inference is possible from the given data and assumptions, choose appropriate methods and derive how to adequately apply them to solve the problem at hand. IN2410: Causality | Causality",
    "teaching_methods": "Lecture combined with exercises for self-study to internalize learned concepts; weekly exercise sessions where solutions to the exercises are presented and discussed.",
    "media": "Blackboard, Slides, Live-Coding",
    "literature": "• Elements of Causal Inference: Foundations and Learning Algorithms (Peters et al., 2017)\n• Causality: Models, Reasoning, and Inference (Pearl, 2009)\n• Mostly Harmless Econometrics (Angrist & Pischke, 2009)\n• Causation, Prediction, and Search (Spirtes, Glymour, Scheines, 2001)",
    "lv_sws_lecturer": "Kilbertus, Niki; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nKausalität (IN2410) (Vorlesung, 4 SWS)\nKilbertus N [L], Kilbertus N\nÜbung - Kausalität (IN2410) (Übung, 2 SWS)\nKilbertus N [L], Manten G"
  },
  {
    "module_id": "IN3400",
    "title": "Ausgewählte Themen aus dem Bereich Algorithmen und Wissenschaftliches Rechnen",
    "level": "Master",
    "language": "Deutsch/Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Unregelmäßig",
    "credits": 5,
    "hours_total": null,
    "hours_self_study": null,
    "hours_presence": null,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer Klausur erbracht. Wissensfragen überprüfen die Vertrautheit mit den wesentlichen Konzepten in einem ausgewählten Bereich von Algorithmen und Wissenschaftlichem Rechnen. Transferaufgaben und kleine Szenarien überprüfen die Fähigkeit, diese Konzepte systematisch und qualifiziert anzuwenden und zu bewerten.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Bachelor Informatik",
    "content": "Verschiedene Dozenten bieten Lehrveranstaltungen zu ausgewählten Themen aus dem Bereich Algorithmen und Wissenschaftliches Rechnen an. Studierende des Masterstudienganges Informatik können dieses Modul einmal als Wahlmodul aus dem Fachgebiet Algorithmen und Wissenschaftliches Rechnen (AWR) wählen.",
    "learning_outcomes": "Teilnehmer kennen den Stand der Forschung/Technik in ausgewählten Bereichen von Algorithmen und Wissenschaftlichem Rechnen und können sich mit neuesten Forschungsprojekten auseinandersetzen. IN3400: Ausgewählte Themen aus dem Bereich Algorithmen und Wissenschaftliches Rechnen | Selected Topics in Algorithms and Scientific Computing",
    "teaching_methods": "Mit Hilfe einer Folien- oder Tafelpräsentation stellt die Vorlesung ausgewählte Konzepte und Techniken aus dem Bereich Algorithmen und Wissenschaftliches Rechnen vor und erläutert sie an Beispielen. In möglicherweise begleitenden Übungen wird anhand geeigneter Aufgaben das Verständnis der Inhalte des Moduls vertieft und die Anwendung der verschiedenen Techniken zum eigenständigen Lösen überschaubarer Problemstellungen geübt.",
    "media": "Folien, Tafelarbeit, Übungsblätter, Übungsaufgaben, Vortrag",
    "literature": "Originalliteratur (z.B. Beiträge in Zeitschriften oder Konferenzbänden), abhängig vom Thema",
    "lv_sws_lecturer": "Bungartz, Hans-Joachim; Prof. Dr. rer. nat. habil.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN3420",
    "title": "Ausgewählte Themen aus dem Bereich Digitale Biologie und Digitale Medizin",
    "level": null,
    "language": null,
    "semester_duration": null,
    "frequency": null,
    "credits": 5,
    "hours_total": null,
    "hours_self_study": null,
    "hours_presence": null,
    "examination_achievements": "",
    "repetition": "",
    "recommended_prerequisites": "",
    "content": "",
    "learning_outcomes": "",
    "teaching_methods": "",
    "media": "",
    "literature": "",
    "lv_sws_lecturer": "IN3420: Ausgewählte Themen aus dem Bereich Digitale Biologie und Digitale Medizin | Selected Topics in Digital Biology\nand Digital Medicine\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN3430",
    "title": "Ausgewählte Themen aus dem Bereich Engineering software-intensiver Systeme",
    "level": null,
    "language": null,
    "semester_duration": null,
    "frequency": null,
    "credits": 5,
    "hours_total": null,
    "hours_self_study": null,
    "hours_presence": null,
    "examination_achievements": "",
    "repetition": "",
    "recommended_prerequisites": "",
    "content": "",
    "learning_outcomes": "",
    "teaching_methods": "",
    "media": "",
    "literature": "IN3430: Ausgewählte Themen aus dem Bereich Engineering software-intensiver Systeme | Selected Topics in\nEngineering Software-intensive Systems",
    "lv_sws_lecturer": "Lehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN3440",
    "title": "Ausgewählte Themen aus dem Bereich Maschinelles Lernen und Datenanalyse",
    "level": null,
    "language": null,
    "semester_duration": null,
    "frequency": null,
    "credits": 5,
    "hours_total": null,
    "hours_self_study": null,
    "hours_presence": null,
    "examination_achievements": "",
    "repetition": "",
    "recommended_prerequisites": "",
    "content": "",
    "learning_outcomes": "",
    "teaching_methods": "",
    "media": "",
    "literature": "",
    "lv_sws_lecturer": "IN3440: Ausgewählte Themen aus dem Bereich Maschinelles Lernen und Datenanalyse | Selected Topics in Machine\nLearning and Analytics\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN3480",
    "title": "Ausgewählte Themen aus dem Bereich Wissenschaftliches Rechnen und High Performance Computing",
    "level": null,
    "language": null,
    "semester_duration": null,
    "frequency": null,
    "credits": 5,
    "hours_total": null,
    "hours_self_study": null,
    "hours_presence": null,
    "examination_achievements": "",
    "repetition": "",
    "recommended_prerequisites": "",
    "content": "",
    "learning_outcomes": "",
    "teaching_methods": "",
    "media": "",
    "literature": "IN3480: Ausgewählte Themen aus dem Bereich Wissenschaftliches Rechnen und High Performance Computing |\nSelected Topics in Scientific Computing and High Performance Computing",
    "lv_sws_lecturer": "Lehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN4102",
    "title": "Praktikum GPU Programming in Computer Vision",
    "level": "",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester/Sommersemester",
    "credits": 10,
    "hours_total": 300,
    "hours_self_study": 210,
    "hours_presence": 90,
    "examination_achievements": "Project work: Students have to hand in their solutions to 5 exercise sheets consisting of programming exercises. This ensures that students have understood the important concepts from the lecture and can also apply them in practice. During the exercise session students will also have to present their solutions and answer questions, to ensure their deeper understanding of the topic. During the final project phase students have to implement a sophisticated computer vision algorithm in groups of 2-3. Each group has to give a 15 minute talk presenting their project followed by 15 minutes of discussion. The final grade is an averaged grade from the exercises (25%) and from the project (75%).",
    "repetition": "",
    "recommended_prerequisites": "Good knowledge of the C/C++ language and basic mathematics (linear algebra, multivariable\ncalculus, analysis), no further prior knowledge about CUDA will be required.",
    "content": "The goal of this course is to provide an introduction into the NVIDIA CUDA framework with the C programming language extension. Course topics:\n- Introduction to Parallel Computing\n- Introduction to CUDA\n- Implementation of computer vision algorithms with CUDA (e.g. convolution, diffusion)\nIN4102: Praktikum GPU Programming in Computer Vision | Advanced Practical Course - GPU Programming in Computer Vision\n- Student Project: Implementation of an advanced computer vision application which uses CUDA\nacceleration for real-time processing of webcam images. During the course students will learn how to program GPUs with CUDA. Afterwards the students will start to implement more sophisticated computer vision algorithms within a student project. The course finishes with a presentation and a live demo of the project results.",
    "learning_outcomes": "Upon the completion of the module, students are able to implement and parallelize computer vision algorithms in CUDA and harness the power of GPU computing.",
    "teaching_methods": "During the first week there will be four hours of lectures each day, followed by practical programming exercises. In the following three weeks students implement an advanced project in groups of 2-3.",
    "media": "Presentations, exercise sheets, group and project work",
    "literature": "NVIDIA CUDA Programming Guide:\nhttp://docs.nvidia.com/cuda/pdf/CUDA_C_Programming_Guide.pdf",
    "lv_sws_lecturer": "Cremers, Daniel; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN8002",
    "title": "Datenbanksysteme für Hörer anderer Fachrichtungen",
    "level": "Bachelor",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 4,
    "hours_total": 120,
    "hours_self_study": 75,
    "hours_presence": 45,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer Klausur von 60 Minuten erbracht. Wissensfragen überprüfen die Vertrautheit mit den Konzepten des systematischen Einsatzes von relationalen Datenbanksystemen (RDBS). Transferaufgaben überprüfen die Vertrautheit mit der Abbildung realer Miniwelten auf die Tabellenstrukturen des RDBS sowie der Anfrage und Manipulation von relationalen Datenbanken. Kleine Szenarien überprüfen die Fähigkeit, Interna von RDBS einzusetzen und deren Grenzen zu bewerten.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Grundlegende Programmierkenntnisse",
    "content": "Diese Vorlesung vermittelt das Basiswissen, um relationale (tabellen-orientierte) Datenbanksysteme intelligent und effektiv einsetzen zu können. Dazu wird der Prozess des konzeptuellen Datenbankentwurfes (die Identifikation und Abbildung von realen Applikations- Miniwelten auf Entity-Relationship-Modelle) systematisch und detailliert vermittelt. Diese ER- Modelle werden anschließend in Tabellenstrukturen - Relationen - überführt, die letztendlich dem Datenbanksystem direkt zugänglich sind. Die Vorlesung diskutiert die Qualität solcher Abbildungen und führt dazu in die Grundlagen der Normalformenlehre ein. In der Folge bespricht die Vorlesung die Formulierung von Anfragen, vor allem formuliert in SQL, gegen die so entstandenen Relationen. Dabei aufgeworfene Fragen der Performanz und Konsistenz von Datenbanken werden untersucht, indem grundlegende Interna der Anfragebearbeitung, Indexstrukturen und Transaktionsverwaltung erläutert werden. Die Einbindung von Datenbanksystemen in web- gestützte Applikationen (Einbettung in Programmier- und Skriptsprachen) wird vorgestellt, bevor IN8002: Datenbanksysteme für Hörer anderer Fachrichtungen | Database System Concepts for Non-Computer Scientists ein Ausblick auf Datenbanksysteme für nicht-relationale Daten (vor allem XML) die Vorlesung absschließt. In den Übungen zur Vorlesung wird der praktische Umgang mit Datenbanksystemen erlernt.",
    "learning_outcomes": "Die Studierenden lernen den systematischen Einsatz von Relationalen Datenbanksystemen (RDBMS). Die Teilnehmer sind in der Lage, reale Miniwelten (Applikationen) auf die Tabellenstrukturen des RDBMS abzubilden und die so entworfenen Datenbanken zu manipulieren und anzufragen. Es wird Verständnis für Grundlagen, Interna und Grenzen von RDBMS vermittelt, so dass die Studierenden Datenbanksysteme intelligent einsetzen und bewerten können.",
    "teaching_methods": "Vorlesung, Übung, Aufgaben zum Selbststudium, Webschnittstelle zum Selbststudium",
    "media": "Vorlesung mit animierten Folien",
    "literature": "- Alfons Kemper und Andre Eickler: Datenbanksysteme: Eine Einführung. 8. Auflage, Oldenbourg\nVerlag, 2011\n- Gunter Saake, Kai-Uwe Sattler, Andreas Heuer: Datenbanken: Konzepte und Sprachen. 3.\nAuflage, mitp-Verlag, Redline GmbH 2008",
    "lv_sws_lecturer": "Kemper, Alfons; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN8004",
    "title": "Informationswirtschaft",
    "level": "Bachelor",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 3,
    "hours_total": 90,
    "hours_self_study": 60,
    "hours_presence": 30,
    "examination_achievements": "Klausur",
    "repetition": "Folgesemester",
    "recommended_prerequisites": "",
    "content": "Ausgehend von dem Begriff ?Information? wird die Informationswirtschaft als Teilgebiet des Informationsmanagements umfassend behandelt. Dabei werden auf die Wechselwirkungen zwischen der Ebene der Informationswirtschaft und den weiteren Ebenen des IM-Ebenen-Modells nach Krcmar eingegangen (Informationssysteme, Informations- und Kommunikationstechnik sowie die Führungsaufgaben des Informationsmanagement). Zudem werden spezifische Aspekte der Informationswirtschaft aufgezeigt, so z.B. der Wert der Ressource Information, Fragestellungen der Informationsökonomik und der Informationsaufarbeitung, des Business Intelligence, des Wissensmanagement und der Standardisierungsökonomik.",
    "learning_outcomes": "Nach erfolgreicher Teilnahme am Modul sind die Studierenden in der Lage,\n- wichtige Begriffe und Konzepte der Informationswirtschaft zu verstehen.\n- die Bedeutung der Ressource \"Information\" im betrieblichen Kontext zu bewerten.\n- die Beziehung zwischen Informationstechnologie und Unternehmensstrategie zu verstehen.\n- die Aufgabenbereiche des Informationsmanagements im Unternehmen zu verstehen.\n- ausgewählte Konzepte des Informationsmanagements zu analysieren und vor einem\nbetrieblichen Hintergrund zu bewerten IN8004: Informationswirtschaft | Information Management and Information Economics\n- die Grundlagen der Modellierung von Informationssystemen zu verstehen und Methoden der\nProzess- und Datenmodellierung anzuwenden.",
    "teaching_methods": "Vorlesung, Übung: Vortrag, Gemeinsames Lösen von Aufgaben, Gruppenarbeit",
    "media": "Powerpoint Folien, Übungsmaterial",
    "literature": "Krcmar, H. (2010): Informationsmanagement. 5., neu überarb. und erw. Aufl., Springer, Berlin [u.a.]\n2010\nSchwarzer, B.; Krcmar, H. (2010): Wirtschaftsinformatik: Grundlagen der betrieblichen\nDatenverarbeitung. 4., überarbeitete Auflage, Schäffer-Poeschel, Stuttgart 2010",
    "lv_sws_lecturer": "Krcmar, Helmut; Prof. Dr. rer. oec.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN8005",
    "title": "Einführung in die Informatik für andere Fachrichtungen",
    "level": "Bachelor",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Prüfungsart: Klausur (90 Minuten) Die Prüfungsleistung wird in Form einer Klausur erbracht. Wissensfragen überprüfen die Vertrautheit mit den behandelten Grundkonzepten der Informatik. Kleine Programmier- und Modellierungsaufgaben überprüfen die Fähigkeit, die erlernten Programmier- und Querysprachen und Modellierungstechniken praktisch grundlegend zur Lösung kleinerer Probleme anwenden zu können. Die Hausaufgaben werden bewertet. Bei Erreichen einer Mindestpunktzahl wird ein 0,3 Notenbonus gewährt. Im Falle epidemiologischer Notsituationen oder vergleichbarer Notsituationen kann an die Stelle der Klausur eine benotete elektronische Übungsleistung oder ein Proctered Exam treten.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Empfohlene Voraussetzungen sind die Mathematikmodule des ersten Studienjahrs im Bachelor\nTUM-BWL sowie das Modul WI000275 'Management Science'.",
    "content": "In dem Modul IN8005 werden beispielhaft folgende Inhalte behandelt:\n- Datenbankmanagementsysteme, ER-Modellierung, relationale Algebra und SQL\n- Java als Programmiersprache:\n++ Grundsätzliche Konstrukte imperativer Programmierung (if, while, for, Arrays etc.) ++ Objektorientiertes Programmieren (Vererbung, Interfaces, Polymorphie etc.) ++ Grundlagen von Exception Handling und Generics IN8005: Einführung in die Informatik für andere Fachrichtungen | Introduction into Computer Science (for non informatics studies) ++ Code-Conventions ++ Java Klassenbibliothek\n- Grundlegende Algorithmen und Datenstrukturen:\n++ Algorithmusbegriff, Komplexität ++ Datenstrukturen für Sequenzen (verkettete Listen, Arrays, Stacks & Queues) ++ Rekursion ++ Hashing (Chaining, Probing) ++ Suchen (Binäre Suche, balancierte Suchbäume) ++ Sortieren (Insertion-Sort, Selection-Sort, Merge-Sort)",
    "learning_outcomes": "Nach der erfolgreichen Teilnahme an Vorlesung und Übung sind die Studierenden in der Lage, wichtige Grundbegriffe, Konzepte und Denkweisen der Informatik, speziell objektorientiertes Programmieren, Datenbanken & SQL und grundlegende Algorithmen und Datenstrukturen zu verstehen, zu überblicken und zur Entwicklung eigener Programme mit Datenbankanbindung grundlegend anwenden zu können.",
    "teaching_methods": "Vorlesung und praktische Übungen: Neben einer Zentralübung, in der die Konzepte aus der Vorlesung anhand von Beispielaufgaben vertieft werden, vermitteln die Tutorübungen, in denen unter intensiver Betreuung einfache Aufgaben am Rechner gelöst werden, wichtige praktische Grundfertigkeiten im Programmieren, um die im Selbststudium der Begleitmaterialien zur Vorlesung und Zentralübung erworbenen Kenntnisse bei den praktischen (Programmier-)Hausaufgaben selbständig anwenden zu können. Über die Tutoraufgaben- und Hausaufgabenblätter verteilt und im behandelten Aspekt den jeweils behandelten Themen angepasst, arbeiten die Studierenden in der zweiten Semesterhälfte ergänzend an einem praktischen Projekt, dass das zusammenhängende Verständnis im Hinblick auf die angestrebten Lernergebnisse weiter vertiefen soll.",
    "media": "Folienpräsentation, Tafelanschrieb, Vorlesungs- und Zentralübungsaufzeichnung, Diskussionsforen\nin E-Learning Plattformen.",
    "literature": "Kapitel aus Lehrbüchern, die in der Vorlesung als empfohlene Literatur zu den jeweiligen Themen\nbekannt gegeben werden und den Studierenden online zur Verfügung gestellt werden.",
    "lv_sws_lecturer": "Groh, Georg; Prof. Dr. rer. nat. habil.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nEinführung in die Informatik für andere Fachrichtungen (TUM BWL) (IN8005) (Vorlesung, 2 SWS)\nGroh G\nIN8005: Einführung in die Informatik für andere Fachrichtungen | Introduction into Computer Science (for non informatics\nstudies)\nÜbung zur Einführung in die Informatik für andere Fachrichtungen (TUM BWL) (IN8005) (Übung, 2\nSWS)\nGroh G [L], Dall'Olio G, Groh G, Steinberger C"
  },
  {
    "module_id": "IN8008",
    "title": "Einführung in die wissenschaftliche Programmierung",
    "level": "Bachelor",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer 60-minütigen Klausur erbracht. Fragen zu kurzen Beispielprogrammen testen, ob die Studierenden Algorithmen aus dem Bereich des wissenschaftlichen Rechnens verstehen und implementieren können. Dazu müssen auch kurze Programmabschnitte selbst implementiert werden. Fragen zu gegebenen Code-Beispielen überprüfen die Fähigkeit der Teilnehmer hinsichtlich der Einschätzung des jeweiligen Bedarfs an Rechenzeit und Speicherplatz. Die Prüfung wird je nach Studiengang als Studienleistung (bestanden/nicht bestanden) oder als Prüfungsleistung (benotet) bewertet; Einzelheiten sind der jeweiligen Satzung oder dem jeweiligen Studienplan zu entnehmen.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "",
    "content": "Elemente der Programmierung (elementare und zusammengesetzte Datentypen, Ausdrücke und Anweisungen, Techniken zur Strukturierung von Programmen, Objektorientierung) Werkzeuge des wissenschaftlichen Rechnens, insbesondere zur Visualisierung der Berechnungsergebnisse. Beispiele, die einerseits den Einsatz dieser Techniken demonstrieren und gleichzeitig exemplarisch typische Verfahren aus den folgenden Themenbereichen vorstellen sind: Gleichungslöser, numerische Quadratur sowie gewöhnliche und partielle Differentialgleichungen. IN8008: Einführung in die wissenschaftliche Programmierung | Introduction to Scientific Programming",
    "learning_outcomes": "Nach erfolgreicher Teilnahme am Modul sind die Studierenden in der Lage, sich an grundlegende Techniken des Rechnereinsatzes bei der Bearbeitung naturwissenschaftlich-technischer Fragestellungen zu erinnern und diese zu beschreiben. Sie sind weiterhin in der Lage, Beispiele für Algorithmen aus dem Bereich des wissenschaftlichen Rechnens zu verstehen, sie in einer objektorientierten Programmiersprache zu implementieren sowie zur Lösung von Beispielproblemen einzusetzen und zu beurteilen (insbesondere hinsichtlich des Bedarfs an Rechenzeit und Speicherplatz, ggf. im Verhältnis zur erzielten Genauigkeit).",
    "teaching_methods": "Das Modul besteht aus einer Vorlesung und einer begleitenden Übung. Die Inhalte der Vorlesung werden im Vortrag und durch Präsentationen vermittelt. Studierende sollen zum Studium der Literatur und der inhaltlichen Auseinandersetzung mit den Themen angeregt werden. In den Übungen werden teilweise in Gruppenarbeit konkrete Fragestellungen gemeinsam beantwortet und ausgesuchte Beispiele bearbeitet.",
    "media": "Folien, Tafelarbeit, Übungsblätter",
    "literature": "- H. P. Langtangen: A Primer on Scientific Programming with Python, Springer\n- David M. Beasley: Python - Essential Reference",
    "lv_sws_lecturer": "Bungartz, Hans-Joachim; Prof. Dr. rer. nat. habil.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nÜbungen zu Einführung in die wissenschaftliche Programmierung (IN8008) (Übung, 2 SWS)\nNeckel T [L], Jovanovic Buha I, Menhorn F, Milbradt R\nEinführung in die wissenschaftliche Programmierung (IN8008) (Vorlesung, 2 SWS)\nNeckel T [L], Neckel T, Jovanovic Buha I, Menhorn F, Milbradt R"
  },
  {
    "module_id": "IN8009",
    "title": "Algorithmen und Datenstrukturen",
    "level": "Bachelor",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 90,
    "hours_presence": 90,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer 120-minütigen schriftlichen Klausur erbracht. Wissensfragen überprüfen die Vertrautheit mit Konzepten der Informatik im allgemeinen und dem Umgang mit Algorithmen und Datenstrukturen im Speziellen. Kleine Problemstellungen überprüfen die Fähigkeit, gegebene Algorithmen auf kleine Beispiele anwenden zu können, gegebenenfalls aber auch maßgeschneiderte Datenstrukturen oder Algorithmen auszuwählen und über ihre Korrektheit bzw. Komplexität zu argumentieren.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Mathematische Grundkenntnisse aus der Schule\nKeine Voraussetzungen innerhalb des Studiums",
    "content": "Mögliche Inhalte: Entwurf und Analyse einfacher Algorithmen, Komplexitätsmaße. Abstrakte Datenstrukturen, Graphen, Bäume, Listen, Schlangen, Stapel. Sortieren, Suchen, Algorithmen auf Graphen, numerische Algorithmen, optional: Datenkompression.",
    "learning_outcomes": "Während der Teilnahme an dem Modul werden die Studierenden mit der Arbeitsweise der Informatik vertraut gemacht. Nach der erfolgreichen Teilnahme an dem Modul sind die Studierenden in der Lage, reale Aufgabenstellungen in Form abstrakter Problemstellungen zu formulieren sowie Algorithmen für die Problemlösung auszuwählen, gegebenenfalls auch IN8009: Algorithmen und Datenstrukturen | Algorithms and Data Structures zu entwerfen, zu optimieren, zu bewerten und zu implementieren. Darüber hinaus bauen die Studierenden Verständnis für elementare Begriffe und Konzepte der Informatik auf und lernen diese zu handhaben.",
    "teaching_methods": "Mit einer Präsentation, basierend auf Folien oder Whiteboard, werden grundlegende Algorithmen vermittelt und an kleinen Beispielen illustriert. In der begleitenden Zentralübung wird durch gemeinsames Lösen kleinerer algorithmischer Aufgaben der Stoff vertieft. In Übungsaufgaben, in denen gegebenenfalls ein Notenbonus erworben werden kann, wird die Fähigkeit zur eigenständigen Programmierung von Problemlösungen eingeübt.",
    "media": "Folgende Medienformen finden Verwendung:\n- Präsentationen\n- Skript\n- Übungsaufgaben mit Lösungen als Download im Internet\n- Hausaufgaben",
    "literature": "Folgende Literatur wird empfohlen:\n- D.E. Knuth. The Art of Computer Programming Vol.1-3\n- Aho,Hopcroft, Ullman: The Design and Analysis of Computer Algorithms, Addison-Wesley, 1976\n- Cormen, Leiserson, Rivest, Stein: Algorithmen - Eine Einführung, Oldenbourg 2009",
    "lv_sws_lecturer": "Räcke, Harald; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nAlgorithmen und Datenstrukturen (für ET/IT) (IN8009) (Vorlesung, 4 SWS)\nRäcke H\nÜbung zu Algorithmen und Datenstrukturen (für ET/IT) (IN8009) (Übung, 2 SWS)\nRäcke H ( Zabrodin R )"
  },
  {
    "module_id": "IN8012",
    "title": "Informatik II für Ingenieurwissenschaften",
    "level": "Bachelor",
    "language": "Deutsch/Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 105,
    "hours_presence": 45,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer 90 minütigen Klausur erbracht; es sind keinerlei Hilfsmittel zugelassen. Wissensfragen überprüfen die Vertrautheit mit den Konzepten des Software Engineering und der relationalen Datenbanksysteme. Transferaufgaben überprüfen die Vertrautheit mit der systematischen Nutzung von Methoden des Software Engineering zur Beschreibung von Problemen und Erstellung von Modellen hierfür. Kleine Szenarien überprüfen die Fähigkeit, im Bereich des Softwareentwurfs die objektorientierte Modellierungssprache UML einzusetzen und die erlernten Konzepte für Anwendungsprogrammierung im Datenbankenbereich zu gebrauchen.",
    "repetition": "Folgesemester",
    "recommended_prerequisites": "IN8011 Einführung in die Informatik 1 für Ingenieure (MSE), Computergestützte Modellierung von\nProdukten und Prozessen",
    "content": "Modellierung, Objekt-orientierte Entwurfsmethoden (UML), Grundlagen des Software- Engineering (Analyse, System-Entwurf und Objekt-Entwurf), Objektrelationales-Mapping (ORM) auf relationale Anfragesprachen (SQL), Datenintegrität, Grundlagen der Fehlerbehandlung und Mehrbenutzer-Systeme, Sicherheitsaspekte (Zugriffskontrolle, Autorisierung); je nach Ausrichtung in der Abhaltung werden noch mehr Inhalte aus Software Engineering (z.B. Tests und Implementierung von großen Software-Systemen, Entwurfsmuster) oder aus Datenbanken (z.B. Implementationsentwurf für relationale Datenbanken, Recovery / Backup) gebracht. IN8012: Informatik II für Ingenieurwissenschaften | Engineering Informatics II",
    "learning_outcomes": "Die Studierenden beherrschen wichtige Konzepte des Software Engineering und von relationalen Datenbanksystemen und können sie systematisch nutzen. Sie können Methoden des Software- Engineering für Problembeschreibungen einsetzen, und daraus Modelle erstellen. Insbesondere haben sie Fertigkeiten im Bereich des Softwareentwurfs mit der objektorientierten Modellierungssprache UML. Außerdem sind sie in der Lage die Konzepte für Anwendungsprogrammierung einzusetzen. Je nach Ausrichtung in der Abhaltung wird intensiver auf den Software Engineering Aspekt (z.B. Entwurfsmuster, mobile Systeme) oder auf den Datenbankaspekt (z.B. Datenbankanwendungsprogrammierung, Relationale Entwurfstheorie) eingegangen.",
    "teaching_methods": "Vorlesung, Webschnittstelle für Datenbankabfragen zum Selbststudium, interaktive Übungen zu Problemen der Modellierung im Softwareentwurf mit Einzel- und Gruppenarbeit",
    "media": "Vorlesung mit animierten Folien",
    "literature": "- B. Brügge, A. Dutoit: Objektorientierte Softwaretechnik. Mit Entwurfsmustern, UML und Java,\nPearson Verlag, 2004.\n- B. Brügge, A. Dutoit: Object-Oriented Software Engineering: Using UML, Patterns and Java,\nPrentice Hall, 3rd Edition, 2009.\n- Alfons Kemper, André Eickler: Datenbanksysteme. Eine Einführung. 8., aktualisierte und\nerweiterte Auflage, Oldenbourg Verlag, 2011\n- A. Kemper, M. Wimmer: Übungsbuch: Datenbanksysteme. 3. Auflage Oldenbourg Verlag, 2012",
    "lv_sws_lecturer": "Kemper, Alfons; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nInformatik II für Ingenieurwissenschaften (BSc Engineering Science) (IN8012) (Vorlesung, 3 SWS)\nKemper A, Anneser C, Ellmann S"
  },
  {
    "module_id": "IN8013",
    "title": "Geometrische Modellierung und Visualisierung",
    "level": "Bachelor",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 105,
    "hours_presence": 45,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer 90-minütigen Klausur erbracht. In dieser soll nachgewiesen werden, dass die Studierenden mit den Grundbegriffen und den grundsätzlichen Konzepten und Methoden im Bereich der Differentialgeometrie, der geometrischen Flächenmodellierung und der wissenschaftlichen Visualisierung vertraut sind. Dies wird zum einen über Wissensfragen überprüft. Zum anderen zeigen die Studierenden, dass sie die erlernten Konzepte und Methoden anwenden können, um Lösungen für spezielle Probleme in den diskutierten Gebieten zu entwickeln. Die Prüfung umfasst den gesamten Stoff der Vorlesung und assoziierten Übung. In der Prüfung sind keine Hilfsmittel erlaubt.",
    "repetition": "Folgesemester",
    "recommended_prerequisites": "Einführung in die Informatik 1/2 für Ingenieure, Mathematik I und II, Computer Aided Modeling of\nProducts and Processes",
    "content": "Einführung in the Interpolations- und Approximationstheorie sowie die Differentialgeometrie, Level- of-detail Repräsentationen, Unterteilungsflächen, Flächenrekonstruktion aus Datenfeldern, direkte und indirekte Volumenvisualisierung, Strömungsvisualisierung, Grundlagen des Rasterisierungs- basierten Rendering, lokale Beleuchtungsmodelle.",
    "learning_outcomes": "Am Ende des Semesters haben sich die Studierenden ein vertieftes Wissen über die Grundlagen der Differentialgeometrie der Kurven und Flächen, die mathematische Beschreibung und Analyse von Flächen und die grundlegenden Methoden der wissenschaftlichen Visualisierung IN8013: Geometrische Modellierung und Visualisierung | Geometric Modelling and Visualization angeeignet. Die Studierenden kennen die speziellen Repräsentationen von Flächen im Bereich der Computergrafik, und sie sind mit modernen Techniken der geometrischen Modellierung, etwa Unterteilungsflächen, vertraut. Sie kennen die unterschiedlichen Stufen der Visualisierungspipeline und können die grundlegenden Methoden dieser Stufen beschreiben. Die Studierenden können existierende Techniken in Bezug auf Qualität und Effizienz analysieren und kategorisieren, und sie können neue Ansätze unter Berücksichtigung spezifischer Anforderungen modellieren und entwickeln. In der Vorlesung lernen die Studierenden verfügbare Modellierungs- und Visualisierungssysteme kennen, und sie können diese Systeme verwenden, um eigene Modelle und Visualisierungen zu erstellen.",
    "teaching_methods": "Das Modul setzt sich aus der Vorlesung und der assoziierten Übung zusammen. In der Vorlesung vermittelt der Dozent das Bereichs-spezifische Wissen, verweist auf relevante Artikel und ermutigt die Studierenden dazu, die diskutierten Ansätze weiter zu vertiefen und sie in Relation zueinander zu setzen. Sowohl in der Vorlesung als auch der Übung wird anhand von konkreten Beispielen die Anwendung der diskutierten Konzepte und Methoden demonstriert. In der Übung werden Übungsaufgaben vom Dozenten bearbeitet, und es werden anhand von verfügbaren Computer-Systemen spezielle Methoden der Rechner-gestützten geometrischen Modellierung und Visualisierung demonstriert.",
    "media": "Vortragsfolien, Tafelanschrieb, Online-Tutorien und Demonstrationen",
    "literature": "- Mortensen, Geometric Modeling, 2nd Edition, Wiley Publishers;\n- Farin, Curves and Surfaces for Computer Aided Geometric Design, Academic Press;\n- Munzner, Visualization Analysis & Design, CRC Press;\n- Hansen & Johnson, The Visualization Handbook, Elsevier;\n- Schumann & Müller, Visualisierung - Grundlagen und allgemeine Methoden, Springer",
    "lv_sws_lecturer": "Westermann, Rüdiger; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN8015",
    "title": "Systems Engineering",
    "level": "Bachelor",
    "language": "Deutsch/Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 105,
    "hours_presence": 45,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer Klausur (90 Minuten) erbracht. Dabei sollen die Studierenden nachweisen, dass Sie in begrenzter Zeit und ohne Hilfsmittel in der Lage sind, Probleme der Entwicklung komplexer cyberphysikalischer Systeme zu erkennen und durch die erlernten Fähigkeiten des Anforderungsmanagements, des Entwurfs, der Modellierung, der Analyse und des Testens unter Nutzung problemadäquater Vorgehensmodelle zu lösen.",
    "repetition": "Folgesemester",
    "recommended_prerequisites": "IN8011 Einführung in die Informatik 1 für Ingenieure (MSE), IN8012 Einführung in die Informatik 2\nfür Ingenieure (MSE), Computergestützte Modellierung von Produkten und Prozessen, Software\nEngineering",
    "content": "Einführung in das Systems Engineering, Systemmodellierung, Entwicklungsmethoden, Phasenmodelle, Projektmanagement, Anforderungsermittlung/-analyse, Schnittstellen, Spezifikation, Systementwurf, Architektur und Schnittstellenspezifikation, Modul-, Integrations- und Systemtest, Versions- und Konfigurationsmanagement, Software- und Systemwartung",
    "learning_outcomes": "Nach erfolgreicher Teilnahme an dem Modul sind die Studierenden in der Lage:\n- die unterschiedlichen Aktivitäten der Systementwicklung zu benennen, voneinander abzugrenzen\nund zueinander sowohl inhaltlich als auch in ihrer zeitlichen Verzahnung in Bezug zu setzen,\n- Spezifika unterschiedlicher technischer Domänen und die Konsequenz ihrer Unterschiede für die\nEntwicklung zu benennen, IN8015: Systems Engineering | Systems Engineering\n- grundlegende Abstraktionen, wie etwa Schnittstellen, und Modellierungsansätze für\ncyberphysikalische Systeme zu verstehen und im Systementwurf anzuwenden sowie\n- komplexe cyberphysikalische Systeme auf einem hohen Abstraktionsgrad mit üblichen\nFormalismen zu modellieren.",
    "teaching_methods": "Die Vorlesung vermittelt einerseits abstrakte Sachverhalte, was anhand von Beispielen am besten im Vortrag bzw. der Präsentation geschehen kann. Andererseits werden Fähigkeiten der Systemmodellierung und des Systemverständnisses vermittelt, die in Übungen entwickelt und erprobt werden.",
    "media": "",
    "literature": "- Tim Weilkiens: Systems Engineering with SysML/UML. Morgan Kaufmann Publishers Inc, 2008\n- Alexander Kossiakoff und William N. Sweet: Systems Engineering Principles and Practice (Wiley\nSeries in Systems\nEngineering and Management) von von John Wiley & Sons 2002",
    "lv_sws_lecturer": "Pretschner, Alexander; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nSystems Engineering (BSc Engineering Science) (IN8015) (Vorlesung mit integrierten Übungen, 3\nSWS)\nPretschner A [L], Lipp S, Pretschner A"
  },
  {
    "module_id": "IN8019",
    "title": "Wissenschaftliche Visualisierung",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 4,
    "hours_total": 120,
    "hours_self_study": 75,
    "hours_presence": 45,
    "examination_achievements": "The exam takes the form of a written test of 75 minutes. The students demonstrate that they can answer questions concerning the theoretical and methodological foundations of scientific visualization. They know important application domains where visualization methods are used, and they are familiar with the application-specific data modalities a visualization person is confronted with. They also demonstrate the ability to apply the learned concepts and methods, such as the color mapping, iso-contouring or particle-tracing, to derive solutions for specific visualization problems. The exam captures all content discussed in the lecture.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "None",
    "content": "Visualization pipeline (data acquisition, filtering, display), information visualization vs. scientific visualization, grids and grid construction (Delaunay triangulation), interpolation in grids (inverse distance weighting, radial basis functions), discretization aspects, visualization for scalar fields (color coding, iso-contours and iso-surfaces, volume rendering, vector field visualization (particle- based visualization).",
    "learning_outcomes": "After successful completion of the module, the students have gained advanced knwowledge concerning the visualization pipeline, ranging from data acquisition to the final image of this data. This includes knowledge about the application specific data representations, data interpolation and IN8019: Wissenschaftliche Visualisierung | Scientific Visualization approximation techniques for discrete data sets, data filtering techniques like convolution, as well as the final mapping stage to generate a renderable representation from the data. The students know the methods which are used in scientific visualiztion to graphically depict 2D and 3D scalar and vector fields, including isocontouring, direct volume rendering and flow visualization. They can analyse and categorize availaible techniques in terms of quality, efficiency, and suitability for a particular data type, and they can model and develop new approaches considering application- specific requirements.",
    "teaching_methods": "The modul consists of the lecture, where the lecturer conveys to the students the area-specific knowledge, points towards relevant articles and ecourages the students to read and put into relation the presented approaches, and gives examples demonstrating the application of these approaches. In some online demonstration the lecturer introduces state-of-the-art tools for scientific visualization.",
    "media": "Powerpoint course slides, white board exercises, online tutorials and demonstrations",
    "literature": "Schumann, Müller: Visualisierung - Grundlagen und allgemeine Methoden, Springer Verlag\nC. Hansen, C. Johnson (Ed.): The handbook of Visualization, Academic Press",
    "lv_sws_lecturer": "Westermann, Rüdiger; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nVisual Data Analytics (IN2026, IN8019) (Vorlesung mit integrierten Übungen, 4 SWS)\nKehrer J, Weitz S, Westermann R"
  },
  {
    "module_id": "IN8021",
    "title": "BioInnovation: von offenen klinischen Fragestellungen zu Lösungskonzepten",
    "level": "Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester/Sommersemester",
    "credits": 10,
    "hours_total": 300,
    "hours_self_study": 210,
    "hours_presence": 90,
    "examination_achievements": "Unterschiedliche Phasen eines Medizintechnikprojekts (insbesondere Problemdefinition, klinischer Hintergrund und Problemstellung, Konzeption, Design, Entwicklung, Implementierung, Test) werden von Teilnehmern in einem Team innerhalb einer speziellen medizinischen Fachrichtung (z.B. Urologie, Gefäßchirurgie, Unfallchirurgie) bearbeitet. Dabei bestehen Teams aus Mitgliedern verschiedener Fach- und Studienrichtungen, um die Kreativität und Interdisziplinarität zu fördern. Ergebnisse der Teamarbeit werden in verschiedenen Stadien des Projektes vorgestellt und durch die Dozenten bewertet. Der jeweilige Dozent gibt dabei zu Beginn des Moduls bekannt, wie die Einzelpräsentationen gewichtet sind.",
    "repetition": "",
    "recommended_prerequisites": "Erweiterte allgemeine Kenntnisse in der jeweiligen Fachrichtung (Master-Niveau)",
    "content": "In diesem Praktikum lernen Studenten, wie klinische Bedürfnisse erfolgreich innerhalb des normalen Klinikalltags identifiziert werden und daraus mögliche und realistische Lösungsansätze zu deren Behebung gefunden werden können. Hierfür lernen Studenten Werkzeuge kennen, die dabei helfen, erfolgreich und innovativ in der Medizintechnik zu arbeiten. Der Kurs beinhaltet dabei alle Schritte von der Identifikation klinischer Bedürfnisse, deren Auswahl und Evaluierung, sowie der Ausarbeitung entsprechender Konzepte und dem Bau erster Prototypen mit entsprechender Tests. Innerhalb des Kurses werden dabei die notwendigen Schritte zur Erstellung von Ideen und Konzepten durchlaufen, wobei die Studenten in interdisziplinären Teams aus verschiedenen Fachbereichen arbeiten, darunter Ingenieurwesen, Wirtschaftswissenschaften und Design. Während der Projektphase werden die Teams von Coaches sowohl aus dem Ingenieurwesen als auch aus der Medizin begleitet, um direkten und kontinuierlichen Austausch untereinander zu fördern. Insgesamt werden folgenden Punkte im Kurs behandelt:\n- Identifikation von klinischen Bedürfnissen\n- Konzeption mittels Brainstormings\n- Ausarbeitung von Konzepten und Bau von Prototypen\n- Arbeit in interdisziplinären Teams\nWeiter Informationen können auf der Kursseite gefunden werden: http://campar.in.tum.de/Chair/TeachingWS15ClinicalNeedToConcept",
    "learning_outcomes": "Nach der erfolgreichen Teilnahme an diesem Modul sind die Studierenden in der Lage:\n• In einem anspruchsvollen medizinischem Fachgebiet Lösungskonzepte für die jeweilige\nFachdisziplin (z.B. Urologie, Gefäßchirurgie, Unfallchirurgie) zu entwickeln.\n• Medizinische Probleme im klinischen Alltag zu identifizieren, um daraus entsprechende ungelöste\nklinische Bedürfnisse abzuleiten.\n• Auf Basis identifizierter klinischer Bedürfnisse im Team erfolgreich Brainstormings durchzuführen\nund Lösungskonzepte abzuleiten.\n• Komplette Entwicklungsprozesse für Medizin- und Medizintechnikprodukte zu verstehen, wobei\nder Ablauf von der Auffindung klinischer Bedürfnissen bis zum Test erster Prototypen durchlaufen wird.\n• Erfolgreiche klinische Observation mit Ärzten und medizinischem Personal durchzuführen, sowie\nim klinischen Alltag passiv teilzunehmen (Beobachtung).\n• Medizinische Abläufe innerhalb der Klinik für eine spezielle Fachrichtung zu verstehen.\n• Methoden für eine erfolgreiche Teambildung anzuwenden.",
    "teaching_methods": "Präsentation, Gruppenarbeit, Experiment, Observation, Übung, Aufgaben zum Selbststudium",
    "media": "Folienpräsentation, Flipchart, Whiteboard",
    "literature": "• http://campar.in.tum.de/Chair/BioInnovation\n• http://biodesign.stanford.edu/bdn\n• http://www.bioinnovate.ie/",
    "lv_sws_lecturer": "Navab, Nassir; Prof. Ph.D.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN8024",
    "title": "Informationsmanagement für Digitale Geschäftsmodelle",
    "level": "Bachelor",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 120,
    "hours_presence": 60,
    "examination_achievements": "Die Modulprüfung besteht aus einer 90-minütigen Klausur in der ohne Hilfsmittel nachgewiesen werden soll, dass die Grundlagen und Methoden des Informationsmanagements verstanden wurden, Methoden zur Ermittlung des Informationsbedarfs angewendet werden können, die Qualität von Informationen bewertet werden können und Methoden der Aufwandsschätzung angewendet werden können. Darüber hinaus soll nachgewiesen werden, dass die Bedeutung der Ressource „Information“ im betrieblichen Kontext verstanden wurde, die Beziehung zwischen Informationstechnologie und Unternehmensstrategie analysiert und bestehende Geschäftsmodelle bewertet und neue Geschäftsmodelle entwickelt werden können. Weiterhin soll mit einer Hausarbeit nachgewiesen werden, dass eine vorgegebene wissenschaftliche Problemstellung im Themengebiet Informationsmanagement selbstständig bearbeitet werden kann.",
    "repetition": "Semesterende",
    "recommended_prerequisites": "Keine",
    "content": "Das Modul „Informationsmanagement für Digitale Geschäftsmodelle“ beschäftigt sich inhaltlich mit den Modellen und Konzepten des Informationsmanagements. Insbesondere werden dabei das Management der Informationswirtschaft (Management der Informationsnachfrage, des Informationsangebots und der Informationsverwendung), das Management der Informationssysteme (Management der Daten, der Prozesse und des Anwendungslebenszyklus), das Management der Informations- und Kommunikationstechnik IN8024: Informationsmanagement für Digitale Geschäftsmodelle | Information Management for Digital Business Models (Wartung und Betrieb der IKT, Aneignung von IKT, Management der Speicherung und Kommunikation, Management der Prozesse, Management von Technikbündeln), die Führungsaufgaben des Informationsmanagements (Organisation des IM, Rolle des CIO, Sourcingentscheidungen, Geschäftsmodelle, Strategie und IM) und die Einordnung des Informationsmanagements in den Unternehmenskontext behandelt.",
    "learning_outcomes": "Nach dem Modul „Informationsmanagement für Digitale Geschäftsmodelle“ sind die Studierenden in der Lage, die Grundlagen des Informationsmanagements zu verstehen, Methoden zur Ermittlung des Informationsbedarfs anzuwenden, die Qualität von Informationen zu bewerten und Methoden der Aufwandsschätzung anzuwenden. Weiterhin sind die Studierenden in der Lage, die Bedeutung der Ressource „Information“ im betrieblichen Kontext zu verstehen, die Beziehung zwischen Informationstechnologie und Unternehmensstrategie zu analysieren und bestehende Geschäftsmodelle zu bewerten und neue Geschäftsmodelle zu entwickeln.",
    "teaching_methods": "Das Modul besteht aus einer Vorlesung, einer begleitenden Übungsveranstaltung und einem empirischen Forschungsteil. Die Inhalte der Vorlesung werden im Vortrag und durch Präsentationen vermittelt. In den Übungen werden konkrete Fragestellungen beantwortet und Übungsaufgaben in Einzel- und/oder Gruppenarbeit unter anderem durch Studium von Literatur und Materialrecherchen bearbeitet. Der empirische Forschungsteil umfasst die Teilnahme, das Verstehen von empirischen Forschungsvorhaben sowie das Verfassen einen wissenschaftlichen Essays.",
    "media": "Folien, PowerPoint, Tafelanschrieb/-arbeit, Übungsblätter",
    "literature": "Krcmar, Helmut. Informationsmanagement. 6. Aufl., Springer, 2015. ISBN: 978-3-662-45862-4\nLaudon, Kenneth C., and Jane Price Laudon. Management information systems: Managing the\ndigital firm. 15th edition, Pearson, 2017\nOsterwalder, Alexander, and Yves Pigneur. Business model generation: A handbook for\nvisionaries, game changers, and challengers. Vol. 1. John Wiley & Sons, 2010",
    "lv_sws_lecturer": "Großklags, Jens; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nInformation Management for Digital Business Models (IN8024) (Vorlesung mit integrierten\nÜbungen, 4 SWS)\nGroßklags J [L], Großklags J, Chen M, Syrmoudis E\nIN8024: Informationsmanagement für Digitale Geschäftsmodelle | Information Management for Digital Business Models"
  },
  {
    "module_id": "IN8027",
    "title": "Introduction to Informatics for Students of Management & Technology – Programming Lab Course",
    "level": "Bachelor",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 120,
    "hours_presence": 30,
    "examination_achievements": "Type of assessment: individual grading of submitted written exercise work (“Übungsleistung / sonstige schriftliche Leistung” according to TUM-APSO): short project reports and project artefacts (code, software engineering process documents (e.g. UML diagrams) etc.). During the four-week block period, students submit their intermediate and final work results (especially including their written program-code and documents of the software engineering process) electronically via a revision control system (usually GIT). Furthermore, at the end of the block period, each student submits a small, concise project report, in which her individual contributions to the work results are described. The submitted written exercise work documents the student’s degree of acquaintance with the programming language Java and their practical skills in terms of programming in the small and allows to assess how well the students are able to apply database-systems and SQL, basic object- oriented programming and Java, and basic algorithms and data structures for solving small to medium sized programming problems. The submitted exercise work also shows how well the participants are acquainted with and can apply the basics of a modern agile software development process. Individual project reports, the documented submission history in the revision control environment, and the documents created in the structured software development process ensure that student contributions may be assessed on an individual basis. The retake exam is offered in the form of a written exam (120 minutes, closed book) at the end of the semester.",
    "repetition": "Semesterende\nIN8027: Introduction to Informatics for Students of Management & Technology – Programming Lab Course | Introduction\nto Informatics for Students of Management & Technology – Programming Lab Course",
    "recommended_prerequisites": "None.\nParticipants should attend the module IN8005: “Introduction to Informatics for Students of\nManagement and Technology” in the same semester.",
    "content": "• Object-oriented software development with Java\n• SQL integration in Java\n• Agile software development processes (typically Scrum)\n• Revision control systems (typically GIT)",
    "learning_outcomes": "Upon successful completion of the module, participants are acquainted with the programming language Java and master programming in the small. Participants are able to apply the contents taught in the module IN8005 (foundations of database-systems and SQL, foundations of object- oriented programming and Java, foundations of algorithms and data structures) for solving small to medium sized programming problems in their professional field and/or for later scientific work. Participants are acquainted with and can apply the basics of a modern agile software development process (typically Scrum) for the development of solutions to these problems and are able to collaborate with informatics professionals in analyzing and evaluating the complexity of possible software solutions for professional problem settings. Students are able to complete the tasks of their project in a team environment. They solve the given task by constructively and conceptually collaborating in a team. They are able to integrate involved persons into the various tasks considering the group situation. Furthermore, the students are able to conduct solution processes through constructively and conceptually acting in a team.",
    "teaching_methods": "The lab-course takes the form of a four-week block lab-course taking place in the second half of the semester. In the first half of the semester, the students learn the theoretical background for their work in this module in the module IN8005 (lecture and exercise course and voluntary tutor- exercises). Students work in groups of five on a practical programming problem (typically from the field of management) using a small database. According to the software development process, regular group meetings and meetings with the teaching staff take place in which the progress is monitored and assistance is given.",
    "media": "slides, problem specification sheets, moderated discussion boards in suitable e-learning platforms,\n(software development environment), (group and tutor meetings).",
    "literature": "• Learning Materials for IN8005 (continuously updated).\n• S. Reges, M.Stepp: Building Java Programs: A Back to Basics Approach, Pearson 2014\n• K. Rubin: Essential Scrum, Addison Wesley, 2012\nIN8027: Introduction to Informatics for Students of Management & Technology – Programming Lab Course | Introduction\nto Informatics for Students of Management & Technology – Programming Lab Course",
    "lv_sws_lecturer": "Groh, Georg; Prof. Dr. rer. nat. habil.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nIntroduction to Informatics for Students of Management & Technology – Programming Lab Course\n(IN8027) (Praktikum, 2 SWS)\nGroh G [L], Anschütz M, Groh G"
  },
  {
    "module_id": "IN8029",
    "title": "Informatik Bachelor-Praktika für Management",
    "level": "Bachelor",
    "language": "Deutsch/Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester/Sommersemester",
    "credits": 10,
    "hours_total": 300,
    "hours_self_study": 210,
    "hours_presence": 90,
    "examination_achievements": "Prüfungsart: Projektarbeit Unterschiedliche Phasen eines Softwareprojekts werden von den Teilnehmern im Team bearbeitet. Dabei können sich einzelne Teams auch mit nur einer oder mehreren ausgewählten Phasen des Projekts beschäftigen. Damit weisen die Teilnehmer nach, dass sie einen Projektauftrag bzw. - teilauftrag als definiertes Ziel in definierter Zeit und unter Einsatz geeigneter Werkzeuge im Team ausführen können. Bei der Konzipierung und Realisierung zeigen sie, dass sie ingenieurmäßige Methoden und Modelle anwenden und die Risiken und Probleme in den verschiedenen Phasen eines Softwareprojekts abschätzen und lösen können. Um auch die kommunikative Kompetenz bei der Dokumentation der Arbeit und der Darstellung der Ergebnisse zu überprüfen, kann eine schriftliche Ausarbeitung angefertigt und sollen die Ergebnisse schriftlich oder mündlich präsentiert werden. Mündliche Präsentationen haben den Umfang von 10 bis 20 Minuten. Schriftliche Ausarbeitungen können im Umfang variieren, sollten aber 10 Seiten nicht übersteigen. In die Benotung fließen die Bewertung der erstellten Artefakte, die Bewertung der Mitarbeit in den Teams sowie die schriftlichen oder mündlichen Präsentationen der Ergebnisse ein. Dieses Praktikum wird von mehreren Dozenten mit unterschiedlichen didaktischen Konzepten angeboten. Vor Beginn des jeweiligen Praktikums wird von den Dozenten bekannt gegeben, welche Artefakte zu entwickeln sind, und wie die einzelnen Leistungen zur Ermittlung der Note gewichtet werden.",
    "repetition": "Folgesemester\nIN8029: Informatik Bachelor-Praktika für Management | Informatics Bachelor Practical Courses for Management",
    "recommended_prerequisites": "IN0006 Einführung in die Softwaretechnik, IN0008 Grundlagen: Datenbanken, IN0009 Grundlagen:\nBetriebssysteme und Systemsoftware, IN0010 Grundlagen: Rechnernetze und Verteilte Systeme,\nelementare Programmierkenntnisse",
    "content": "- Umsetzung eines Softwareprojekts oder -teilprojekts im Team\n- Ingenieurmäßige Methoden und Modelle zur Softwareentwicklung in verschiedenen Bereichen\nder Informatik\n- Techniken zur Dokumentation und Präsentation von Ergebnissen bzw. Zwischenergebnissen bei\nder Softwareentwicklung Dieses Modul wird von verschiedenen Lehrstühlen angeboten, so dass die Fachlichkeit des Projekts aus dem Gebiet des jeweiligen Lehrstuhls stammt (z.B. Datenbanken, Informationssysteme, Netzwerke, Groupware, Grafik, Robotik, Bilderkennung).",
    "learning_outcomes": "Teilnehmer sind in der Lage, ein kleines Softwaresystem im Team zu konzipieren und zu implementieren. Sie können dabei ingenieurmäßige Methoden und Modelle aus den verschiedenen Bereichen der Informatik anwenden, um die einzelnen Phasen der Realisierung des Projekts durchzuführen. Sie kennen die Risiken und typischen Probleme in Softwareprojekten und die Methoden, damit umzugehen. Sie verfügen über die Kompetenz, über ihre Projektarbeit schriftlich und mündlich zu berichten.",
    "teaching_methods": "Die Teilnehmer üben das systematische Software-Engineering anhand eines kleinen Systems in Kleingruppen nach Vorgabe und mit enger Zeitkontrolle (Entwurf, Implementierung, Test). Teilergebnisse der Gruppenarbeit sind in Vorträgen zu präsentieren. Entwurf, Projektplanung und Implementierung sind zu dokumentieren.",
    "media": "Projektor, Folien, Tafel, Plattform zum kooperativen Arbeiten, Softwareentwicklungsumgebungen",
    "literature": "Spezialliteratur zum Thema",
    "lv_sws_lecturer": "Neumann, Thomas; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nPraktikum - iPraktikum, iOS Praktikum (IN0012, IN2106, IN2175, IN2128, IN4049) (Praktikum, 6\nSWS)\nKrusche S [L], Krusche S, Linhuber M, Sölch M\nIN8029: Informatik Bachelor-Praktika für Management | Informatics Bachelor Practical Courses for Management\nPraktikum - Internet-Praktikum - iLabX (IN0012, IN2106, IN4240) (Praktikum, 6 SWS)\nPahl M [L], Carle G, Holzinger K, Stubbe H, Wüstrich L, Kirdan E, Gallenmüller S, Lübben C,\nSchwarzenberg C, Simon M\nBachelor-Praktikum - IT-basiertes Lernen gestalten (IN0012, IN4138) (Praktikum, 6 SWS)\nUtesch M"
  },
  {
    "module_id": "IN8030",
    "title": "Informatik Master-Praktika für Management",
    "level": "Master",
    "language": "Deutsch/Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester/Sommersemester",
    "credits": 10,
    "hours_total": 300,
    "hours_self_study": 210,
    "hours_presence": 90,
    "examination_achievements": "Prüfungsart: Projektarbeit Unterschiedliche Phasen eines Softwareprojekts (insbesondere Definition, Design, Entwicklung, Implementierung, Dokumentation, Test) anhand einer spezifischen Informatikanwendung werden von den Teilnehmern im Team bearbeitet. Dabei können sich einzelne Teams auch mit nur einer oder mehreren ausgewählten Phasen des Projekts beschäftigen. Aktuelle anwendungsspezifische Methoden und Systeme kommen hierbei zum Einsatz. Die Ergebnisse der Arbeiten werden schriftlich dokumentiert und ggf. mündlich präsentiert. Der jeweilige Dozent gibt vor Beginn bekannt, wie die einzelnen Leistungen zur Ermittlung der Note gewichtet werden.",
    "repetition": "Folgesemester",
    "recommended_prerequisites": "eventuell Vorkenntnisse aus Wahlbereich nötig",
    "content": "- Umsetzung einer größeren Softwareanwendung oder -teilanwendung im Team\n- Anwendungsspezifische Methoden und Systeme nach aktuellem Stand der Technik\n- Techniken zur Dokumentation und Präsentation von Ergebnissen bzw. Zwischenergebnissen bei\nder Anwendungsentwicklung Dieses Modul wird von verschiedenen Lehrstühlen angeboten, so dass die Fachlichkeit der Anwendung aus dem Gebiet des jeweiligen Lehrstuhls stammt (z.B. Datenbanken, Compilerbau, Informationssysteme, Netzwerke, Groupware, Grafik, IN8030: Informatik Master-Praktika für Management | Informatics Advanced Practical Courses for Management Robotik, Bilderkennung).",
    "learning_outcomes": "Teilnehmer beherrschen in einem anspruchsvollen Informatik-Fachgebiet die methodisch saubere Entwicklung von Informatikanwendungen, welche aus dem Gebiet des jeweiligen Lehrstuhls stammen (z.B. Datenbanken, Informationssysteme, Netzwerke, Groupware, Grafik, Robotik, Bilderkennung). Sie können anwendungsspezifische Methoden und Systeme einsetzen, die dem aktuellen Stand der Technik entsprechen. Sie können mit anderen im Team zielorientiert arbeiten und beherrschen die Techniken, um das Vorgehen zu dokumentieren und die Ergebnisse zu präsentieren.",
    "teaching_methods": "Die Teilnehmer üben das systematische Software-Engineering anhand eines anspruchsvollen Projekts in Kleingruppen nach Vorgabe und mit enger Zeitkontrolle (Entwurf, Implementierung, Test). Teilergebnisse der Gruppenarbeit sind in Vorträgen zu präsentieren. Die einzelnen Phasen der Systementwicklung sind zu dokumentieren.",
    "media": "Projektor, Folien, Tafel, Plattform zum kooperativen Arbeiten, Softwareentwicklungsumgebungen,\nanwendungsspezifische Werkzeuge",
    "literature": "Von den Dozenten anzugeben, fachspezifisch",
    "lv_sws_lecturer": "Kemper, Alfons; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nMaster-Praktikum - Enterprise Software Engineering am Beispiel von SAP (IN2128, IN2106,\nIN212801) (Praktikum, 6 SWS)\nWittges H [L], Fleischle A, Landler P\nMaster-Praktikum - Entwicklung innovativer Services am Beispiel von SAP Technologien (IN2128,\nIN2106, IN212802) (Praktikum, 6 SWS)\nWittges H [L], Fuchs S, Haug K, Wittges H, Wolf N"
  },
  {
    "module_id": "IN8031",
    "title": "Informatik Master-Seminare für Management",
    "level": "Master",
    "language": "Deutsch/Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester/Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 120,
    "hours_presence": 30,
    "examination_achievements": "Prüfungsart: Wissenschaftliche Ausarbeitung Vor Beginn des Seminars (in der Regel am Ende des vorangegangenen Semesters) erhält jeder Teilnehmer ein anspruchsvolles wissenschaftliches Thema, zu dem er unter Verwendung selbst recherchierter wissenschaftlicher Literatur eine schriftliche Ausarbeitung anfertigt. Die Ergebnisse der Arbeit werden den anderen Teilnehmern des Seminars in einem Vortrag und unterstützt durch visuelle Medien wie Beamer oder Folien präsentiert. Bewertet wird auch, wie der Studierende auf Fragen, Anregungen und Diskussionspunkte zu seiner Arbeit und Präsentation eingeht und wie er sich an der wissenschaftlichen Diskussion zu den Arbeiten und Vorträgen der anderen Teilnehmer beteiligt. Vor Beginn des Seminars wird vom jeweiligen Dozenten bekannt gegeben, wie die einzelnen Leistungen zur Ermittlung der Note gewichtet werden.",
    "repetition": "Folgesemester",
    "recommended_prerequisites": "eventuell Vorkenntnisse (Wahlmodule) aus dem jeweiligenThemengebiet nötig",
    "content": "- Selbständige Erarbeitung eines anspruchsvollen wissenschaftlichen Themas\n- Anfertigung einer Seminararbeit mit Quellenübersicht\n- Präsentation und Diskussion wissenschaftlicher Ergebnisse\nDieses Modul wird von allen IN-Lehrstühlen angeboten. Die Lehrstühle wählen geeignete Themen aus ihrem Fachgebiet und unterstützen die Studierenden beim Erlernen der fachlichen und wissenschaftlichen Fertigkeiten. IN8031: Informatik Master-Seminare für Management | Informatics Advanced Seminar Courses for Management",
    "learning_outcomes": "Teilnehmer besitzen die notwendigen methodischen und überfachlichen Fertigkeiten, sich in ein anspruchsvolles wissenschaftliches Thema im Bereich Informatik einzuarbeiten, selbständig dazu eine wissenschaftliche Seminararbeit anzufertigen, sie zu präsentieren und die Ergebnisse zu analysieren und vergleichend zu bewerten. Sie beherrschen die Arbeit mit wissenschaftlicher Literatur (recherchieren, bewerten, zitieren) und können wesentliche Aspekte in einer Ausarbeitung darstellen und in einem Vortrag präsentieren.",
    "teaching_methods": "Teilnehmer erarbeiten selbständig Seminararbeiten zu einem anspruchsvollen wissenschaftlichen Thema, präsentieren und diskutieren ihre Ergebnisse. Die begleitende Ausarbeitung fasst die wesentlichen Konzepte des Themas zusammen und liefert eine Quellenübersicht.",
    "media": "Projektor, Folien, Tafel, Ausarbeitung, eventuell Toolpräsentation und/oder Animationen",
    "literature": "Wissenschaftliche Veröffentlichungen zum jeweiligen Themengebiet",
    "lv_sws_lecturer": "Kemper, Alfons; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nBachelor/Master-Seminar - Behavioral Insights in the Age of Big Data (IN0014, IN2107, IN2396,\nIN4424) (Seminar, 2 SWS)\nGroßklags J [L], Chen M\nBachelor/Master-Seminar - Special Topics in Cyber Trust (IN0014, IN2107, IN2396, IN4989)\n(Seminar, 2 SWS)\nGroßklags J [L], Chen M, Großklags J, Löfflad C, Syrmoudis E, Ullstein C\nBachelor/Master-Seminar - Data Analytics for Cybercrime and Undesirable Online Behaviors\n(IN0014, IN2107, IN2396, IN4896) (Seminar, 2 SWS)\nGroßklags J [L], Großklags J\nSeminar - Usable Security and Privacy (IN0014, IN2107, IN2396, IN4932) (Seminar, 2 SWS)\nGroßklags J [L], Großklags J, Patil S\nBachelor/Master-Seminar - Security and Privacy Economics (IN0014, IN2107, IN2396, IN4892)\n(Seminar, 2 SWS)\nGroßklags J [L], Großklags J, Syrmoudis E\nMaster-Seminar - Digital Transformation (IN2107, IN2396, IN4831) (Seminar, 2 SWS)\nMaster-Seminar - Digital Transformation & Sustainability (IN2107, IN4426) (Seminar, 2 SWS)\nKrcmar H [L], Böttcher T, Weber M\nMaster-Seminar - EAM Miniprojekte (IN2107, IN4768) (Seminar, 2 SWS)\nMatthes F [L], Matthes F, Tobisch F\nMaster-Seminar - Scientific Methods in Information Systems (IN2107, IN4439) (Seminar, 2 SWS)\nRinderle-Ma S [L], Rinderle-Ma S\nMaster-Seminar: Trustworthy AI for Medicine (IN2107, IN45048) (Seminar, 2 SWS)\nRückert D [L], Hölzl F, Knolle M"
  },
  {
    "module_id": "IN9006",
    "title": "Entrepreneurship for Small Software-oriented Enterprises",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 2,
    "hours_total": 60,
    "hours_self_study": 45,
    "hours_presence": 15,
    "examination_achievements": "Die Prüfungsleistung wird in Form von zwei Präsentationen (Zwischen- und Abschlusspräsentation, jeweils 15-20 Minuten, Gewichtung: 30/70) erbracht. Die Präsentationen enthalten die Ergebnisse einer Fallbearbeitung zur Gründung eines kleinen softwareorientierten Unternehmens in einer Gruppe. Es wird nachgewiesen, dass die notwendigen Kenntnisse hinsichtlich Marktanalyse, Finanzplanung und die Erarbeitung eines Alleinstellungsmerkmals vorhanden sind und in Grundzügen angewendet werden können.",
    "repetition": "",
    "recommended_prerequisites": "Keine",
    "content": "Inhalte umfassen:\n- Techniken zur Marktanalyse\n- Vorgehen bei der Finanzplanung\n- Methoden zur Entwicklung eines Business Plans\n- Konzept der \"Unique Selling Proposition\"",
    "learning_outcomes": "Nach erfolgreichem Abschluss dieses Moduls sind die Studierenden mit dem Basiswissen für die erfolgreiche Gründung und das langfristige Management eines kleinen softwareorientierten Unternehmens vertraut. Insbesondere sind die Studierenden in der Lage IN9006: Entrepreneurship for Small Software-oriented Enterprises | Entrepreneurship for Small Software-oriented Enterprises\n- das Business Model Canvas zu nutzen, um ihr angestrebtes Geschäftsmodell zu konzipieren und\nzu detaillieren,\n- eine SWOT-Analyse ihres Geschäftsmodells durchzuführen,\n- einen Drei-Jahres-Finanzplan für ihr Startup-Unternehmen zu entwickeln,\n- ihre Start-up-Idee selbstbewusst und gründlich zu präsentieren, gestützt auf das Wissen und das\nFeedback, das sie erhalten haben.",
    "teaching_methods": "Das Modul gliedert sich in zwei Teile: Zunächst wird durch Vorträge basierend auf Folienpräsentationen Grundlagenwissen zum Themengebiet vermittelt. Anschließend wird dieses Wissen im Rahmen der Gruppenarbeit beim Erstellen und Halten von Präsentationen angewendet. Dazu werden Teams mit drei bis vier Teilnehmenden gebildet.",
    "media": "Folienpräsentation, eventuell Tafelanschriebe",
    "literature": "- The Lean Startup, Eric Ries, 2011\n- The Lean Entrepreneur, Brant Coop & Patrick Vlaskovits, 2013\n- Crossing the Chasm, Geoffrey A. Moore, 2002\n- The Innovator's Dilemma, Clayton M. Christensen\n- The Four Ways to the Epiphany, Steve Blank, 2013\n- Business Model Generation, Alexander Osterwalder & Yves Pigneur, 2011",
    "lv_sws_lecturer": "Matthes, Florian; Prof. Dr. rer. nat.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nGründung und Führung kleiner softwareorientierter Unternehmen (IN9006) (Seminar, 1 SWS)\nMatthes F [L], Matthes F, Vierkorn S, Meisenbacher S"
  },
  {
    "module_id": "IN9009",
    "title": "Sich und andere führen",
    "level": "Bachelor/Master",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 4,
    "hours_total": 120,
    "hours_self_study": 90,
    "hours_presence": 30,
    "examination_achievements": "Prüfungsart: mündlich Einzelgespräche mit einer Dauer von 20 min überprüfen die erfolgreiche Erarbeitung der Lernziele.",
    "repetition": "",
    "recommended_prerequisites": "Die Teilnehmer sollten sich in der aktiven Phase der Auseinandersetzung mit dem künftigen\nBerufsbild befinden. Erste Führungserfahrungen im beruflichen / privaten / sozialen Umfeld sind\nhilfreich.",
    "content": "- Persönliche Definition von Führung, Kompetenzprofil einer erfolgreichen Führungskraft\n- Standortbestimmung: Eigene Stärken und Schwächen, Führungsanspruch\n- Wahrnehmung, Einschätzung, Kommunikation, Feedback\n- Führen einzelner Mitarbeiter: Führungssituationen und -gespräche\n- Führen von Gruppen: Gruppendynamik, Widerstand\n- Umgang mit Konflikten\n- Sich präsentieren und Sitzungen moderieren\n- Führungsinstrumente und Führungsstile (inkl. Coaching)\n- Führung zwischen Unternehmens- und Mitarbeiterinteressen",
    "learning_outcomes": "Nach der Teilnahme haben die Studierenden anhand von Erfahrungslernen durch Feedback und Selbstreflexion ihre Führungskompetenzen erweitert, indem sie auf Basis einer realistischen Einschätzung Stärken ausgebaut bzw. Schwächen abgefedert haben. Sie sind in der Lage, konstruktiv Feedback zu geben und zu erhalten. IN9009: Sich und andere führen | Leading Yourself and Others",
    "teaching_methods": "Das Modul besteht aus einem Workshop. Die Inhalte werden durch Vorträge, Gruppenarbeit und Fallstudien vermittelt. Studierende sollen zur Zusammenarbeit mit anderen Studierenden, zum konstruktiven Kritisieren der Arbeit anderer sowie zum Bearbeiten von Problemen und deren Lösungsfindung angeregt werden.",
    "media": "Folien, Tafelarbeit, Moderationskarten",
    "literature": "- Fredmund Malik: \"Führen, Leisten, Leben. Wirksames Management für eine neue Zeit.\", Heyne,\n2001\n- Paul Watzlawick: \"Anleitung zum Unglücklichsein.\", Piper, 1988",
    "lv_sws_lecturer": "Bungartz, Hans-Joachim; Prof. Dr. rer. nat. habil.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nSeminar Sich selbst und andere führen (IN9009) (Seminar, 2 SWS)\nKurapati V, Roth S"
  },
  {
    "module_id": "IN9010",
    "title": "Seminar Wissenschaft und Ethik",
    "level": "Bachelor/Master",
    "language": "Deutsch/Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Unregelmäßig",
    "credits": 4,
    "hours_total": 120,
    "hours_self_study": 90,
    "hours_presence": 30,
    "examination_achievements": "Prüfungsart: Seminararbeit (10-14 Seiten) und eine Präsentation mit Diskussion (30-45 Minuten) (Gewichtung: 50/50) Die Präsentation bewertet die Fähigkeit der Studierenden, ein Thema darzustellen, während die Seminararbeit den Rest der angestrebten Lernergebnisse abdeckt.",
    "repetition": "",
    "recommended_prerequisites": "keine",
    "content": "- Biographien bedeutender Wissenschaftlerinnen und Wissenschaftler (Meitner, Einstein, Russell,\nHeisenberg, v. Braun,...)\n- Forschung in Diktaturen\n- Betrug, Irrtum und geistiger Diebstahl\n- Ethik und Informatik (Überwachung, Freiheit des Internet, Open Source, Star Wars,...)\n- Genforschung, Intelligent Design, Tierexperimente",
    "learning_outcomes": "Nach erfolgreichem Absolvieren des Moduls sind die Studierenden in der Lage, ethische Aspekte unterschiedlicher Verhaltensweisen, die mit wissenschaftlichem Arbeiten verbunden sind (Ziele der Forschung, Durchführung von Forschungsarbeiten und auch die mögliche Anwendung der Forschungsresultate), zu analysieren und zu bewerten sowie diese adäquat darzustellen. IN9010: Seminar Wissenschaft und Ethik | Seminar: Science and Ethics",
    "teaching_methods": "Die Studierenden werden zum Studium der Literatur und der inhaltlichen Auseinandersetzung mit den Themen angeregt. Sie bereiten Präsentationen vor, halten Vorträge und erstellen eine Seminararbeit.",
    "media": "Folien, Tafelarbeit, Filme",
    "literature": "Wird von der Betreuerin oder vom Betreuer vor Beginn des Seminars bekanntgegeben.",
    "lv_sws_lecturer": "Bader, Michael Georg; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nScientists and Ethics (IN901002) (Seminar, 2 SWS)\nFrank A [L], Bolager E, Frank A, Gaddameedi K, Sun Q\nSeminar Wissenschaftler und Ethik (IN901001) (Seminar, 2 SWS)\nPhilipps C [L], Kemler S, Philipps C, Proske I"
  },
  {
    "module_id": "IN9011",
    "title": "Seminar Projektmanagement",
    "level": "Bachelor/Master",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 4,
    "hours_total": 120,
    "hours_self_study": 90,
    "hours_presence": 30,
    "examination_achievements": "Prüfungsart: mündlich Einzelgespräche mit einer Dauer von 20 min überprüfen die erfolgreiche Erarbeitung der Lernziele.",
    "repetition": "",
    "recommended_prerequisites": "",
    "content": "Grundlagen des Projektmanagements, Internationale Quasi-Standards für Projektmanagement, Phasen eines Projekts, Qualitäts- und Erfolgskontrolle und -sicherung, Planung und Einsatz von Ressourcen, Softwareunterstützung für erfolgreiches Projektmanagement, Zeitmanagement.",
    "learning_outcomes": "Am Ende des Moduls verfügen die Studierenden über grundlegende Fähigkeiten und Kenntnisse im Projektmanagement und können diese auf einfache Szenarien anwenden, z.B. Ziele und Projektphasen definieren, Ressourcenpläne aufstellen oder Mitarbeiter in Projekten führen. Exemplarisch beherrschen die Teilnehmer den Einsatz eines verbreiteten Projektmanagement- Tools und sind in der Lage Aspekte aus dem Bereich Projektmanagement adäquat darzustellen.",
    "teaching_methods": "Das Modul besteht aus einem Workshopseminar. Die Inhalte werden durch Vorträge, Gruppenarbeit und Fallstudien vermittelt. Studierende sollen zur Zusammenarbeit mit anderen Studierenden, zum konstruktiven Kritisieren der Arbeit anderer sowie zum Bearbeiten von Problemen und deren Lösungsfindung angeregt werden. IN9011: Seminar Projektmanagement | Seminar: Project Management",
    "media": "Folien, Tafelarbeit, Projektmanagement-Werkzeuge",
    "literature": "Wird vom Betreuer vor Beginn des Seminars bekanntgegeben.",
    "lv_sws_lecturer": "Bungartz, Hans-Joachim; Prof. Dr. rer. nat. habil.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nSeminar Projektmanagement (IN9011) (Seminar, 2 SWS)\nBungartz H [L], Lechler A, Liu Weng H"
  },
  {
    "module_id": "IN9012",
    "title": "Enterprise Information Systems",
    "level": "Master",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 3,
    "hours_total": 90,
    "hours_self_study": 60,
    "hours_presence": 30,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer Klausur erbracht. Die Prüfungsfragen gehen über den gesamten Vorlesungsstoff und erfordern eigene Formulierungen.",
    "repetition": "Folgesemester",
    "recommended_prerequisites": "keine Vorkenntnisse erforderlich",
    "content": "- Managementorientierte Betrachtung von Unternehmenssoftware\n- Einführung von Unternehmenssoftware in Unternehmen\n- Aufbau der technischen Basis von SAP-Software\n- Betrieb/Hosting von Unternehmenssoftware\n- Praktische Arbeit mit SAP-Software (mit Übungen)\n- Einblick in weiterführende Themen: Entwicklung, Business Intelligence, Integration",
    "learning_outcomes": "Nach der Teilnahme an dem Modul ist der Studierende in der Lage, den technischen Betrieb und die Anwendung von Unternehmenssoftware sowie die Integration grundlegender Geschäftsprozesse aus den Bereichen Materialwirtschaft, Vertrieb und Finanzwesen zu verstehen. Darüber hinaus ist der Studierende in der Lage die vermittelten theoretischen Grundlagen unter Verwendung von Standardsoftwarelösungen (z.B. SAP ERP, SAP BW etc.) praktisch anzuwenden. IN9012: Enterprise Information Systems | Enterprise Information Systems",
    "teaching_methods": "Das Modul besteht aus einer Vorlesung und einer begleitenden Übungsveranstaltung. Die Inhalte der Vorlesung werden im Vortrag und durch Präsentationen vermittelt. In den Übungen werden die theoretischen Grundlagen unter Verwendung Standardsoftwarelösungen praktisch angewendet.",
    "media": "Folien, Tafelarbeit, Skriptum, Übungsblätter",
    "literature": "- Krcmar, H. (2010): Informationsmanagement. 5., neu überarb. und erw. Aufl., Springer, Berlin\n[u.a.] 2010.\n- Gronau, N. (2010): Enterprise Resource Planning und Supply Chain Management: Architektur\nund Funktionen, 2. Auflage, Oldenbourg Wissenschaftsverlag, München 2010.\n- Görtz, M.;Hesseler, M. (2007): Basiswissen ERP-Systeme: Auswahl, Einführung & Einsatz\nbetriebswirtschaftlicher Standardsoftware, 1. Auflage, W3I, Witten 2007.\n- Becker, J.; Kugeler, M.; Rosemann, M. (Hrsg.) (2008): Prozessmanagement: Ein Leitfaden zur\nprozessorientierten Organisationsgestaltung, 6. Auflage, Springer, Berlin 2008.",
    "lv_sws_lecturer": "Krcmar, Helmut; Prof. Dr. rer. oec.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN9026",
    "title": "Trendseminar CDTM",
    "level": "Bachelor",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester/Sommersemester",
    "credits": 8,
    "hours_total": 240,
    "hours_self_study": 180,
    "hours_presence": 60,
    "examination_achievements": "",
    "repetition": "Folgesemester",
    "recommended_prerequisites": "Nur für Studierende des Studienprogramms Technology Management des CDTM",
    "content": "Technische, ökonomische und soziale Auswirkungen von ausgewählten, aktuellen Trends",
    "learning_outcomes": "Teilnehmer beherrschen die Grundlagen der Trendforschung ebenso wie die Grundlagen wissenschaftlichen Arbeitens, können in interdisziplinären Teams arbeiten, Seminararbeiten auf Englisch erstellen und Arbeitsergebnisse auf Englisch präsentieren.",
    "teaching_methods": "Seminar",
    "media": "",
    "literature": "Wird im Semninar bekannt gegeben",
    "lv_sws_lecturer": "Krcmar, Helmut; Prof. Dr. rer. oec.\nIN9026: Trendseminar CDTM | Trendseminar CDTM\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nSeminar: Trend Seminar CDTM (IN9026) (Seminar, 2 SWS)\nPretschner A [L], Felsche E"
  },
  {
    "module_id": "IN9028",
    "title": "Didaktisches und pädagogisches Training für Tutoren",
    "level": "Bachelor/Master",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester/Sommersemester",
    "credits": 4,
    "hours_total": 120,
    "hours_self_study": 90,
    "hours_presence": 30,
    "examination_achievements": "Die Studienleistung besteht aus zwei Übungsleistungen. Der erste Teil stellt ein Praktikum dar, der zweite Teil eine schriftlichen Übungsleistung. Für die erste Übungsleistung, das Praktikum, bestätigt die Übungsleitung die Durchführung von Tutorien (Praktikum) im Umfang von mindestens 15 Unterrichtseinheiten zu je 45 Minuten. Dadurch wird sichergestellt, dass die Studierenden einen ausreichenden zeitlichen Rahmen hatten, um die im Seminar vorab gelernten theoretischen Inhalte in der Praxis anzuwenden. Die Tutoren/innen besuchen sich gegenseitig in mindestens einer Übung. Damit wird ihnen die Möglichkeit eingeräumt, Tutorübungen aus einer anderen Perspektive zu erleben. Der zweite Teil der Studienleistung dokumentiert schriftlich, wie die gelernten Konzepte und Methoden in den Tutorien umgesetzt wurde. Dafür beschreiben die Studierenden im Umfang von 3-6 Seiten: 1. wie sie die im Seminar behandelten didaktisch-pädagogischen Inhalte im Tutorium realisiert haben und 2. welche Anregungen sie aus den gegenseitigen Besuchen für ihre eigene Tutortätigkeit erhalten haben.",
    "repetition": "Folgesemester",
    "recommended_prerequisites": "",
    "content": "1. Grundlagen der allgemeinen Lehr-/Lernforschung, insbesondere psychologische Grundlagen des Lernens. Grundzüge des Konstruktivismus als Lehr-/Lernkonzept 2. Techniken und Hilfsmittel zur Vermittlung informatischer Inhalte IN9028: Didaktisches und pädagogisches Training für Tutoren | Pedagogical Training in Didactics for Tutors 3. Leistungsbeurteilung, Gender-Aspekte und -Effekte 4. Konzeption, Gestaltung und Bewertung von Tutorübungen in der Informatik 5. Planung, Organisation und Durchführung von Tutorübungen in der Informatik",
    "learning_outcomes": "Die Teilnehmer können elementare Konzepte der Lernpsychologie und der Lehr-Lernforschung verstehen und anwenden. Zudem beherrschen sie Methoden zur Planung, Organisation und Durchführung von Tutorübungen. Lehrmethoden und Medien zur Förderung des individuellen Lernfortschritts können sie auswählen, bewerten und anwenden.",
    "teaching_methods": "Im Rahmen eines Seminars halten die Dozenten Vorträge, um in die Themen der Selbstarbeiten und in die Grundlagen der Lehr- und Lernforschung einzuführen. Weitere zentrale Inhalte des Seminars werden in Selbst- bzw. Gruppenarbeiten erarbeitet. Die Ergebnisse/Inhalte werden in Referaten präsentiert. Die vorgestellten Lehr- und Lernmethoden werden in Rollenspielen angewendet. Während des Semesters findet eine Praktikumsphase statt, die die Durchführung der Tutorstunden beinhaltet. Die Studierenden besuchen sich gegenseitig in mindestens einer Tutorübung und diskutieren im Anschluss daran die geplanten bzw. beobachteten Lehr-/Lernmethoden anhand der im Seminar behandelten Kriterien. Insbesondere soll hierbei auf die Interaktion mit bzw. zwischen den Studierenden Wert gelegt werden.",
    "media": "E-Learning System Moodle, Präsentationen, wissenschaftliche Quellen, Fallbeschreibungen, Fälle\nund Lösungen",
    "literature": "",
    "lv_sws_lecturer": "Räcke, Harald; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nDidaktisches und pädagogisches Training für Tutoren (IN9028) (Seminar, 2 SWS)\nRäcke H, Zabrodin R"
  },
  {
    "module_id": "IN9038",
    "title": "Medizintechnik Entrepreneurship",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester",
    "credits": 4,
    "hours_total": 120,
    "hours_self_study": 90,
    "hours_presence": 30,
    "examination_achievements": "Die Prüfungsleistung wird hauptsächlich in Form eines Business Plans erbracht der in Gruppen erstellt wird. Der Business Plan wird in mehreren Schritten ausgearbeitet. In jedem Schritt wird der Business Plan mündlich präsentiert, was auch Teil der Prüfungsleistung ist. Zusätzlich wird ein kleiner Teil der Prüfungsleistung in Form eines schriftlichen Tests erbracht in dem schriftliche Fragen und multi-choice Aufgaben beantwortet werden um nachzuweisen, dass die Teilnehmer Wissen über Firmengründungen im Bereich Medical Imaging erworben haben.",
    "repetition": "",
    "recommended_prerequisites": "",
    "content": "- Grundlagen zu Lebenswissenschaften und Medical Imaging\n- Qualifikation eines Medical Imaging Entrepreneur\n- Notwendige Kriterien eines Start-up Unternehmens\n- Grundlagen für Patentierung, Marketing, vertrieb, Finanzen\n- Grundlagen zur Erstellung eines Business Plans\n- Unternehmensfinanzierung\n- 2 Teamaufgaben: (a) Ideefindung, Beschreibung und Entwicklungsvorhaben, (b) Entwurf eines\nkleinen Business Plans (max. 20 Seiten)",
    "learning_outcomes": "Nach Besuch dieses Moduls sind die Teilnehmer in der Lage einen Business Plans im Bereich Medical Imaging zu erstellen. Sie haben einen Überblick über spezielle Richtlinien, insbesondere IN9038: Medizintechnik Entrepreneurship | Medical Technology Entrepreneurship hinsichtlich Soft- und Hardwarezertifizierung und verstehen Grundlagen zur Teambildung für Unternehmensgründung, zur Patentierung, Marketing, Vertrieb, und Finanzkonzepte für Unternehmen im Bereich Medical Imaging.",
    "teaching_methods": "Vorlesung, Business Plan schreiben, Präsentationen",
    "media": "Folien",
    "literature": "Stan Lapidus: Profile of a Medical Entrepreneur -- Harvard\nBusiness School 9-805-087\nREE Working Session ? Life Sciences Entrepreneurship:\nThe best ways to integrate life science and engineering\nentrepreneurship education\nLiv Jacobsen -- Bestimmungsfaktoren für Erfolg im\nEntrepreneurship --> http://www.diss.fu-berlin.de/diss/\nreceive/FUDISS_thesis_000000001121",
    "lv_sws_lecturer": "Navab, Nassir; Prof. Ph.D.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):"
  },
  {
    "module_id": "IN9046",
    "title": "IT-Recht in der öffentlichen Verwaltung: E-Government-Gesetz, IT-Sicherheit und Auftragsvergabe",
    "level": "Bachelor/Master",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 90,
    "hours_presence": 60,
    "examination_achievements": "Die Prüfungsleistung wird in Form einer schriftlichen (Klausur 70%; 60 Minuten) und mündlichen (Vortrag 30%) Prüfung erbracht. In der Klausur soll nachgewiesen werden, dass die Grundlagen des öffentlichen IT-Rechts und der IT-Auftragsvergabe der öffentlichen Verwaltung verstanden wurden.",
    "repetition": "",
    "recommended_prerequisites": "",
    "content": "- Grundlagen des IT-Rechts in der öffentlichen Verwaltung\n- E-Government-Gesetz (BayEGovG, Bundes-EGovG Bund und De-Mail-Gesetz)\n- Rechtsgrundlagen im Bereich IT-Sicherheit (Grundzüge BSI-Gesetz, TKG und TMG, Verhältnis\nzum BayDSG)\n- Rechtsgrundlagen der IT-Auftragsvergabe (GWB, VOL/A, VgV)\n- Besondere Vertragsbedingungen bei IT-Verträgen der öffentlichen Verwaltung (EVB-IT)",
    "learning_outcomes": "Nach der Teilnahme an dem Modul sind die Studierenden in der Lage, die grundlegenden Rahmenbedingungen des Einsatzes von IT in der öffentlichen Verwaltung zu benennen und wichtige Begriffe des IT-Rechts in der öffentlichen Verwaltung zu definieren. Darüber hinaus sind IN9046: IT-Recht in der öffentlichen Verwaltung: E-Government-Gesetz, IT-Sicherheit und Auftragsvergabe | IT Law in Public Administrations: E-Government Act, IT Security and Procurement die Studierenden in der Lage, die wesentlichen Regelungen des E-Government-Gesetzes, des Rechts der IT-Sicherheit und des Rechts der IT-Auftragsvergabe zu verstehen und anzuwenden.",
    "teaching_methods": "Die Inhalte der Vorlesung werden im Vortrag und durch Präsentationen vermittelt.",
    "media": "Folien, PowerPoint, Tafelanschrieb/-arbeit",
    "literature": "Wind/Kröger, Handbuch IT in der Verwaltung, 2006\nHoeren, Skript, Internetrecht, Stand April 2015. In: www.uni-muenster .de/Jura.itm/hoeren/\nmaterialien/Skript/Skript_Internetrecht_April_2015.pdf\nHeckmann, Juris Praxiskommentar Internetrecht, 4. Auflage, 2014\nBähr/Denkhaus, Das Bayerische E-Government-Gesetz, BayVBl 2016, S.1-10.",
    "lv_sws_lecturer": "Krcmar, Helmut; Prof. Dr. rer. oec.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nIT-Recht in der öffentlichen Verwaltung: E-Government-Gesetz, IT-Sicherheit und Auftragsvergabe\n(Überfachliche Grundlagen, IN9046) (Seminar, 2 SWS)\nHein A [L], Denkhaus W, Daßler L, Jäger I"
  },
  {
    "module_id": "IN9048",
    "title": "Innovationsentwicklung in der Gesundheitsbranche",
    "level": "Bachelor/Master",
    "language": "Englisch",
    "semester_duration": "Einsemestrig",
    "frequency": "Sommersemester",
    "credits": 6,
    "hours_total": 180,
    "hours_self_study": 120,
    "hours_presence": 60,
    "examination_achievements": "Prüfungsart: Projektarbeit In dem Modul werden die Studierenden Tools und Methoden kennenlernen und anwenden, die es ermöglichen, das beste Produkt bzw. den besten Service für die medizinische Zielgruppe zu entwickeln. Dies setzt die aktive Teilnahme an den interaktiven Modulblöcken voraus. Modulbegleitend werden die erreichten Ergebnisse durch schriftliche Aufgaben (Value Proposition und Business Model Canvas) und mündliche Vorträge (Zwischenvortrag und finaler Vortrag) mit individuellem Feedback gefestigt und überprüft. Die Benotung erfolgt daher anahnd der aktiven Teilnahme (10%), der Zwischenpräsentation (10%), der finalen Präsentation (20%), der Ausarbeitung / Report (40%) und einer schriftlichen Prüfung (45 Minuten) des behandelten Stoffs (20%). Die Ausarbeitung und Präsentation erfolgen in Gruppenarbeit in Teams zu 2-4 Studenten.",
    "repetition": "",
    "recommended_prerequisites": "Basiswissen über die medizinische Bildgebung und Navigation sowie das Interesse am\nUnterschied zwischen Forschung und klinischer Anwendbarkeit sind die Grundvoraussetzungen\nfür das Modul. Des Weiteren ist das Interesse an Teamarbeit, am Gesundheitssystem und\nan der Umsetzung von Erfindungen und ihrer Validierung im Hinblick auf ein mögliches\nVermarktungspotential. Es ist von Vorteil, bereits eine Idee mitzubringen (zum Beispiel aus dem\nImage Guided Surgery Modul) und dann mit den gelernten Methoden zu validieren, ob es sich um\neine echte Innovation handelt, die Marktpotenzial hat, oder nur um eine gute Idee/Erfindung.\nIN9048: Innovationsentwicklung in der Gesundheitsbranche | Innovation Generation in the Healthcare Domain",
    "content": "Das Modul befasst sich mit der Kundenentwicklung für neue Ideen in der Gesundheitsbranche mit einem Fokus auf medizinische Bildgebungssysteme, medizinische Technologien und Gesundheitsdienstleistungen. Der Fokus liegt dabei auf der Entwicklung und Validierung des Kundennutzens (Value Proposition Design) und der Systemvoraussetzungen. Studenten werden in dem Kurs lernen, Feedback von klinischen Entscheidungsträgern zu sammlen, und Methoden und Werkzeuge lernen, um Ideen schnell generieren und validieren zu können, vor allem im Hinblick auf eine erfolgreiche Produktumsetzung. Grundlagen des Medizintechnikmarkts und des Geundheitssystems werden neben den Werkzeugen für die Validierung ebenfalls vermittelt. Die Studenten werden in enger Zusammenarbeit mit Partnern der Münchener Universitätskliniken an echten Aufgaben arbeiten. Zudem werden Innovation Games durchgeführt, um Ideen und Lösungen zu entwickeln, die klinische Probleme lösen und diese werden auch validiert. Das Modul soll den Studierenden am Ende eine validierte Idee liefern, die im Anschluss in einer Geschäftsgründung münden kann.",
    "learning_outcomes": "Die angestrebten Lernergebnise beinhalten:\n• Werkzeuge und Methoden, um den Innovationsgrad einer Idee zu lernen und anzuwenden,\n• Werkzeuge und Methoden, um die Innovation und ihr Marktpotential zu validieren anzuwenden,\n• Ansätze zur Durchführung von „Innovation Games“ zu lernen,\n• Das Business Model und Value Proposition Canvas anwenden zu können,\n• Methoden und Werkzeuge für das Produktmanagement und Projektmangement zu lernen,\nanwenden und verstehen zu können,\n• Den Medizintechnikmarkt und das Erstattungssystem zu verstehen,\n• Geschäftsentwicklung in der Biomedizin zu verstehen\n• Methoden und Werkzeuge, um eine Idee/Erfindung in eine Innovation zu überführen zu lernen\nund anwenden zu können,\n• Soft Skills, u.a. wie man eine Idee vor einem Kommittee/Finanzierungspartner präsentiert, zu\nlernen",
    "teaching_methods": "Durch Präsentation wird der Dozent die Theorie, Prinzipien, Methoden und Werkzeuge der Innovationsgenerierung und die Grundlagen des Medizintechnikmarktes vermitteln. Begleitende Übungen und Innovation Games helfen den Studierenden, die Konzepte anzuwenden, zu festigen und zu vertiefen. Ziel des Moduls ist es, dass die Studenten mit den gelernten und angewendeten Werkzeugen und Methoden selbstständig Ideen validieren können, um ein Geschäftsmodell selbst entwerfen und validieren zu können.",
    "media": "Folien, Tafelanschrieb, Flipcharts",
    "literature": "Basisliteratur:\nIN9048: Innovationsentwicklung in der Gesundheitsbranche | Innovation Generation in the Healthcare Domain\n• Osterwalder, A., Pigneur, Y., Bernarda, G. & Smith, A. Value Proposition Design: How to Create\nProducts and Services Customers Want. (John Wiley & Sons, 2014).\n• Brant Cooper, Patrick Vlaskovits -- The Lean Entrepreneur -- ISBN 978-1-118-29534-2\n• Alexander Osterwalder -- Business Model Generation -- ISBN 978-0470876411\n• Harvard Business Review on Entrepreneurship -- ISBN 978-0-87584-910-2\n• Steve Blank Slide Share - particularly up to Slide 115 (http://bit.ly/2glKNW1)\nWeiterführende Literatur:\n• Eric Ries, The Lean Startup, ISBN 978-0307887894\n• Langdon Morris, The Innovation Master Plan (http://www.innovationmanagement.se)\n• Peter Merrill, Innovation Generation, ISBN 978-0873897341\n• Kim, W. C. & Mauborgne, R. Blue Ocean Strategy: How to Create Uncontested Market Space\nand Make the Competition Irrelevant. (Harvard Business School Press, 2005).\n• Keeley, L., Walters, H., Pikkel, R. & Quinn, B. Ten Types of Innovation: The Discipline of Building\nBreakthroughs. (John Wiley & Sons, 2013).\nBlank, S. & Dorf, B. The Startup Owner’s Manual: The Step-By-Step Guide for Building a Great\nCompany. (K & S Ranch, 2012).",
    "lv_sws_lecturer": "Navab, Nassir; Prof. Ph.D.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nInnovationsentwicklung in der Gesundheitsbranche (IN9048) (Vorlesung mit integrierten Übungen,\n4 SWS)\nTraub J [L], Traub J, Keicher M"
  },
  {
    "module_id": "IN9049",
    "title": "Technik und Recht",
    "level": "Bachelor",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester/Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 150,
    "hours_presence": 0,
    "examination_achievements": "Im Rahmen dieses Kurses sollen die Studierenden nicht zum Auswendiglernen verleitet werden. Vielmehr soll die Lernaktivität der Studierenden stetig gefragt sein. Aus diesem Grund befinden sich am Ende eines jeden Kapitels Lernkontrollfragen, welche aus Multiple-Choice und Satzergänzungsfragen bestehen. Durch das freiwillige und eigenständige Lösen der Fragen können die Studierenden ihr Verständnis für das durchgearbeitete Thema überprüfen. Am Ende wird der Kurs mit einer schriftlichen Prüfung abgeschlossen. Diese besteht vornehmlich aus der Falllösung eines kurzen Sachverhalts, wodurch die Studierenden ihr Verständnis über die dargestellte Materie darlegen und Argumentationsstrukturen ausprobieren können. Die Falllösung beträgt 50 % der Abschlussprüfung. Daneben beinhaltet die Abschlussklausur Multiple-Choice Fragen, welche zu 20 % in das Prüfungsgesamtergebnis einfließen und freie Fragen (30 %). Die Studierenden sollen dabei nachweisen, dass sie die grundsätzlichen Spannungsfelder zwischen Technik und Recht verstanden haben und das erworbene Wissen auf konkrete Beispiele anwenden können. Es gilt Kenntnisse um die geschichtliche Entwicklung des Technikrechts, die Grundlagen der zivilrechtlichen Haftung und strafrechtlichen Verantwortlichkeit, den Datenschutz und die Datensicherheit, die Fahrerassistenzsysteme und die Providerhaftung zu zeigen. Die Prüfungsdauer der schriftlichen Abschlussprüfung beträgt 60 Minuten.",
    "repetition": "Folgesemester",
    "recommended_prerequisites": "Keine",
    "content": "Folgende fachlichen Inhalte werden im Modul vermittelt: IN9049: Technik und Recht | Technology and Law 1. Einleitung a) Das Verhältnis von Technik und Recht b) Die Geschichte des Technikrechts 2. Grundlagen zivilrechtlicher Haftung a) Grundsätzliches b) Herausforderungen durch die Autonomik c) Relevante Urteile d) Fallbeispiele zur vertraglichen Haftung 3. Grundlagen strafrechtlicher Verantwortlichkeit a) Grundsätzliches b) Relevante Straftatbestände c) Herausforderungen durch die Autonomik d) Relevante Urteile e) Fallbeispiele zur strafrechtlichen Verantwortlichkeit 4. Datenschutz und Datensicherheit a) Rechtshistorische und –politische Hintergründe des Datenschutzrechts b) Anwendungsbereich des BDSG c) Erlaubnistatbestände d) Rechte und Pflichten e) Datensicherheit f) Relevante Urteile g) Herausforderungen durch die Autonomik h) Fallbeispiele zum Datenschutz 5. Fahrerassistenzsysteme im Straßenverkehr a) Verkehrs- und Zulassungsrecht b) Änderungen des Wiener Übereinkommens im März 2016 c) Rechtliche Auswirkungen des Betriebs von automatisierten Fahrzeugen auf die zivilrechtliche Haftung d) Relevante Urteile e) Fallbeispiel 6. Providerhaftung a) Grundsätzliches b) Das Telemediengesetz (TMG) c) Verantwortlichkeit der Anbieter nach dem TMG",
    "learning_outcomes": "Nach der erfolgreichen Teilnahme an diesem Modul sind die Studierenden in der Lage:\n• die wichtigsten Entwicklungsphasen auf dem Weg zum Technikrecht und das Verhältnis von\nTechnik und Recht zu skizzieren. IN9049: Technik und Recht | Technology and Law\n• die wichtigsten Grundlagen der zivil- und strafrechtlichen Haftung und deren Anwendung auf\nautonome Systeme zu verstehen.\n• Sorgfaltsmaßstäbe zu identifizieren und somit Fragen der Fahrlässigkeit einer adäquaten Lösung\nzuzuführen.\n• anhand von unbekannten technischen Sachverhalten sich ergebende Probleme für die zivil- und\nstrafrechtliche Haftung zu skizzieren.\n• die wichtigsten Strukturen und Prinzipien des Datenschutzrechts darzustellen und die\neuropäischen Einflüsse auf das Rechtsgebiet nachzuvollziehen.\n• die Zulässigkeit von Fahrerassistenzsystemen und die Herausforderungen, die sich bei\nautonomen Fahrzeugen z.B. für die zivilrechtliche Haftung stellen, darzustellen und zu beschreiben.\n• die Verantwortlichkeit von Providern nach dem Telemediengesetz differenzieren zu können und\nproblematische Einzelfälle diskutieren.\n• das Erlernte auf unbekannte Fälle anzuwenden und eigenständig Lösungen zu entwickeln,\nin denen sie die rechtlichen Aspekte mit den technischen verknüpfen. So werden sie die Linie zwischen „rechtlich Erlaubtem“ und „technisch Möglichem“ ziehen können.",
    "teaching_methods": "Die theoretischen Grundlagen zum Erreichen der Lernergebnisse sollen hauptsächlich durch verschiedene Lerneinheiten im Rahmen eines online-Kurses vermittelt werden. Dies erfolgt durch Textform in Kombination von Grafiken und Schaubildern. Daneben kommen aktivierende Lernmethoden wie die eigenständige Beantwortung von aufgeworfenen Fragen, welche zwischen den Lerneinheiten auftauchen (gekennzeichnet durch ein Bild) und welche die Studierenden dazu anregen sollen, sich vor Darlegung verschiedener Probleme und Lösungen, selbstständig eine Meinung zu einer gewissen Thematik zu bilden und eigenständige Lösungsansätze zu erarbeiten. Am Ende eines jeden Kapitels kommen Lernkontrollfragen (Multiple-Choice und Satzergänzungsfragen) zum Einsatz, welche zur Wiederholung der erarbeiteten Thematik dienen. Auf diese Weise sollen die Studierenden neben der reinen Wissensvermittlung auch in die aktive Rolle versetzt werden, um einen optimalen Lernerfolg ermöglichen zu können. Neben der Darbietung der Inhalte in Textform finden sich auch Podcasts über eine Falllösung und ein Interview mit Prof. Dr. Dr. Hilgendorf.",
    "media": "online-Kurs",
    "literature": "",
    "lv_sws_lecturer": "Pretschner, Alexander; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nTechnik und Recht (IN9049) (Vorlesung, 2 SWS)"
  },
  {
    "module_id": "IN9050",
    "title": "Einführung in das Datenschutzrecht",
    "level": "Bachelor",
    "language": "Deutsch",
    "semester_duration": "Einsemestrig",
    "frequency": "Wintersemester/Sommersemester",
    "credits": 5,
    "hours_total": 150,
    "hours_self_study": 150,
    "hours_presence": 0,
    "examination_achievements": "Im Rahmen dieses Kurses sollen die Studierenden nicht zum Auswendiglernen verleitet werden. Vielmehr soll die Lernaktivität der Studierenden stetig gefragt sein. Aus diesem Grund befinden sich am Ende eines jeden Kapitels Lernkontrollfragen, welche aus Multiple-Choice und Satzergänzungsfragen bestehen. Durch das freiwillige und eigenständige Lösen der Fragen können die Studierenden ihr Verständnis für das durchgearbeitete Thema überprüfen. Am Ende wird der Kurs mit einer schriftlichen Prüfung abgeschlossen. Diese besteht vornehmlich aus der Falllösung eines kurzen Sachverhalts, wodurch die Studierenden ihr Verständnis über die dargestellte Materie darlegen und Argumentationsstrukturen ausprobieren können. Die Falllösung beträgt 50 % der Abschlussprüfung. Daneben beinhaltet die Abschlussklausur Multiple-Choice Fragen, welche zu 20 % in das Prüfungsgesamtergebnis einfließen und freie Fragen (30 %). Die Studierenden sollen dabei nachweisen, dass sie die grundsätzlichen Strukturen und Problemkonstellationen des Datenschutzrechts verstanden haben und das erworbene Wissen auf konkrete Beispiele anwenden können. Es gilt Kenntnisse um die geschichtliche Entwicklung und Prinzipien des Datenschutzrechts, die Anwendung der relevanten Normen der DSGVO und des BDSG, die Zulässigkeit von Datenverarbeitungen, die Rechten und Pflichten von Beteiligten an Datenverarbeitungen und Sanktionen des Datenschutzrechts zu zeigen. Die Prüfungsdauer der schriftlichen Abschlussprüfung beträgt 60 Minuten.",
    "repetition": "Wiederholungsmöglichkeit:\nFolgesemester\nIN9050: Einführung in das Datenschutzrecht | Introduction to Data Protection Law",
    "recommended_prerequisites": "Keine",
    "content": "Folgende fachlichen Inhalte werden im Modul vermittelt: Kapitel 1: Geschichte des Datenschutzrechts und verfassungsrechtlicher Hintergrund Kapitel 2: Systematik und Anwendungsbereich des Datenschutzrechts 1. Systematik 2. Anwendungsbereich des deutschen und europäischen Datenschutzrechts 3. Relevante Akteure des Datenschutzrechts Kapitel 3: Grundprinzipien des Datenschutzrechts 1. Überblick 2. Rechtmäßigkeit 3. Transparenz 4. Zweckbindung 5. Datenminimierung 6. Rechenschaftsprinzip Kapitel 4: Zulässigkeit der Verarbeitung personenbezogener Daten 1. Rechtsgrundlagen der Datenverarbeitung nach der DSGVO 2. Einwilligung des Betroffenen 3. Vertragliche Beziehungen 4. Erfüllung rechtlicher Pflichten 5. Schutz lebenswichtiger Interessen 6. Wahrnehmung öffentlicher Aufgaben 7. Überwiegendes Interesse des Datenverarbeiters 8. Besondere Kategorien personenbezogener Daten Kapitel 5: Rechte Betroffener 1. Allgemeines 2. Informationspflichten des Verantwortlichen und Auskunftsrecht des Betroffenen 3. Recht auf Berichtigung 4. Löschungsanspruch des Betroffenen („Recht auf Vergessenwerden“) 5. Datenportabilität 6. Widerspruchsrecht und automatisierte Einzelfallentscheidungen Kapitel 6: Organisatorische Pflichten des Verantwortlichen 1. Stärkung der organisatorischen Pflichten durch die DSGVO 2. Abhängigkeit des Pflichtenumfangs vom Risiko der Verarbeitung 3. Datenschutz durch Technikgestaltung und durch datenschutzfreundliche Voreinstellungen 4. Datensicherheit 5. Meldung von „Datenpannen“ 6. Datenschutz-Folgenabschätzung 7. Verarbeitungsverzeichnis) 8. Bestellung eines Datenschutzbeauftragten 9. Zusammenfassung Kapitel 7: Übermittlung personenbezogener Daten ins Ausland IN9050: Einführung in das Datenschutzrecht | Introduction to Data Protection Law 1. Allgemeines 2. Zwei-Stufen-Test 3. Angemessenheitsbeschluss der EU 4. EU-US Privacy Shield 5. Geeignete Garantien 6. Ausnahmen für bestimmte Fälle Kapitel 8: Sanktionen für Datenschutzverstöße 1. Überblick: Datenschutzordnungswidrigkeiten und Datenschutzstraftaten 2. Bußgelder für Datenschutzordnungswidrigkeiten 3. Sanktionen für Datenschutzstraftaten 4. Straftaten nach dem allgemeinen Strafrecht Kapitel 9: Praxisbeispiele 1. Datenschutz im Internet: Fallbeispiel 2. Datenschutz im Internet: Cookies 3. Datenschutz im Arbeitsverhältnis: Fallbeispiel 4. Zulässigkeit einer Corona-Tracing-App",
    "learning_outcomes": "Nach der erfolgreichen Teilnahme an diesem Modul sind die Studierenden in der Lage:\n- die geschichtliche Entwicklung des Datenschutzrechts und dessen verfassungsrechtlichen\nHintergrund nach zu skizzieren.\n- die Systematik des Datenschutzrechts zu erfassen und dessen Anwendungsbereich prüfen.\n- die Auswirkungen der Grundprinzipien des Datenschutzrechts zu erfassen und auf konkrete\nBeispiele anzuwenden.\n- die Zulässigkeit der Verarbeitung personenbezogener Daten nach der DSGVO in verschiedenen\nEinzelfällen zu beurteilen.\n- die Rechte Betroffener und die organisatorischen Pflichten des Verantwortlichen zu nennen und\nauszuüben.\n- die Besonderheiten bei der Übermittlung personenbezogener Daten ins Ausland darzulegen.\n- Datenschutzverstöße und die passenden Sanktionen, wie Geldbußen, Geld- und Freiheitsstrafen,\nzu verknüpfen.",
    "teaching_methods": "Die theoretischen Grundlagen zum Erreichen der Lernergebnisse sollen hauptsächlich durch verschiedene Lerneinheiten im Rahmen eines online-Kurses vermittelt werden. Dies erfolgt durch Textform in Kombination mit Grafiken und Schaubildern. Am Ende eines jeden Kapitels kommen Lernkontrollfragen (Multiple-Choice und Satzergänzungsfragen) zum Einsatz, welche zur Wiederholung der erarbeiteten Thematik dienen. Auf diese Weise sollen die Studierenden neben der reinen Wissensvermittlung auch in die aktive Rolle versetzt werden, um einen optimalen Lernerfolg ermöglichen zu können. Besonderes Lernmaterial sind zudem die sog. Case-Train Fälle am Ende einiger Kapitel. Zusammen mit der Studentin „Aurelia“ erleben die Kursteilnehmer einige datenschutzrechtlich problematische Fallgestaltungen und werden mit Multiple-Choice Fragen durch die juristische IN9050: Einführung in das Datenschutzrecht | Introduction to Data Protection Law Falllösung geführt. Hierdurch lernen die Bearbeiter den Bezug des Datenschutzrechts zum Alltag kennen und werden langsam an eine juristische Fallbearbeitung herangeführt. Im letzten Kapitel, dem sog. „Praxisthema“, werden in Videoform zwei Fallbesprechungen vorgestellt und die aktuelle Relevanz in zwei Problemaufrissen dargestellt.",
    "media": "Online Kurs aus Theorieneinheiten in Textform, Übersichten und Schematas (auch als pdf), sich\nselbst korrigierende Übungs- und Wiederholungsfragen, Fälle in case-train als besonderes Format\n(über alle gängigen Browser zu öffnen), Videos zu Praxisbeispielen",
    "literature": "keine",
    "lv_sws_lecturer": "Pretschner, Alexander; Prof. Dr.\nLehrveranstaltungen (Lehrform, SWS) Dozent(in):\nEinführung in das Datenschutzrecht (IN9050) (Vorlesung, 3 SWS)\nPretschner A [L], Pretschner A"
  }
]