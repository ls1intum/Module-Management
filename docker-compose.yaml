services:
  nginx:
    image: nginx:alpine
    container_name: module-management-nginx
    volumes:
      - ./ModuleManagementClient/nginx.conf:/etc/nginx/conf.d/default.conf
      - /etc/letsencrypt:/etc/letsencrypt:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
      - keycloak
    networks:
      - module-management-network
    restart: unless-stopped

  postgres:
    image: "postgres:latest"
    container_name: module-management-db
    environment:
      - "POSTGRES_DB=${DB_NAME}"
      - "POSTGRES_PASSWORD=${DB_PASSWORD}"
      - "POSTGRES_USER=${DB_USER}"
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - module-management-network
    restart: unless-stopped

  keycloak:
    image: quay.io/keycloak/keycloak:26.0.6
    container_name: module-management-keycloak
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KEYCLOAK_ADMIN}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_PROXY: edge
      KC_HOSTNAME: module-management.ase.cit.tum.de
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_STRICT_HTTPS: "true"
      KC_HTTP_RELATIVE_PATH: /auth
    command:
      - start-dev
      - --import-realm
    volumes:
      - keycloak_data:/opt/keycloak/data
      - ./module-management-realm.json:/opt/keycloak/data/import/realm.json
    ports:
      - "${AUTH_PORT}:8080"
    networks:
      - module-management-network
    restart: unless-stopped

  ai-service:
    build:
      context: ./ModuleManagementServer/ai-service
      dockerfile: ai.Dockerfile
    container_name: module-management-ai
    volumes:
      - overlap_data:/code/data
    environment:
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      AI_MODEL: ${AI_MODEL}
    ports:
      - "${AI_SERVICE_PORT}:5000"
    networks:
      - module-management-network
    restart: unless-stopped

  backend:
    build:
      context: ./ModuleManagementServer
      dockerfile: ./server.Dockerfile
    container_name: module-management-backend
    depends_on:
      - postgres
      - keycloak
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/ModuleManagement
      - SPRING_DATASOURCE_USERNAME=${DB_USER}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI=http://keycloak:8080/auth/realms/module-management/protocol/openid-connect/certs
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER-URI=http://keycloak:8080/auth/realms/module-management
      - AI_SERVICE_URL=http://ai-service:5000
    networks:
      - module-management-network
    restart: unless-stopped

  frontend:
    build:
      context: ./ModuleManagementClient
      dockerfile: ./client.Dockerfile
    container_name: module-management-frontend
    environment:
      - KEYCLOAK_URL=https://module-management.ase.cit.tum.de/auth
    depends_on:
      - backend
      - ai-service
    networks:
      - module-management-network
    restart: unless-stopped

volumes:
  postgres_data:
  keycloak_data:
  overlap_data:

networks:
  module-management-network:
    driver: bridge
